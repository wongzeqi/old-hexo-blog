<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[常用正则表达式大全]]></title>
      <url>/2017/07/02/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<h1 id="全面的常用正则表达式大全"><a href="#全面的常用正则表达式大全" class="headerlink" title="全面的常用正则表达式大全"></a><center><strong>全面的常用正则表达式大全</strong></center></h1><blockquote>
<p>很多不太懂正则的朋友，在遇到需要用正则校验数据时，往往是在网上去找很久，结果找来的还是不很符合要求。所以我最近把开发中常用的一些正则表达式整理了一下，在这里分享一下。给自己留个底，也给朋友们做个参考。</p>
</blockquote>
<p><img src="http://p1.pstatp.com/large/10944/6821280613" alt="最全面的常用正则表达式大全"></p>
<h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a><strong>一、校验数字的表达式</strong></h2><a id="more"></a>
<p>1 数字：<code>^[0-9]*$</code></p>
<p>2 n位的数字：<code>^\d{n}$</code></p>
<p>3 至少n位的数字：<code>^\d{n,}$</code></p>
<p>4 m-n位的数字：<code>^\d{m,n}$</code></p>
<p>5 零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p>
<p>6 非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></p>
<p>7 带1-2位小数的正数或负数：<code>^(\-)?\d+(\.\d{1,2})?$</code></p>
<p>8 正数、负数、和小数：<code>^(\-|\+)?\d+(\.\d+)?$</code></p>
<p>9 有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></p>
<p>10 有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></p>
<p>11 非零的正整数：<code>^[1-9]\d*$</code> 或 <code>^([1-9][0-9]*){1,3}$</code> 或 <code>^\+?[1-9][0-9]*$</code></p>
<p>12 非零的负整数：<code>^\-[1-9][]0-9&quot;*$</code> 或 <code>^-[1-9]\d*$</code></p>
<p>13 非负整数：<code>^\d+$</code> 或 <code>^[1-9]\d*|0$</code></p>
<p>14 非正整数：<code>^-[1-9]\d*|0$</code> 或 <code>^((-\d+)|(0+))$</code></p>
<p>15 非负浮点数：<code>^\d+(\.\d+)?$</code> 或 <code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</code></p>
<p>16 非正浮点数：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$</code> 或 <code>^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</code></p>
<p>17 正浮点数：<code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$</code> 或 <code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></p>
<p>18 负浮点数：<code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$</code> 或 <code>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code></p>
<p>19 浮点数：<code>^(-?\d+)(\.\d+)?$</code> 或 <code>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></p>
<h2 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a><strong>二、校验字符的表达式</strong></h2><p>1 汉字：<code>^[\u4e00-\u9fa5]{0,}$</code></p>
<p>2 英文和数字：<code>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</code></p>
<p>3 长度为3-20的所有字符：<code>^.{3,20}$</code></p>
<p>4 由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></p>
<p>5 由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></p>
<p>6 由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></p>
<p>7 由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></p>
<p>8 由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$ 或 ^\w{3,20}$</code></p>
<p>9 中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></p>
<p>10 中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$</code> 或 <code>^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</code></p>
<p>11 可以输入含有<code>^%&amp;&#39;,;=?$\&quot;</code>等字符：<code>[^%&amp;&#39;,;=?$\x22]+</code></p>
<p>12 禁止输入含有~的字符：<code>[^~\x22]+</code></p>
<h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a><strong>三、特殊需求表达式</strong></h2><p>1 Email地址：<code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></p>
<p>2 域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></p>
<p>3 InternetURL：<code>[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code></p>
<p>4 手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code></p>
<p>5 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></p>
<p>6 国内电话号码(0511-4405222、021-87888822)：<code>\d{3}-\d{8}|\d{4}-\d{7}</code></p>
<p>7 身份证号(15位、18位数字)：<code>^\d{15}|\d{18}$</code></p>
<p>8 短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$</code> 或 <code>^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></p>
<p>9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p>
<p>10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w{5,17}$</code></p>
<p>11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</code></p>
<p>12 日期格式：<code>^\d{4}-\d{1,2}-\d{1,2}</code></p>
<p>13 一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></p>
<p>14 一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p>
<p>15 钱的输入格式：</p>
<p>16 1.有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]*$</code></p>
<p>17 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></p>
<p>18 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></p>
<p>19 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></p>
<p>20 5.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></p>
<p>21 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code></p>
<p>22 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</code></p>
<p>23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</code></p>
<p>24 备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p>
<p>25 xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</code></p>
<p>26 中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code></p>
<p>27 双字节字符：<code>[^\x00-\xff]</code> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p>
<p>28 空白行的正则表达式：<code>\n\s*\r</code> (可以用来删除空白行)</p>
<p>29 HTML标记的正则表达式：<code>&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p>
<p>30 首尾空白字符的正则表达式：<code>^\s*|\s*$或(^\s*)|(\s*$)</code> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p>
<p>31 腾讯QQ号：<code>[1-9][0-9]{4,}</code> (腾讯QQ号从10000开始)</p>
<p>32 中国邮政编码：<code>[1-9]\d{5}(?!\d)</code> (中国邮政编码为6位数字)</p>
<p>33 IP地址：<code>\d+\.\d+\.\d+\.\d+</code>(提取IP地址时有用)</p>
<p>34 IP地址：<code>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></p>
]]></content>
      
        <categories>
            
            <category> 学习整理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springMVC后台校验实现]]></title>
      <url>/2017/07/02/springMVC%E5%90%8E%E5%8F%B0%E6%A0%A1%E9%AA%8C%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h1 id="springMVC后台校验实现"><a href="#springMVC后台校验实现" class="headerlink" title="springMVC后台校验实现"></a><center><strong>springMVC后台校验实现</strong></center></h1><h3 id="第一步-meven添加依赖包，也可自行下载，注意jboss-logging与hibernate-validator的版本要能对应上："><a href="#第一步-meven添加依赖包，也可自行下载，注意jboss-logging与hibernate-validator的版本要能对应上：" class="headerlink" title="第一步:meven添加依赖包，也可自行下载，注意jboss.logging与hibernate-validator的版本要能对应上："></a><strong>第一步:meven添加依赖包，也可自行下载，注意jboss.logging与hibernate-validator的版本要能对应上：</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span>           </div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss.logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jboss-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0.CR2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="第二步-在配置文件中添加校验的bean配置"><a href="#第二步-在配置文件中添加校验的bean配置" class="headerlink" title="第二步:在配置文件中添加校验的bean配置"></a><strong>第二步:在配置文件中添加校验的bean配置</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"validator"</span> <span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"</span>&gt;</span>  </div><div class="line">        <span class="comment">&lt;!-- 配置校验器的提供类，这里使用的是Hibernate的校验 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"providerClass"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.validator.HibernateValidator"</span> /&gt;</span>  </div><div class="line">	   <span class="comment">&lt;!-- 指定校验使用的资源文件，如果不指定则默认使用classpath下的ValidationMessages.properties --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationMessageSource"</span> <span class="attr">ref</span>=<span class="string">"messageSource"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </div><div class="line">    <span class="comment">&lt;!-- 校验错误信息配置文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ReloadableResourceBundleMessageSource"</span>&gt;</span>  </div><div class="line">        <span class="comment">&lt;!-- 资源文件名,这里property的name为basenames所以错误信息的配置文件CustomValidationMessages省去后缀 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basenames"</span>&gt;</span>     </div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span>      </div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:CustomValidationMessages<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span>     </div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="comment">&lt;!-- 资源文件编码格式 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fileEncodings"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 对资源文件内容缓存时间，单位秒 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheSeconds"</span> <span class="attr">value</span>=<span class="string">"120"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里注意 <code>&lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;/&gt;</code>这行代码，不然输出的错误信息可能乱码</p>
<h3 id="第三步-新建错误信息配置文件，如我这里是CustomValidationMessages-properties，配置文件如下："><a href="#第三步-新建错误信息配置文件，如我这里是CustomValidationMessages-properties，配置文件如下：" class="headerlink" title="第三步:新建错误信息配置文件，如我这里是CustomValidationMessages.properties，配置文件如下："></a><strong>第三步:新建错误信息配置文件，如我这里是CustomValidationMessages.properties，配置文件如下：</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#校验错误信息的配置文件</span></div><div class="line">marketing.jgdm.error=机构代码不能为空</div><div class="line">marketing.yyrq.error=预约日期不能为空</div></pre></td></tr></table></figure>
<h3 id="第四步-在Pojo类中配置校验规则，如下所示，更多校验如-NotNull、-Null、-Max等可自行网上查阅"><a href="#第四步-在Pojo类中配置校验规则，如下所示，更多校验如-NotNull、-Null、-Max等可自行网上查阅" class="headerlink" title="第四步:在Pojo类中配置校验规则，如下所示，更多校验如@NotNull、@Null、@Max等可自行网上查阅"></a><strong>第四步:在Pojo类中配置校验规则，如下所示，更多校验如@NotNull、@Null、@Max等可自行网上查阅</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Size(min=1,message=&quot;&#123;marketing.jgdm.error&#125;&quot;)</div><div class="line">    private String jgdm;            //机构代码</div></pre></td></tr></table></figure>
<h3 id="第五步-Controller中使用该校验"><a href="#第五步-Controller中使用该校验" class="headerlink" title="第五步:Controller中使用该校验"></a><strong>第五步:Controller中使用该校验</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/insertDepositMarketing.action"</span>,method=&#123;RequestMethod.POST,RequestMethod.GET&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insertDepositMarketing</span><span class="params">(@Validated DepositMarketing depositMarketing,BindingResult bindingResult</span></span></div><div class="line">            ,Model model) <span class="keyword">throws</span> Exception&#123;</div><div class="line"></div><div class="line">        List&lt;ObjectError&gt; allErrors = bindingResult.getAllErrors();</div><div class="line">        <span class="keyword">if</span>(bindingResult.hasErrors())&#123;</div><div class="line">            <span class="keyword">for</span>(ObjectError error : allErrors)&#123;</div><div class="line">                System.out.println(error.getDefaultMessage());</div><div class="line">            &#125;</div><div class="line">            model.addAttribute(<span class="string">"allErrors"</span>,allErrors);</div><div class="line">            <span class="keyword">return</span> <span class="string">"fail"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> yybh = depositMarketingService.insertDepositMarketing(depositMarketing);</div><div class="line">        <span class="keyword">if</span>(yybh &gt; <span class="number">0</span>)&#123;</div><div class="line">            <span class="comment">//插入成功</span></div><div class="line">            <span class="keyword">return</span> <span class="string">"forward:queryDepositMarketing.action"</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"fail"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>使用@Validated对Po类进行校验，并用BindingResult接收校验</p>
<h3 id="第六步-页面输出错误信息"><a href="#第六步-页面输出错误信息" class="headerlink" title="第六步:页面输出错误信息"></a><strong>第六步:页面输出错误信息</strong></h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;</div><div class="line">&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %&gt;</div><div class="line">&lt;% String path = request.getContextPath(); String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/"; %&gt;</div><div class="line"></div><div class="line">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;base href="&lt;%=basePath%&gt;"&gt;</div><div class="line"></div><div class="line">    &lt;title&gt;My JSP 'MyJsp.jsp' starting page&lt;/title&gt;</div><div class="line"></div><div class="line">    &lt;meta http-equiv="pragma" content="no-cache"&gt;</div><div class="line">    &lt;meta http-equiv="cache-control" content="no-cache"&gt;</div><div class="line">    &lt;meta http-equiv="expires" content="0"&gt;    </div><div class="line">    &lt;meta http-equiv="keywords" content="keyword1,keyword2,keyword3"&gt;</div><div class="line">    &lt;meta http-equiv="description" content="This is my page"&gt;</div><div class="line">    &lt;!-- &lt;link rel="stylesheet" type="text/css" href="styles.css"&gt; --&gt;</div><div class="line"></div><div class="line">  &lt;/head&gt;</div><div class="line"></div><div class="line">  &lt;body&gt;</div><div class="line">     &lt;c:if test="$&#123;allErrors!= null&#125;"&gt;</div><div class="line">        &lt;c:forEach items="$&#123;allErrors&#125;" var="item"&gt;</div><div class="line">            $&#123;item.defaultMessage&#125;</div><div class="line">        &lt;/c:forEach&gt;</div><div class="line">    &lt;/c:if&gt;</div><div class="line">    &lt;center&gt; 操作居然失败了，真遗憾！&lt;/center&gt;&lt;br&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a><strong>分组校验</strong></h2><h3 id="第一步-新建一个校验分组接口，如下："><a href="#第一步-新建一个校验分组接口，如下：" class="headerlink" title="第一步:新建一个校验分组接口，如下："></a><strong>第一步:新建一个校验分组接口，如下：</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface MarketingValidationGroup &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个接口仅仅是标志校验分组</p>
<h3 id="第二步-在Pojo类中给不同的校验规则划分分组，如下："><a href="#第二步-在Pojo类中给不同的校验规则划分分组，如下：" class="headerlink" title="第二步:在Pojo类中给不同的校验规则划分分组，如下："></a><strong>第二步:在Pojo类中给不同的校验规则划分分组，如下：</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//将次校验划到校验分组:MarketingValidationGroup中去</div><div class="line">    @Size(min=1,message=&quot;&#123;marketing.jgdm.error&#125;&quot;,groups=MarketingValidationGroup.class)</div></pre></td></tr></table></figure>
<h3 id="第散步步-在Controller中使用校验分组，如下："><a href="#第散步步-在Controller中使用校验分组，如下：" class="headerlink" title="第散步步:在Controller中使用校验分组，如下："></a><strong>第散步步:在Controller中使用校验分组，如下：</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public String insertDepositMarketing(@Validated(value=&#123;MarketingValidationGroup.class&#125;) DepositMarketing depositMarketing,BindingResult bindingResult</div><div class="line">            ,Model model) throws Exception&#123;</div><div class="line">            //代码省略</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习积累 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java正则表达式]]></title>
      <url>/2017/07/02/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="Java正则表达式"><a href="#Java正则表达式" class="headerlink" title="Java正则表达式"></a><center><strong>Java正则表达式</strong></center></h1><blockquote>
<p><code>java.util.regex</code>是一个用正则表达式所订制的模式来对字符串进行匹配工作的类库包。它包括两个类：<code>Pattern</code>和<code>Matcher</code>。Pattern是一个正则表达式经编译后的表现模式。<br><img src="http://os94ofsac.bkt.clouddn.com/note/zhengze.png" alt="正则"><br>Matcher对象是一个状态机器，它依据Pattern对象做为匹配模式对字符串展开匹配检查。 首先一个Pattern实例订制了一个所用语法与PERL的类似的正则表达式经编译后的模式，然后一个Matcher实例在这个给定的Pattern实例的模式控制下进行字符串的匹配工作。</p>
</blockquote>
<a id="more"></a>
<h2 id="正则表达式的构造摘要"><a href="#正则表达式的构造摘要" class="headerlink" title="正则表达式的构造摘要"></a>正则表达式的构造摘要</h2><blockquote>
<p>详细摘要请看<a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/util/regex/Pattern.html" target="_blank" rel="external">jdk中文文档</a>,下面我只是列出一些经常使用的</p>
</blockquote>
<table>
<thead>
<tr>
<th>构造</th>
<th>匹配</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>任何字符（与行结束符可能匹配也可能不匹配）</td>
</tr>
<tr>
<td>\d</td>
<td>数字：[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>非数字： [^0-9]</td>
</tr>
<tr>
<td>\s</td>
<td>空白字符：[ \t\n\x0B\f\r]</td>
</tr>
<tr>
<td>\S</td>
<td>非空白字符：[^\s]</td>
</tr>
<tr>
<td>\w</td>
<td>单词字符：[a-zA-Z_0-9]</td>
</tr>
<tr>
<td>\W</td>
<td>非单词字符：[^\w]</td>
</tr>
<tr>
<td>[abc]</td>
<td>a、b 或 c（简单类）</td>
</tr>
<tr>
<td>[^abc]</td>
<td>任何字符，除了 a、b 或 c（否定）</td>
</tr>
<tr>
<td>[a-zA-Z]</td>
<td>a 到 z 或 A 到 Z，两头的字母包括在内（范围）</td>
</tr>
<tr>
<td>^</td>
<td>行的开头</td>
</tr>
<tr>
<td>$</td>
<td>行的结尾</td>
</tr>
<tr>
<td>X?</td>
<td>X，一次或一次也没有</td>
</tr>
<tr>
<td>X*</td>
<td>X，零次或多次</td>
</tr>
<tr>
<td>X+</td>
<td>X，一次或多次</td>
</tr>
<tr>
<td>X{n}</td>
<td>X，恰好 n 次</td>
</tr>
<tr>
<td>X{n,}</td>
<td>X，至少 n 次</td>
</tr>
<tr>
<td>X{n,m}</td>
<td>X，至少 n 次，但是不超过 m 次</td>
</tr>
</tbody>
</table>
<h2 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h2><blockquote>
<p>正则表达式的编译表示形式,学过<code>python</code>的都知道这个和python的正则表达式有异曲同工之妙。 但是它的构造方法是私有的，因此不能直接创建对象，但是可以调用它的静态方法返回一个对象，下面会详细介绍</p>
</blockquote>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><blockquote>
<ul>
<li><code>Pattern</code>类用于创建一个正则表达式,也可以说创建一个匹配模式,它的构造方法是私有的,不可以直接创建,但可以通过<code>Pattern.complie(String regex)</code>简单工厂方法创建一个正则表达式，代码如下：</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//采用的complie(String regex)</span></div><div class="line">Pattern pattern = Pattern.compile(<span class="string">"\\d+"</span>);</div><div class="line"></div><div class="line"><span class="comment">//采用的是complie(String regex,int flag)其中flag表示标志，下面的标志表示忽略字母大小写，详细的字段请看文档</span></div><div class="line">Pattern pattern=Pattern.compile(<span class="string">"(CHEN)(\\D*)(\\d*)"</span>,Pattern.CASE_INSENSITIVE);</div></pre></td></tr></table></figure>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><blockquote>
<ul>
<li><code>Pattern compile(String regex)</code> 用于创建Pattern对象</li>
<li><code>Pattern compile(String regex,int flags)</code> 用于创建Pattern对象，并且指定了标志(比如忽略字母大小写)</li>
<li><code>int flags()</code> 返回此模式的匹配标志</li>
<li><code>String pattern()</code> 返回在其中编译过此模式的正则表达式。</li>
</ul>
<ul>
<li><code>String[] split(CharSequence input)</code> 根据此模式的正则表达式将输入的字符串拆分成String数组,默认的都是全部拆分开</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给出正则表达式用于匹配数字(0-9)</span></div><div class="line">Pattern pattern = Pattern.compile(<span class="string">"\\d+"</span>);</div><div class="line">String str = <span class="string">"我是陈加兵456郑元梅34擦市场的逻辑啊"</span>;</div><div class="line">String[] splits = pattern.split(str, <span class="number">2</span>);   <span class="comment">//结果:[我是陈加兵,郑元梅34擦市场的逻辑啊]</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>String[] split(CharSequence input,int limit)</code> 将字符串按照正则表达式表示的内容进行分组，如果limit&gt;0那么就分成limit个组，如果limit&lt;0就按照默认全部分开</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给出正则表达式用于匹配数字(0-9)</span></div><div class="line">Pattern pattern = Pattern.compile(<span class="string">"\\d+"</span>);</div><div class="line">String str = <span class="string">"我是陈加兵456郑元梅34擦市场的逻辑啊"</span>;</div><div class="line">String[] splits = pattern.split(str, <span class="number">2</span>);   <span class="comment">//结果:[我是陈加兵,郑元梅34擦市场的逻辑啊]</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>Pattern.matches(String regex,CharSequence input)</code>是一个静态方法,用于快速匹配字符串,该方法适合用于只匹配一次,且匹配全部字符串</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Pattern.matches(<span class="string">"\\d+"</span>,<span class="string">"2223"</span>);<span class="comment">//返回true </span></div><div class="line">Pattern.matches(<span class="string">"\\d+"</span>,<span class="string">"2223aa"</span>);<span class="comment">//返回false,需要匹配到所有字符串才能返回true,这里aa不能匹配到 </span></div><div class="line">Pattern.matches(<span class="string">"\\d+"</span>,<span class="string">"22bb23"</span>);<span class="comment">//返回false,需要匹配到所有字符串才能返回true,这里bb不能匹配到</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>Matcher matcher(CharSequence input)</code> 创建匹配给定输入与此模式的匹配器,现在只是先了解以下，下面会详细解释Matcher这个类</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Pattern p=Pattern.compile(&quot;\\d+&quot;); </div><div class="line">Matcher m=p.matcher(&quot;22bb23&quot;);</div></pre></td></tr></table></figure>
<h2 id="Matcher"><a href="#Matcher" class="headerlink" title="Matcher"></a>Matcher</h2><blockquote>
<p><code>Pattern</code>类只能做一些简单的匹配操作,要想得到更强更便捷的正则匹配操作,那就需要将Pattern与Matcher一起合作.Matcher类提供了对正则表达式的分组支持,以及对正则表达式的多次匹配支持.</p>
<p>Matcher类和Pattern类一样它的构造方法同样是私有的，因此不能直接构造对象，但是上面我们说过Pattern类中有一个方法可以返回一个Matcher对象(<code>matcher(CharSequence input)</code>)</p>
</blockquote>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><blockquote>
<ul>
<li><code>boolean mathces()</code> 尝试将整个区域与模式匹配(针对的是整个字符串，如果整个字符串未完全匹配，那么返回false,如果完全匹配那么返回true)</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Pattern pattern=Pattern.compile(&quot;\\d+&quot;);  //创建Pattern对象</div><div class="line">String str=&quot;I am hreo 1234&quot;;  //需要匹配的字符串</div><div class="line">Matcher matcher=pattern.matcher(str);</div><div class="line">//并没有完全匹配，因此返回false，如果str=&quot;123445&quot;，那么就会返回true</div><div class="line">System.out.println(matcher.matches());</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>boolean lookingAt()</code> 尝试从给定字符串的开头开始匹配，如果有子字符串匹配成功，那么返回true(针对的不是整个字符串，而是从开头开始，如果开头有一段字符串匹配成功，那么返回true)</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Pattern pattern=Pattern.compile(&quot;\\d+&quot;);  //创建Pattern对象</div><div class="line">String str=&quot;1234 I am a hero&quot;;  //需要匹配的字符串</div><div class="line">Matcher matcher=pattern.matcher(str);</div><div class="line">//开头的1234匹配到了，因此返回true，如果str=&quot;I am a hero 1234&quot;将返回false</div><div class="line">System.out.println(matcher.lookingAt());</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>int start()</code> 匹配到的字符串的第一个元素的索引,如果没有匹配到调用此方法将会报错</li>
<li><code>int end()</code> 匹配到的字符串的最后一个元素的索引,如果没有匹配到调用此方法将会报错</li>
<li><code>String group()</code> 返回的是匹配到的字符串,如果没有匹配到调用此方法将会报错</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Pattern pattern=Pattern.compile(&quot;\\d+&quot;);  //创建Pattern对象</div><div class="line">String str=&quot;1234 I am a hero 33455&quot;;  //需要匹配的字符串</div><div class="line">Matcher matcher=pattern.matcher(str);</div><div class="line">if(matcher.lookingAt())</div><div class="line">&#123;</div><div class="line">    System.out.println(&quot;开始匹配到下标为&quot;+matcher.start());  //0</div><div class="line">    System.out.println(&quot;匹配结束的下标为&quot;+matcher.end());    //4</div><div class="line">    System.out.println(&quot;匹配的字符串为&quot;+matcher.group());  //1234</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>boolean find()</code> 查找整个字符串，如果在任意位置有一段字符串能够匹配成功，那么返回true(任意位置),然后如果再次调用这个查找的话，那么就从上次查找到的末尾开始匹配，也就是说查找的是下一个子序列了</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    Pattern pattern=Pattern.compile(<span class="string">"\\d+"</span>);  <span class="comment">//创建Pattern对象</span></div><div class="line">    String str=<span class="string">"1234 I am a hero 6666 chenjiabing8888"</span>;  <span class="comment">//需要匹配的字符串</span></div><div class="line">    Matcher matcher=pattern.matcher(str);</div><div class="line">    <span class="keyword">while</span>(matcher.find())  <span class="comment">//如果还有匹配的字符序列</span></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"开始匹配到下标为"</span>+matcher.start()); </div><div class="line">        System.out.println(<span class="string">"匹配结束的下标为"</span>+matcher.end());   </div><div class="line">        System.out.println(<span class="string">"匹配的字符串为"</span>+matcher.group());  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line"><span class="comment">/*结果如下： * 开始匹配到下标为0 匹配结束的下标为4 匹配的字符串为1234 开始匹配到下标为17 匹配结束的下标为21 匹配的字符串为6666 开始匹配到下标为33 匹配结束的下标为37 匹配的字符串为8888 */</span></div><div class="line"></div><div class="line"><span class="comment">/* * 从上面返回的结果可以知道，find()可以匹配多次只要这个字符串还有可以匹配， * 并且每次的匹配字段的开始下标都是上一次匹配的结束字母的下一个下标 */</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>boolean find(int start)</code> 从指定的索引start位置开始匹配，这个用于重置find()匹配器，因为直接使用find()它的每次开始的索引都是不一样的</li>
</ul>
<ul>
<li><code>String group(int num)</code> 返回指定分组匹配到的字符串,group(0)表示匹配到的整个字符串,group(1) 表示匹配到的第一个字符(即是第一个括号中匹配的模式)</li>
</ul>
<ul>
<li><code>int groupCount()</code> 返回匹配到的分组个数</li>
<li><code>String replaceAll(String str)</code> 将所有于模式相匹配的 字符串全部替换程指定的字符串str,返回的是替换后的文本</li>
<li><code>String replaceFirst(String str)</code> 只将第一次匹配到的字符串替换成指定的字符串str，返回的时替换后的文本</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Pattern pattern=Pattern.compile(<span class="string">"\\d+"</span>);</div><div class="line">String str=<span class="string">"chenjiabing2344cal3445"</span>;</div><div class="line">Matcher matcher=pattern.matcher(str);</div><div class="line">str=matcher.replaceFirst(<span class="string">"陈加兵"</span>);   </div><div class="line">System.out.println(str);   <span class="comment">//输出:chenjiabing陈加兵cal3445</span></div><div class="line"></div><div class="line"><span class="comment">/* * str=matcher.replaceAll("陈加兵"); * System.out.println(str) //输出:chenjiabing陈加兵cal陈加兵 */</span></div></pre></td></tr></table></figure>
<h2 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a><strong>捕获组</strong></h2><blockquote>
<p>捕获组可以通过从左到右计算其开括号来编号，编号是从<code>1</code> 开始的。例如，在表达式 <code>((A)(B(C)))</code>中，存在四个这样的组：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">((A)(B(C)))</div><div class="line">(A)</div><div class="line">(B(C))</div><div class="line">(C)</div></pre></td></tr></table></figure>
<blockquote>
<p>总之在正则表达式中在括号中的就是一个分组,下面用一个实例来理解一下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Pattern pattern=Pattern.compile(<span class="string">"(\\D*)(\\d+)\\s(\\D+)"</span>);</div><div class="line">Matcher matcher=pattern.matcher(<span class="string">"chenjiabingshizuibangde6666 chenjiabign"</span>);</div><div class="line"><span class="keyword">if</span>(matcher.find())</div><div class="line">&#123;</div><div class="line">    System.out.println(<span class="string">"总共匹配到了"</span>+matcher.groupCount()+<span class="string">"个分组"</span>);</div><div class="line">    System.out.println(<span class="string">"匹配到整个字符串为"</span>+matcher.group(<span class="number">0</span>));</div><div class="line">    System.out.println(<span class="string">"匹配到的第一个字符串为"</span>+matcher.group(<span class="number">1</span>));</div><div class="line">    System.out.println(<span class="string">"匹配到的第二个字符串为"</span>+matcher.group(<span class="number">2</span>));</div><div class="line">    System.out.println(<span class="string">"匹配到的第三个字符串为"</span>+matcher.group(<span class="number">3</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="贪婪模式和非贪婪模式"><a href="#贪婪模式和非贪婪模式" class="headerlink" title="贪婪模式和非贪婪模式"></a>贪婪模式和非贪婪模式</h2><blockquote>
<p>贪婪与非贪婪模式影响的是被量词修饰的子表达式的匹配行为，贪婪模式在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在整个表达式匹配成功的前提下，尽可能少的匹配</p>
<p>一般写<code>python</code>爬虫的时候使用的都是非贪婪模式来匹配<br>使用了贪婪模式后会尽可能匹配更多的字符串，即是到了正则表达式定的末尾但是还是会继续向后匹配，看看是否还能匹配，非贪婪模式则是相反，到了正则表达式定义的结束字符就直接停止匹配了</p>
<p>贪婪模式: <code>.*</code> , <code>.+</code></p>
<p>非贪婪模式: <code>.*?</code> , <code>.+?</code></p>
</blockquote>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a><strong>实例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用了贪婪模式,因此当匹配到第一个的时候还要向后面匹配看看是否还能匹配到，由于后面还有结尾的，因此还是能够匹配的，因此匹配到的是:陈加兵郑元梅</span></div><div class="line">Pattern pattern=Pattern.compile(<span class="string">"(.*)"</span>);   </div><div class="line"></div><div class="line"><span class="comment">//使用了非贪婪模式，因此当匹配到第一个的时候就不向后面匹配了，直接返回了，因此匹配到的是:陈加兵</span></div><div class="line">Pattern pattern1=Pattern.compile(<span class="string">"(.*?)"</span>);   </div><div class="line">String str=<span class="string">"陈加兵郑元梅"</span>;</div><div class="line">Matcher matcher=pattern1.matcher(str);</div><div class="line"><span class="keyword">if</span>(matcher.find())</div><div class="line">&#123;</div><div class="line">    System.out.println(matcher.groupCount());  <span class="comment">//1</span></div><div class="line">    System.out.println(matcher.group(<span class="number">1</span>));  <span class="comment">//输出匹配到的字符串,此时输出的是:陈加兵,如果使用贪婪模式输出的是：陈加兵郑元梅</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习整理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 正则表达式 </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM内存结构简介]]></title>
      <url>/2017/07/02/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h1 id="Jvm的内存结构"><a href="#Jvm的内存结构" class="headerlink" title="Jvm的内存结构"></a><center><a href="http:wangzeqi.website" target="_blank" rel="external"><strong>Jvm的内存结构</strong><a></a></a></center></h1><p>先看一张图，这张图能很清晰的说明JVM内存结构布局。<br><img src="http://img.blog.csdn.net/20170324105619218" alt=""></p>
<a id="more"></a>
<h2 id="Java的内存结构：-gt"><a href="#Java的内存结构：-gt" class="headerlink" title="Java的内存结构：&gt;"></a><strong>Java的内存结构：&gt;</strong></h2><p>所有的<a href="http://lib.csdn.net/base/java" title="Java 知识库" target="_blank" rel="external">Java</a>开发人员可能会遇到这样的困惑？我该为堆内存设置多大空间呢？OutOfMemoryError的异常到底涉及到运行时数据的哪块区域？该怎么解决呢？其实如果你经常解决服务器性能问题，那么这些问题就会变的非常常见，了解JVM内存也是为了服务器出现性能问题的时候可以快速的了解那块的内存区域出现问题，以便于快速的解决生产故障。</p>
<p>JVM内存结构主要有三大块：<strong>堆内存、方法区和栈&gt;</strong>。堆内存是JVM中最大的一块由<strong>年轻代和老年代</strong>组成，而年轻代内存又被分成三部分，<strong>Eden空间、From Survivor空间、To Survivor空间,</strong>默认情况下年轻代按照8:1:1的比例来分配；<br>方法区存储类信息、常量、静态变量等数据，是线程共享的区域，为与Java堆区分，方法区还有一个别名Non-Heap(非堆)；栈又分为java虚拟机栈和本地方法栈主要用于方法的执行。</p>
<p>在通过一张图来了解如何通过参数来控制各区域的内存大小</p>
<p><img src="http://img.blog.csdn.net/20170324105726547" alt=""></p>
<h2 id="控制参数-gt"><a href="#控制参数-gt" class="headerlink" title="控制参数&gt;"></a><strong>控制参数&gt;</strong></h2><p>-Xms设置堆的最小空间大小。<br>-Xmx设置堆的最大空间大小。<br>-XX:NewSize设置新生代最小空间大小。<br>-XX:MaxNewSize设置新生代最大空间大小。<br>-XX:PermSize设置永久代最小空间大小。<br>-XX:MaxPermSize设置永久代最大空间大小。<br>-Xss设置每个线程的堆栈大小。</p>
<p>没有直接设置老年代的参数，但是可以设置堆空间大小和新生代空间大小两个参数来间接控制。<br><strong>老年代空间大小=堆空间大小-年轻代大空间大小</strong></p>
<p>从更高的一个维度再次来看JVM和系统调用之间的关系</p>
<p><img src="http://img.blog.csdn.net/20170324110041483" alt=""></p>
<p><span style="color:rgb(255,0,0)">方法区和对是所有线程共享的内存区域；而java栈、本地方法栈和程序员计数器是运行是线程私有的内存区域。&gt;</span></p>
<p><strong>下面我们详细介绍每个区域的作用&gt;</strong></p>
<h2 id="Java堆（Heap）-gt"><a href="#Java堆（Heap）-gt" class="headerlink" title="Java堆（Heap）&gt;"></a><strong>Java堆（Heap）&gt;</strong></h2><p>对于大多数应用来说，Java堆（<a href="http://lib.csdn.net/base/java" title="Java 知识库" target="_blank" rel="external">Java</a>Heap）是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</p>
<p>ava堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC堆”。如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集<a href="http://lib.csdn.net/base/datastructure" title="算法与数据结构知识库" target="_blank" rel="external">算法</a>，所以Java堆中还可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。</p>
<p>根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。</p>
<p>如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</p>
<h2 id="方法区（Method-Area）-gt"><a href="#方法区（Method-Area）-gt" class="headerlink" title="方法区（Method Area）&gt;"></a><strong>方法区（Method Area）&gt;</strong></h2><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。</p>
<p>对于习惯在HotSpot虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区，或者说使用永久代来实现方法区而已。</p>
<p>Java虚拟机规范对这个区域的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的。</p>
<p>根据Java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</p>
<h2 id="程序计数器（Program-Counter-Register）-gt"><a href="#程序计数器（Program-Counter-Register）-gt" class="headerlink" title="程序计数器（Program Counter Register）&gt;"></a><strong>程序计数器（Program Counter Register）&gt;</strong></h2><p>程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。<br>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</p>
<p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie方法，这个计数器值则为空（Undefined）。</p>
<p><strong>此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</strong></p>
<h2 id="JVM栈（JVM-Stacks）-gt"><a href="#JVM栈（JVM-Stacks）-gt" class="headerlink" title="JVM栈（JVM Stacks）&gt;"></a><strong>JVM栈（JVM Stacks）&gt;</strong></h2><p>与程序计数器一样，Java虚拟机栈（<a href="http://lib.csdn.net/base/java" title="Java 知识库" target="_blank" rel="external">java</a>Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p>
<p>局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。</p>
<p>其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p>
<p>在Java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError异常。</p>
<h2 id="本地方法栈（Native-Method-Stacks）"><a href="#本地方法栈（Native-Method-Stacks）" class="headerlink" title="本地方法栈（Native Method Stacks）"></a><strong>本地方法栈（Native Method Stacks）</strong></h2><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与<a href="http://lib.csdn.net/base/datastructure" title="算法与数据结构知识库" target="_blank" rel="external">数据结构</a>并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。</p>
]]></content>
      
        <categories>
            
            <category> 学习积累 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringMVC学习笔记]]></title>
      <url>/2017/07/02/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="SpringMVC学习笔记"><a href="#SpringMVC学习笔记" class="headerlink" title="SpringMVC学习笔记"></a><center><a href="http://wangzeqi.website"><strong>SpringMVC学习笔记</strong></a></center></h1><h2 id="一、SpringMVC基础入门，创建一个HelloWorld程序"><a href="#一、SpringMVC基础入门，创建一个HelloWorld程序" class="headerlink" title="一、SpringMVC基础入门，创建一个HelloWorld程序"></a><strong>一、SpringMVC基础入门，创建一个HelloWorld程序</strong></h2><h2 id="springmvc工作原理"><a href="#springmvc工作原理" class="headerlink" title="springmvc工作原理"></a><strong>springmvc工作原理</strong></h2><p><img src="http://os94ofsac.bkt.clouddn.com/note/springmvc%E6%B5%81%E7%A8%8B.jpg" alt="spring工作原理"></p>
<a id="more"></a>
<p>1.首先，导入SpringMVC需要的jar包。</p>
<p><img src="http://images0.cnblogs.com/blog2015/694841/201506/032131066955378.png" alt=""></p>
<p>2.添加Web.xml配置文件中关于SpringMVC的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;!--configure the setting of springmvcDispatcherServlet and configure the mapping--&gt;</div><div class="line">  &lt;servlet&gt;</div><div class="line">      &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</div><div class="line">      &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</div><div class="line">      &lt;init-param&gt;</div><div class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">            &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt;</div><div class="line">        &lt;/init-param&gt;</div><div class="line">        &lt;!-- &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; --&gt;</div><div class="line">  &lt;/servlet&gt;</div><div class="line"></div><div class="line">  &lt;servlet-mapping&gt;</div><div class="line">      &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</div><div class="line">      &lt;url-pattern&gt;/&lt;/url-pattern&gt;</div><div class="line">  &lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure></p>
<p>3.在src下添加springmvc-servlet.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></div><div class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd</div><div class="line">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd"&gt;                    </div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- scan the package and the sub package --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"test.SpringMVC"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- don't handle the static resource --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- if you use annotation you must configure following setting --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- configure the InternalResourceViewResolver --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> </span></div><div class="line">            <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</div><div class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>4.在WEB-INF文件夹下创建名为jsp的文件夹，用来存放jsp视图。创建一个hello.jsp，在body中添加“Hello World”。</p>
<p>5.建立包及Controller，如下所示</p>
<p><img src="http://images0.cnblogs.com/blog2015/694841/201506/032227247897004.png" alt=""></p>
<p>6.编写Controller代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/mvc"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mvcController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;        </div><div class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>7.启动服务器，键入<a href="http://localhost:8080/项目名/mvc/hello" target="_blank" rel="external">http://localhost:8080/项目名/mvc/hello</a></p>
<h2 id="二、配置解析"><a href="#二、配置解析" class="headerlink" title="二、配置解析"></a>二、配置解析</h2><p>1.Dispatcherservlet</p>
<p>　　DispatcherServlet是前置控制器，配置在web.xml文件中的。拦截匹配的请求，Servlet拦截匹配规则要自已定义，把拦截下来的请求，依据相应的规则分发到目标Controller来处理，是配置spring MVC的第一步。</p>
<p>2.InternalResourceViewResolver</p>
<p>　　视图名称解析器</p>
<p>3.以上出现的注解</p>
<p>@Controller负责注册一个bean 到spring 上下文中</p>
<p>@RequestMapping注解为控制器指定可以处理哪些 URL 请求</p>
<h2 id="三、SpringMVC常用注解"><a href="#三、SpringMVC常用注解" class="headerlink" title="三、SpringMVC常用注解"></a>三、SpringMVC常用注解</h2><p>@Controller</p>
<p>　　负责注册一个bean 到spring 上下文中<br>@RequestMapping</p>
<p>　　注解为控制器指定可以处理哪些 URL 请求<br>@RequestBody</p>
<p>　　该注解用于读取Request请求的body部分数据，使用系统默认配置的HttpMessageConverter进行解析，然后把相应的数据绑定到要返回的对象上,再把HttpMessageConverter返回的对象数据绑定到 controller中方法的参数上</p>
<p>@ResponseBody</p>
<p>　　该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区</p>
<p>@ModelAttribute　　　</p>
<p>　　在方法定义上使用 @ModelAttribute 注解：Spring MVC 在调用目标处理方法前，会先逐个调用在方法级上标注了@ModelAttribute 的方法</p>
<p>　　在方法的入参前使用 @ModelAttribute 注解：可以从隐含对象中获取隐含的模型数据中获取对象，再将请求参数 –绑定到对象中，再传入入参将方法入参对象添加到模型中</p>
<p>@RequestParam　</p>
<p>　　在处理方法入参处使用 @RequestParam 可以把请求参 数传递给请求方法</p>
<p>@PathVariable</p>
<p>　　绑定 URL 占位符到入参<br>@ExceptionHandler</p>
<p>　　注解到方法上，出现异常时会执行该方法<br>@ControllerAdvice</p>
<p>　　使一个Contoller成为全局的异常处理类，类中用@ExceptionHandler方法注解的方法可以处理所有Controller发生的异常</p>
<h2 id="四、自动匹配参数"><a href="#四、自动匹配参数" class="headerlink" title="四、自动匹配参数"></a>四、自动匹配参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//match automatically</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/person"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toPerson</span><span class="params">(String name,<span class="keyword">double</span> age)</span></span>&#123;</div><div class="line">        System.out.println(name+<span class="string">" "</span>+age);</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="五、自动装箱"><a href="#五、自动装箱" class="headerlink" title="五、自动装箱"></a>五、自动装箱</h2><p>1.编写一个Person实体类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test.SpringMVC.model;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.在Controller里编写方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//boxing automatically</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/person1"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toPerson</span><span class="params">(Person p)</span></span>&#123;</div><div class="line">        System.out.println(p.getName()+<span class="string">" "</span>+p.getAge());</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="六、使用InitBinder来处理Date类型的参数"><a href="#六、使用InitBinder来处理Date类型的参数" class="headerlink" title="六、使用InitBinder来处理Date类型的参数"></a>六、使用InitBinder来处理Date类型的参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//the parameter was converted in initBinder</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/date"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">(Date date)</span></span>&#123;</div><div class="line">        System.out.println(date);</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//At the time of initialization,convert the type "String" to type "date"</span></div><div class="line">    <span class="meta">@InitBinder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(ServletRequestDataBinder binder)</span></span>&#123;</div><div class="line">        binder.registerCustomEditor(Date.class, <span class="keyword">new</span> CustomDateEditor(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>),</div><div class="line">                <span class="keyword">true</span>));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="七、向前台传递参数"><a href="#七、向前台传递参数" class="headerlink" title="七、向前台传递参数"></a>七、向前台传递参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//pass the parameters to front-end</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/show"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showPerson</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</div><div class="line">        Person p =<span class="keyword">new</span> Person();</div><div class="line">        map.put(<span class="string">"p"</span>, p);</div><div class="line">        p.setAge(<span class="number">20</span>);</div><div class="line">        p.setName(<span class="string">"jayjay"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"show"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>前台可在Request域中取到”p”</p>
<h2 id="八、使用Ajax调用"><a href="#八、使用Ajax调用" class="headerlink" title="八、使用Ajax调用"></a>八、使用Ajax调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//pass the parameters to front-end using ajax</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getPerson"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPerson</span><span class="params">(String name,PrintWriter pw)</span></span>&#123;</div><div class="line">        pw.write(<span class="string">"hello,"</span>+name);        </div><div class="line">    &#125;</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/name"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"name"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>前台用下面的Jquery代码调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">             $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                 $.post(<span class="string">"mvc/getPerson"</span>,&#123;<span class="attr">name</span>:$(<span class="string">"#name"</span>).val()&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">                     alert(data);</div><div class="line">                 &#125;);</div><div class="line">             &#125;);</div><div class="line">         &#125;);</div></pre></td></tr></table></figure>
<h2 id="九、在Controller中使用redirect方式处理请求"><a href="#九、在Controller中使用redirect方式处理请求" class="headerlink" title="九、在Controller中使用redirect方式处理请求"></a>九、在Controller中使用redirect方式处理请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//redirect </span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/redirect"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">redirect</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:hello"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="十、文件上传"><a href="#十、文件上传" class="headerlink" title="十、文件上传"></a>十、文件上传</h2><p>1.需要导入两个jar包</p>
<p><img src="http://images0.cnblogs.com/blog2015/694841/201506/052005184887879.png" alt=""></p>
<p>2.在SpringMVC配置文件中加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- upload settings --&gt;</div><div class="line">    &lt;bean id=&quot;multipartResolver&quot;  class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</div><div class="line">        &lt;property name=&quot;maxUploadSize&quot; value=&quot;102400000&quot;&gt;&lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div></pre></td></tr></table></figure>
<p>3.方法代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/upload"</span>,method=RequestMethod.POST)</div><div class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(HttpServletRequest req)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">       MultipartHttpServletRequest mreq = (MultipartHttpServletRequest)req;</div><div class="line">       MultipartFile file = mreq.getFile(<span class="string">"file"</span>);</div><div class="line">       String fileName = file.getOriginalFilename();</div><div class="line">       SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);        </div><div class="line">       FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(req.getSession().getServletContext().getRealPath(<span class="string">"/"</span>)+</div><div class="line">               <span class="string">"upload/"</span>+sdf.format(<span class="keyword">new</span> Date())+fileName.substring(fileName.lastIndexOf(<span class="string">'.'</span>)));</div><div class="line">       fos.write(file.getBytes());</div><div class="line">       fos.flush();</div><div class="line">       fos.close();</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>4.前台form表单</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"mvc/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="十一、使用-RequestParam注解指定参数的name"><a href="#十一、使用-RequestParam注解指定参数的name" class="headerlink" title="十一、使用@RequestParam注解指定参数的name"></a>十一、使用@RequestParam注解指定参数的name</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mvcController1</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/param"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestParam</span><span class="params">(@RequestParam(value=<span class="string">"id"</span>)</span> Integer id,</span></div><div class="line">            @<span class="title">RequestParam</span><span class="params">(value=<span class="string">"name"</span>)</span>String name)&#123;</div><div class="line">        System.out.println(id+<span class="string">" "</span>+name);</div><div class="line">        <span class="keyword">return</span> <span class="string">"/hello"</span>;</div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="十二、RESTFul风格的SringMVC"><a href="#十二、RESTFul风格的SringMVC" class="headerlink" title="十二、RESTFul风格的SringMVC"></a>十二、RESTFul风格的SringMVC</h2><p>1.RestController<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/rest"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestController</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/user/&#123;id&#125;"</span>,method=RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</div><div class="line">        System.out.println(<span class="string">"get"</span>+id);</div><div class="line">        <span class="keyword">return</span> <span class="string">"/hello"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/user/&#123;id&#125;"</span>,method=RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</div><div class="line">        System.out.println(<span class="string">"post"</span>+id);</div><div class="line">        <span class="keyword">return</span> <span class="string">"/hello"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/user/&#123;id&#125;"</span>,method=RequestMethod.PUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">put</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</div><div class="line">        System.out.println(<span class="string">"put"</span>+id);</div><div class="line">        <span class="keyword">return</span> <span class="string">"/hello"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/user/&#123;id&#125;"</span>,method=RequestMethod.DELETE)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</div><div class="line">        System.out.println(<span class="string">"delete"</span>+id);</div><div class="line">        <span class="keyword">return</span> <span class="string">"/hello"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.form表单发送put和delete请求</p>
<p>在web.xml中配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- configure the HiddenHttpMethodFilter,convert the post method to put or delete --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在前台可以用以下代码产生请求</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"rest/user/1"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"PUT"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"put"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"rest/user/1"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"rest/user/1"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"rest/user/1"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"DELETE"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"delete"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="十三、返回json格式的字符串"><a href="#十三、返回json格式的字符串" class="headerlink" title="十三、返回json格式的字符串"></a>十三、返回json格式的字符串</h2><p>1.导入以下jar包</p>
<p><img src="http://images0.cnblogs.com/blog2015/694841/201506/052029372696778.png" alt=""></p>
<p>2.方法代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/json"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jsonController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span>  User <span class="title">get</span><span class="params">()</span></span>&#123;</div><div class="line">        User u = <span class="keyword">new</span> User();</div><div class="line">        u.setId(<span class="number">1</span>);</div><div class="line">        u.setName(<span class="string">"jayjay"</span>);</div><div class="line">        u.setBirth(<span class="keyword">new</span> Date());</div><div class="line">        <span class="keyword">return</span> u;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="十四、异常的处理"><a href="#十四、异常的处理" class="headerlink" title="十四、异常的处理"></a>十四、异常的处理</h2><p>1.处理局部异常（Controller内）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ExceptionHandler</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">exceptionHandler</span><span class="params">(Exception ex)</span></span>&#123;</div><div class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>);</div><div class="line">        mv.addObject(<span class="string">"exception"</span>, ex);</div><div class="line">        System.out.println(<span class="string">"in testExceptionHandler"</span>);</div><div class="line">        <span class="keyword">return</span> mv;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/error"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">error</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">5</span>/<span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>2.处理全局异常（所有Controller）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testControllerAdvice</span> </span>&#123;</div><div class="line">    <span class="meta">@ExceptionHandler</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">exceptionHandler</span><span class="params">(Exception ex)</span></span>&#123;</div><div class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>);</div><div class="line">        mv.addObject(<span class="string">"exception"</span>, ex);</div><div class="line">        System.out.println(<span class="string">"in testControllerAdvice"</span>);</div><div class="line">        <span class="keyword">return</span> mv;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.另一种处理全局异常的方法</p>
<p>在SpringMVC配置文件中配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- configure SimpleMappingExceptionResolver --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"java.lang.ArithmeticException"</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>error是出错页面</p>
<h2 id="十五、设置一个自定义拦截器"><a href="#十五、设置一个自定义拦截器" class="headerlink" title="十五、设置一个自定义拦截器"></a>十五、设置一个自定义拦截器</h2><p>1.创建一个MyInterceptor类，并实现HandlerInterceptor接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest arg0,</span></span></div><div class="line">            HttpServletResponse arg1, Object arg2, Exception arg3)</div><div class="line">            <span class="keyword">throws</span> Exception &#123;</div><div class="line">        System.out.println(<span class="string">"afterCompletion"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1,</span></span></div><div class="line">            Object arg2, ModelAndView arg3) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        System.out.println(<span class="string">"postHandle"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1,</span></span></div><div class="line">            Object arg2) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        System.out.println(<span class="string">"preHandle"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.在SpringMVC的配置文件中配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- interceptor setting --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/mvc/**"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"test.SpringMVC.Interceptor.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>        </div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3.拦截器执行顺序</p>
<p><img src="http://images0.cnblogs.com/blog2015/694841/201506/052112090047146.png" alt=""></p>
<h2 id="十六、表单的验证（使用Hibernate-validate）及国际化"><a href="#十六、表单的验证（使用Hibernate-validate）及国际化" class="headerlink" title="十六、表单的验证（使用Hibernate-validate）及国际化"></a>十六、表单的验证（使用Hibernate-validate）及国际化</h2><p>1.导入Hibernate-validate需要的jar包</p>
<p><img src="http://images0.cnblogs.com/blog2015/694841/201506/052116271296839.png" alt="">(未选中不用导入)</p>
<p><img src="http://images0.cnblogs.com/blog2015/694841/201506/052116407233893.png" alt=""></p>
<p>2.编写实体类User并加上验证注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> birth;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.birth = birth;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", birth="</span> + birth + <span class="string">"]"</span>;</div><div class="line">    &#125;    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@Past</span></div><div class="line">    <span class="meta">@DateTimeFormat</span>(pattern=<span class="string">"yyyy-MM-dd"</span>)</div><div class="line">    <span class="keyword">private</span> Date birth;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ps:@Past表示时间必须是一个过去值</p>
<p>3.在jsp中使用SpringMVC的form表单</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;form:form action="form/add" method="post" modelAttribute="user"&gt;</div><div class="line">        id:&lt;form:input path="id"/&gt;&lt;form:errors path="id"/&gt;&lt;br&gt;</div><div class="line">        name:&lt;form:input path="name"/&gt;&lt;form:errors path="name"/&gt;&lt;br&gt;</div><div class="line">        birth:&lt;form:input path="birth"/&gt;&lt;form:errors path="birth"/&gt;</div><div class="line">        &lt;input type="submit" value="submit"&gt;</div><div class="line">    &lt;/form:form&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">ps:path对应name</div><div class="line"></div><div class="line">4.Controller中代码</div><div class="line">```java</div><div class="line">@Controller</div><div class="line">@RequestMapping(&quot;/form&quot;)</div><div class="line">public class formController &#123;</div><div class="line">    @RequestMapping(value=&quot;/add&quot;,method=RequestMethod.POST)    </div><div class="line">    public String add(@Valid User u,BindingResult br)&#123;</div><div class="line">        if(br.getErrorCount()&gt;0)&#123;            </div><div class="line">            return &quot;addUser&quot;;</div><div class="line">        &#125;</div><div class="line">        return &quot;showUser&quot;;</div><div class="line">    &#125;</div><div class="line">    @RequestMapping(value=&quot;/add&quot;,method=RequestMethod.GET)</div><div class="line">    public String add(Map&lt;String,Object&gt; map)&#123;</div><div class="line">        map.put(&quot;user&quot;,new User());</div><div class="line">        return &quot;addUser&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ps:</p>
<p>　　1.因为jsp中使用了modelAttribute属性，所以必须在request域中有一个”user”.</p>
<p>　　2.@Valid 表示按照在实体上标记的注解验证参数</p>
<p>　　3.返回到原页面错误信息回回显，表单也会回显</p>
<p>5.错误信息自定义</p>
<p>在src目录下添加locale.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NotEmpty.user.name=name can&apos;t not be empty</div><div class="line">Past.user.birth=birth should be a past value</div><div class="line">DateTimeFormat.user.birth=the format of input is wrong</div><div class="line">typeMismatch.user.birth=the format of input is wrong</div><div class="line">typeMismatch.user.id=the format of input is wrong</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">在SpringMVC配置文件中配置</div><div class="line"></div><div class="line"></div><div class="line">```xml</div><div class="line">&lt;!-- configure the locale resource --&gt;</div><div class="line">    &lt;bean id=&quot;messageSource&quot; class=&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;&gt;</div><div class="line">        &lt;property name=&quot;basename&quot; value=&quot;locale&quot;&gt;&lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div></pre></td></tr></table></figure>
<p>6.国际化显示</p>
<p>在src下添加locale_zh_CN.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">username=账号</div><div class="line">password=密码</div></pre></td></tr></table></figure>
<p>locale.properties中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">username=user name</div><div class="line">password=password</div></pre></td></tr></table></figure>
<p>创建一个locale.jsp</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">fmt:message</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">fmt:message</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">fmt:message</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">fmt:message</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在SpringMVC中配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- make the jsp page can be visited --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/locale"</span> <span class="attr">view-name</span>=<span class="string">"locale"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>让locale.jsp在WEB-INF下也能直接访问</p>
<p>最后，访问locale.jsp，切换浏览器语言，能看到账号和密码的语言也切换了</p>
<h2 id="十七、压轴大戏–整合SpringIOC和SpringMVC"><a href="#十七、压轴大戏–整合SpringIOC和SpringMVC" class="headerlink" title="十七、压轴大戏–整合SpringIOC和SpringMVC"></a>十七、压轴大戏–整合SpringIOC和SpringMVC</h2><p>1.创建一个test.SpringMVC.integrate的包用来演示整合，并创建各类</p>
<p><img src="http://images0.cnblogs.com/blog2015/694841/201506/052306155821182.png" alt=""></p>
<p>2.User实体类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> birth;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.birth = birth;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", birth="</span> + birth + <span class="string">"]"</span>;</div><div class="line">    &#125;    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@Past</span></div><div class="line">    <span class="meta">@DateTimeFormat</span>(pattern=<span class="string">"yyyy-MM-dd"</span>)</div><div class="line">    <span class="keyword">private</span> Date birth;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.UserService类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"UserService Constructor...\n\n\n\n\n\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"save"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4.UserController</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/integrate"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserService userService;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">(@RequestBody @ModelAttribute User u)</span></span>&#123;</div><div class="line">        System.out.println(u);</div><div class="line">        userService.save();</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5.Spring配置文件</p>
<p>在src目录下创建SpringIOC的配置文件applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans  </span></div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd </div><div class="line">        http://www.springframework.org/schema/util </div><div class="line">        http://www.springframework.org/schema/util/spring-util-4.0.xsd</div><div class="line">        http://www.springframework.org/schema/context</div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd</div><div class="line">        "</div><div class="line">        <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></div><div class="line">        <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>    </div><div class="line">        &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"test.SpringMVC.integrate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> </span></div><div class="line">            <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> </span></div><div class="line">            <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.ControllerAdvice"</span>/&gt;        </div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在Web.xml中添加配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- configure the springIOC --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<p>6.在SpringMVC中进行一些配置，防止SpringMVC和SpringIOC对同一个对象的管理重合</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- scan the package and the sub package --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"test.SpringMVC.integrate"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> </span></div><div class="line">           <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</div><div class="line">       <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> </span></div><div class="line">           <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.ControllerAdvice"</span>/&gt;</div><div class="line">   <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="十八、SpringMVC详细运行流程图"><a href="#十八、SpringMVC详细运行流程图" class="headerlink" title="十八、SpringMVC详细运行流程图"></a><strong>十八、SpringMVC详细运行流程图</strong></h2><p><img src="http://images0.cnblogs.com/blog2015/694841/201506/052340331602684.png" alt=""></p>
<h2 id="十九、SpringMVC运行原理"><a href="#十九、SpringMVC运行原理" class="headerlink" title="十九、SpringMVC运行原理"></a>十九、SpringMVC运行原理</h2><p>1. 客户端请求提交到DispatcherServlet<br>2. 由DispatcherServlet控制器查询一个或多个HandlerMapping，找到处理请求的Controller<br>3. DispatcherServlet将请求提交到Controller<br>4. Controller调用业务逻辑处理后，返回ModelAndView<br>5. DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图<br>6. 视图负责将结果显示到客户端</p>
<h2 id="二十、SpringMVC与struts2的区别"><a href="#二十、SpringMVC与struts2的区别" class="headerlink" title="二十、SpringMVC与struts2的区别"></a>二十、SpringMVC与struts2的区别</h2><p>1、springmvc基于方法开发的，struts2基于类开发的。springmvc将url和controller里的方法映射。映射成功后springmvc生成一个Handler对象，对象中只包括了一个method。方法执行结束，形参数据销毁。springmvc的controller开发类似web service开发。<br>2、springmvc可以进行单例开发，并且建议使用单例开发，struts2通过类的成员变量接收参数，无法使用单例，只能使用多例。<br>3、经过实际测试，struts2速度慢，在于使用struts标签，如果使用struts建议使用jstl。</p>
]]></content>
      
        <categories>
            
            <category> 学习积累 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML-DOM 事件]]></title>
      <url>/2017/07/02/HTML-DOM%20%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h1 id="HTML-DOM-事件"><a href="#HTML-DOM-事件" class="headerlink" title="HTML DOM 事件"></a><strong><center><a href="http://wangzeqi.website">HTML DOM 事件</a></center></strong></h1><blockquote>
<p>HTML DOM 事件允许Javascript在HTML文档元素中注册不同事件处理程序。</p>
<p>事件通常与函数结合使用，函数不会在事件发生前被执行！ (如用户点击按钮)。</p>
</blockquote>
<p><strong>提示：</strong>在 W3C 2 级 DOM 事件中规范了事件模型。<br><a id="more"></a></p>
<hr>
<h2 id="HTML-DOM-事件-1"><a href="#HTML-DOM-事件-1" class="headerlink" title="HTML DOM 事件"></a>HTML DOM 事件</h2><p><strong>DOM：</strong>指明使用的 DOM 属性级别。</p>
<h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onclick.html" target="_blank" rel="external">onclick</a></td>
<td style="text-align:center">当用户点击某个对象时调用的事件句柄。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-oncontextmenu.html" target="_blank" rel="external">oncontextmenu</a></td>
<td style="text-align:center">在用户点击鼠标右键打开上下文菜单时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-ondblclick.html" target="_blank" rel="external">ondblclick</a></td>
<td style="text-align:center">当用户双击某个对象时调用的事件句柄。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onmousedown.html" target="_blank" rel="external">onmousedown</a></td>
<td style="text-align:center">鼠标按钮被按下。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onmouseenter.html" target="_blank" rel="external">onmouseenter</a></td>
<td style="text-align:center">当鼠标指针移动到元素上时触发。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onmouseleave.html" target="_blank" rel="external">onmouseleave</a></td>
<td style="text-align:center">当鼠标指针移出元素时触发</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onmousemove.html" target="_blank" rel="external">onmousemove</a></td>
<td style="text-align:center">鼠标被移动。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onmouseover.html" target="_blank" rel="external">onmouseover</a></td>
<td style="text-align:center">鼠标移到某元素之上。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onmouseout.html" target="_blank" rel="external">onmouseout</a></td>
<td style="text-align:center">鼠标从某元素移开。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onmouseup.html" target="_blank" rel="external">onmouseup</a></td>
<td style="text-align:center">鼠标按键被松开。</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
<h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onkeydown.html" target="_blank" rel="external">onkeydown</a></td>
<td style="text-align:center">某个键盘按键被按下。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onkeypress.html" target="_blank" rel="external">onkeypress</a></td>
<td style="text-align:center">某个键盘按键被按下并松开。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onkeyup.html" target="_blank" rel="external">onkeyup</a></td>
<td style="text-align:center">某个键盘按键被松开。</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
<h2 id="框架-对象（Frame-Object）事件"><a href="#框架-对象（Frame-Object）事件" class="headerlink" title="框架/对象（Frame/Object）事件"></a>框架/对象（Frame/Object）事件</h2><table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onabort.html" target="_blank" rel="external">onabort</a></td>
<td style="text-align:center">图像的加载被中断。 ( <object>)</object></td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onbeforeunload.html" target="_blank" rel="external">onbeforeunload</a></td>
<td style="text-align:center">该事件在即将离开页面（刷新或关闭）时触发</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onerror.html" target="_blank" rel="external">onerror</a></td>
<td style="text-align:center">在加载文档或图像时发生错误。 ( <object>, <body>和 <frameset>)</frameset></body></object></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onhashchange.html" target="_blank" rel="external">onhashchange</a></td>
<td style="text-align:center">该事件在当前 URL 的锚部分发生修改时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onload.html" target="_blank" rel="external">onload</a></td>
<td style="text-align:center">一张页面或一幅图像完成加载。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onpageshow.html" target="_blank" rel="external">onpageshow</a></td>
<td style="text-align:center">该事件在用户访问页面时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onpagehide.html" target="_blank" rel="external">onpagehide</a></td>
<td style="text-align:center">该事件在用户离开当前网页跳转到另外一个页面时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onresize.html" target="_blank" rel="external">onresize</a></td>
<td style="text-align:center">窗口或框架被重新调整大小。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onscroll.html" target="_blank" rel="external">onscroll</a></td>
<td style="text-align:center">当文档被滚动时发生的事件。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onunload.html" target="_blank" rel="external">onunload</a></td>
<td style="text-align:center">用户退出页面。 ( <body> 和 <frameset>)</frameset></body></td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
<h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onblur.html" target="_blank" rel="external">onblur</a></td>
<td style="text-align:center">元素失去焦点时触发</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onchange.html" target="_blank" rel="external">onchange</a></td>
<td style="text-align:center">该事件在表单元素的内容改变时触发( <input>, <keygen>, <select>, 和 </select><textarea>)</textarea></td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onfocus.html" target="_blank" rel="external">onfocus</a></td>
<td style="text-align:center">元素获取焦点时触发</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onfocusin.html" target="_blank" rel="external">onfocusin</a></td>
<td style="text-align:center">元素即将获取焦点时触发</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onfocusout.html" target="_blank" rel="external">onfocusout</a></td>
<td style="text-align:center">元素即将失去焦点时触发</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-oninput.html" target="_blank" rel="external">oninput</a></td>
<td style="text-align:center">元素获取用户输入时触发</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onreset.html" target="_blank" rel="external">onreset</a></td>
<td style="text-align:center">表单重置时触发</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onsearch.html" target="_blank" rel="external">onsearch</a></td>
<td style="text-align:center">用户向搜索域输入文本时触发 ( <input="search">)</input="search"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onselect.html" target="_blank" rel="external">onselect</a></td>
<td style="text-align:center">用户选取文本时触发 ( <input> 和 <textarea>)</textarea></td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onsubmit.html" target="_blank" rel="external">onsubmit</a></td>
<td style="text-align:center">表单提交时触发</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
<h2 id="剪贴板事件"><a href="#剪贴板事件" class="headerlink" title="剪贴板事件"></a>剪贴板事件</h2><table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-oncopy.html" target="_blank" rel="external">oncopy</a></td>
<td style="text-align:center">该事件在用户拷贝元素内容时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-oncut.html" target="_blank" rel="external">oncut</a></td>
<td style="text-align:center">该事件在用户剪切元素内容时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onpaste.html" target="_blank" rel="external">onpaste</a></td>
<td style="text-align:center">该事件在用户粘贴元素内容时触发</td>
</tr>
</tbody>
</table>
<h2 id="打印事件"><a href="#打印事件" class="headerlink" title="打印事件"></a>打印事件</h2><table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onafterprint.html" target="_blank" rel="external">onafterprint</a></td>
<td style="text-align:center">该事件在页面已经开始打印，或者打印窗口已经关闭时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onbeforeprint.html" target="_blank" rel="external">onbeforeprint</a></td>
<td style="text-align:center">该事件在页面即将开始打印时触发</td>
</tr>
</tbody>
</table>
<h2 id="拖动事件"><a href="#拖动事件" class="headerlink" title="拖动事件"></a>拖动事件</h2><table>
<thead>
<tr>
<th style="text-align:center">事件</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-ondrag.html" target="_blank" rel="external">ondrag</a></td>
<td style="text-align:center">该事件在元素正在拖动时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-ondragend.html" target="_blank" rel="external">ondragend</a></td>
<td style="text-align:center">该事件在用户完成元素的拖动时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-ondragenter.html" target="_blank" rel="external">ondragenter</a></td>
<td style="text-align:center">该事件在拖动的元素进入放置目标时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-ondragleave.html" target="_blank" rel="external">ondragleave</a></td>
<td style="text-align:center">该事件在拖动元素离开放置目标时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-ondragover.html" target="_blank" rel="external">ondragover</a></td>
<td style="text-align:center">该事件在拖动元素在放置目标上时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-ondragstart.html" target="_blank" rel="external">ondragstart</a></td>
<td style="text-align:center">该事件在用户开始拖动元素时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-ondrop.html" target="_blank" rel="external">ondrop</a></td>
<td style="text-align:center">该事件在拖动元素放置在目标区域时触发</td>
</tr>
</tbody>
</table>
<h2 id="多媒体（Media）事件"><a href="#多媒体（Media）事件" class="headerlink" title="多媒体（Media）事件"></a>多媒体（Media）事件</h2><table>
<thead>
<tr>
<th style="text-align:center">事件</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onabort-media.html" target="_blank" rel="external">onabort</a></td>
<td style="text-align:center">事件在视频/音频（audio/video）终止加载时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-oncanplay.html" target="_blank" rel="external">oncanplay</a></td>
<td style="text-align:center">事件在用户可以开始播放视频/音频（audio/video）时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-oncanplaythrough.html" target="_blank" rel="external">oncanplaythrough</a></td>
<td style="text-align:center">事件在视频/音频（audio/video）可以正常播放且无需停顿和缓冲时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-ondurationchange.html" target="_blank" rel="external">ondurationchange</a></td>
<td style="text-align:center">事件在视频/音频（audio/video）的时长发生变化时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">onemptied</td>
<td style="text-align:center">当期播放列表为空时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onended.html" target="_blank" rel="external">onended</a></td>
<td style="text-align:center">事件在视频/音频（audio/video）播放结束时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onerror-media.html" target="_blank" rel="external">onerror</a></td>
<td style="text-align:center">事件在视频/音频（audio/video）数据加载期间发生错误时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onloadeddata.html" target="_blank" rel="external">onloadeddata</a></td>
<td style="text-align:center">事件在浏览器加载视频/音频（audio/video）当前帧时触发触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onloadedmetadata.html" target="_blank" rel="external">onloadedmetadata</a></td>
<td style="text-align:center">事件在指定视频/音频（audio/video）的元数据加载后触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onloadstart.html" target="_blank" rel="external">onloadstart</a></td>
<td style="text-align:center">事件在浏览器开始寻找指定视频/音频（audio/video）触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onpause.html" target="_blank" rel="external">onpause</a></td>
<td style="text-align:center">事件在视频/音频（audio/video）暂停时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onplay.html" target="_blank" rel="external">onplay</a></td>
<td style="text-align:center">事件在视频/音频（audio/video）开始播放时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onplaying.html" target="_blank" rel="external">onplaying</a></td>
<td style="text-align:center">事件在视频/音频（audio/video）暂停或者在缓冲后准备重新开始播放时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onprogress.html" target="_blank" rel="external">onprogress</a></td>
<td style="text-align:center">事件在浏览器下载指定的视频/音频（audio/video）时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onratechange.html" target="_blank" rel="external">onratechange</a></td>
<td style="text-align:center">事件在视频/音频（audio/video）的播放速度发送改变时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onseeked.html" target="_blank" rel="external">onseeked</a></td>
<td style="text-align:center">事件在用户重新定位视频/音频（audio/video）的播放位置后触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onseeking.html" target="_blank" rel="external">onseeking</a></td>
<td style="text-align:center">事件在用户开始重新定位视频/音频（audio/video）时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onstalled.html" target="_blank" rel="external">onstalled</a></td>
<td style="text-align:center">事件在浏览器获取媒体数据，但媒体数据不可用时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onsuspend.html" target="_blank" rel="external">onsuspend</a></td>
<td style="text-align:center">事件在浏览器读取媒体数据中止时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-ontimeupdate.html" target="_blank" rel="external">ontimeupdate</a></td>
<td style="text-align:center">事件在当前的播放位置发送改变时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onvolumechange.html" target="_blank" rel="external">onvolumechange</a></td>
<td style="text-align:center">事件在音量发生改变时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onwaiting.html" target="_blank" rel="external">onwaiting</a></td>
<td style="text-align:center">事件在视频由于要播放下一帧而需要缓冲时触发。</td>
</tr>
</tbody>
</table>
<h2 id="动画事件"><a href="#动画事件" class="headerlink" title="动画事件"></a>动画事件</h2><table>
<thead>
<tr>
<th style="text-align:center">事件</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-animationend.html" target="_blank" rel="external">animationend</a></td>
<td style="text-align:center">该事件在 CSS 动画结束播放时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-animationiteration.html" target="_blank" rel="external">animationiteration</a></td>
<td style="text-align:center">该事件在 CSS 动画重复播放时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-animationstart.html" target="_blank" rel="external">animationstart</a></td>
<td style="text-align:center">该事件在 CSS 动画开始播放时触发</td>
</tr>
</tbody>
</table>
<h2 id="过渡事件"><a href="#过渡事件" class="headerlink" title="过渡事件"></a>过渡事件</h2><table>
<thead>
<tr>
<th style="text-align:center">事件</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-transitionend.html" target="_blank" rel="external">transitionend</a></td>
<td style="text-align:center">该事件在 CSS 完成过渡后触发。</td>
</tr>
</tbody>
</table>
<h2 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h2><table>
<thead>
<tr>
<th style="text-align:center">事件</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">onmessage</td>
<td style="text-align:center">该事件通过或者从对象(WebSocket, Web Worker, Event Source 或者子 frame 或父窗口)接收到消息时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">onmousewheel</td>
<td style="text-align:center"><span class="deprecated" style="border:0px; margin:0px; padding:0px; color:rgb(232,0,0); background-color:transparent">已废弃。</span>使用<a href="http://www.runoob.com/jsref/event-onwheel.html" target="_blank" rel="external">onwheel</a>事件替代</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-ononline.html" target="_blank" rel="external">ononline</a></td>
<td style="text-align:center">该事件在浏览器开始在线工作时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onoffline.html" target="_blank" rel="external">onoffline</a></td>
<td style="text-align:center">该事件在浏览器开始离线工作时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">onpopstate</td>
<td style="text-align:center">该事件在窗口的浏览历史（history 对象）发生改变时触发。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onshow.html" target="_blank" rel="external">onshow</a></td>
<td style="text-align:center">该事件当 <menu> 元素在上下文菜单显示时触发</menu></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">onstorage</td>
<td style="text-align:center">该事件在 Web Storage(HTML 5 Web 存储)更新时触发</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-ontoggle.html" target="_blank" rel="external">ontoggle</a></td>
<td style="text-align:center">该事件在用户打开或关闭 <details> 元素时触发</details></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-onwheel.html" target="_blank" rel="external">onwheel</a></td>
<td style="text-align:center">该事件在鼠标滚轮在元素上下滚动时触发</td>
</tr>
</tbody>
</table>
<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><table>
<thead>
<tr>
<th style="text-align:center">静态变量</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CAPTURING-PHASE</td>
<td style="text-align:center">当前事件阶段为捕获阶段(1)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">AT-TARGET</td>
<td style="text-align:center">当前事件是目标阶段,在评估目标事件(1)</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">BUBBLING-PHASE</td>
<td style="text-align:center">当前的事件为冒泡阶段 (3)</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-bubbles.html" target="_blank" rel="external">bubbles</a></td>
<td style="text-align:center">返回布尔值，指示事件是否是起泡事件类型。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-cancelable.html" target="_blank" rel="external">cancelable</a></td>
<td style="text-align:center">返回布尔值，指示事件是否可拥可取消的默认动作。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-currenttarget.html" target="_blank" rel="external">currentTarget</a></td>
<td style="text-align:center">返回其事件监听器触发该事件的元素。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">eventPhase</td>
<td style="text-align:center">返回事件传播的当前阶段。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-target.html" target="_blank" rel="external">target</a></td>
<td style="text-align:center">返回触发此事件的元素（事件的目标节点）。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-timestamp.html" target="_blank" rel="external">timeStamp</a></td>
<td style="text-align:center">返回事件生成的日期和时间。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-type.html" target="_blank" rel="external">type</a></td>
<td style="text-align:center">返回当前 Event 对象表示的事件的名称。</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">initEvent()</td>
<td style="text-align:center">初始化新创建的 Event 对象的属性。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">preventDefault()</td>
<td style="text-align:center">通知浏览器不要执行与事件关联的默认动作。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">stopPropagation()</td>
<td style="text-align:center">不再派发事件。</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
<h2 id="目标事件对象"><a href="#目标事件对象" class="headerlink" title="目标事件对象"></a>目标事件对象</h2><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">addEventListener()</td>
<td style="text-align:center">允许在目标事件中注册监听事件(IE8 = attachEvent())</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">dispatchEvent()</td>
<td style="text-align:center">允许发送事件到监听器上 (IE8 = fireEvent())</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">removeEventListener()</td>
<td style="text-align:center">运行一次注册在事件目标上的监听事件(IE8 = detachEvent())</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
<h2 id="事件监听对象"><a href="#事件监听对象" class="headerlink" title="事件监听对象"></a>事件监听对象</h2><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">handleEvent()</td>
<td style="text-align:center">把任意对象注册为事件处理程序</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
<h2 id="文档事件对象"><a href="#文档事件对象" class="headerlink" title="文档事件对象"></a>文档事件对象</h2><h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">createEvent()</td>
<td style="text-align:center"></td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
<h2 id="鼠标-键盘事件对象"><a href="#鼠标-键盘事件对象" class="headerlink" title="鼠标/键盘事件对象"></a>鼠标/键盘事件对象</h2><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">DOM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-altkey.html" target="_blank" rel="external">altKey</a></td>
<td style="text-align:center">返回当事件被触发时，”ALT” 是否被按下。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-button.html" target="_blank" rel="external">button</a></td>
<td style="text-align:center">返回当事件被触发时，哪个鼠标按钮被点击。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-clientx.html" target="_blank" rel="external">clientX</a></td>
<td style="text-align:center">返回当事件被触发时，鼠标指针的水平坐标。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-clienty.html" target="_blank" rel="external">clientY</a></td>
<td style="text-align:center">返回当事件被触发时，鼠标指针的垂直坐标。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-ctrlkey.html" target="_blank" rel="external">ctrlKey</a></td>
<td style="text-align:center">返回当事件被触发时，”CTRL” 键是否被按下。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-key-location.html" target="_blank" rel="external">Location</a></td>
<td style="text-align:center">返回按键在设备上的位置</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-key-charcode.html" target="_blank" rel="external">charCode</a></td>
<td style="text-align:center">返回onkeypress事件触发键值的字母代码。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-key-key.html" target="_blank" rel="external">key</a></td>
<td style="text-align:center">在按下按键时返回按键的标识符。</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-key-keycode.html" target="_blank" rel="external">keyCode</a></td>
<td style="text-align:center">返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-key-which.html" target="_blank" rel="external">which</a></td>
<td style="text-align:center">返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-metakey.html" target="_blank" rel="external">metaKey</a></td>
<td style="text-align:center">返回当事件被触发时，”meta” 键是否被按下。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-relatedtarget.html" target="_blank" rel="external">relatedTarget</a></td>
<td style="text-align:center">返回与事件的目标节点相关的节点。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-screenx.html" target="_blank" rel="external">screenX</a></td>
<td style="text-align:center">返回当某个事件被触发时，鼠标指针的水平坐标。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-screeny.html" target="_blank" rel="external">screenY</a></td>
<td style="text-align:center">返回当某个事件被触发时，鼠标指针的垂直坐标。</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.runoob.com/jsref/event-shiftkey.html" target="_blank" rel="external">shiftKey</a></td>
<td style="text-align:center">返回当事件被触发时，”SHIFT” 键是否被按下。</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
<h3 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h3><table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">W3C</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">initMouseEvent()</td>
<td style="text-align:center">初始化鼠标事件对象的值</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">initKeyboardEvent()</td>
<td style="text-align:center">初始化键盘事件对象的值</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 学习整理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML </tag>
            
            <tag> DOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[POI导出Excel工具]]></title>
      <url>/2017/07/02/POI%E5%AF%BC%E5%87%BAExcel%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h1 id="POI导出Excel工具"><a href="#POI导出Excel工具" class="headerlink" title="POI导出Excel工具"></a><center><strong>POI导出Excel工具</strong></center></h1><h2 id="Maven依赖（此处为本人所用的）"><a href="#Maven依赖（此处为本人所用的）" class="headerlink" title="Maven依赖（此处为本人所用的）"></a><strong>Maven依赖（此处为本人所用的）</strong></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="ExcelExportUtil导出工具（直接复制可用）"><a href="#ExcelExportUtil导出工具（直接复制可用）" class="headerlink" title="ExcelExportUtil导出工具（直接复制可用）"></a><strong>ExcelExportUtil导出工具（直接复制可用）</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** * Excel表格导出工具类 * <span class="doctag">@author</span> ypl * */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelExportUtil</span> </span>&#123;  </div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(ExcelExportUtil.class);</div><div class="line"></div><div class="line">    <span class="comment">/** * 获取封装好数据的 HSSFWorkbook * <span class="doctag">@param</span> list 内容数据(map中key对应headRow的每一个头,value为对应的值) * <span class="doctag">@param</span> headRowList 头行标题的集合 * <span class="doctag">@param</span> tableName 表标题 * <span class="doctag">@param</span> widthMap 各列列宽(map中 key：指定列（从0开始）,value:宽度(一般3-4个字符：16,时间类型+分秒：25)) * <span class="doctag">@param</span> response * <span class="doctag">@throws</span> IOException */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateExcel</span><span class="params">(List&lt;Map&lt;String, String&gt;&gt; list, String tableName, Map&lt;Integer,Integer&gt; widthMap, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (list == <span class="keyword">null</span> || list.isEmpty()) &#123;</div><div class="line">        logger.info(<span class="string">"要导出的数据列为空"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (StringUtils.isBlank(tableName)) &#123;</div><div class="line">        logger.info(<span class="string">"要导出的表名为空"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">     <span class="comment">//获取头行标题集合</span></div><div class="line">        List&lt;String&gt; headRowList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">14</span>);</div><div class="line">        Set&lt;String&gt; keySet = list.get(<span class="number">0</span>).keySet();</div><div class="line">         <span class="keyword">for</span> (String key : keySet) &#123;</div><div class="line">             headRowList.add(key);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (headRowList == <span class="keyword">null</span> || headRowList.isEmpty()) &#123;</div><div class="line">        logger.info(<span class="string">"要导出的数据表头行为空"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    logger.info(<span class="string">"getexcel start"</span>);</div><div class="line"></div><div class="line">    HSSFWorkbook book = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">    OutputStream outputStream = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span>&#123;  </div><div class="line">            HSSFSheet sheet = book.createSheet(tableName); </div><div class="line"></div><div class="line">            <span class="comment">//设置列宽</span></div><div class="line">            <span class="keyword">if</span>(widthMap!=<span class="keyword">null</span> &amp;&amp; widthMap.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">            setByWidthMap(sheet, widthMap);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">            setDefaultSheetWidth(sheet,headRowList.size());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">            <span class="comment">//样式一设置</span></div><div class="line">            HSSFCellStyle style = book.createCellStyle();  </div><div class="line">            setStyle(style);</div><div class="line"></div><div class="line">            <span class="comment">// 生成一个字体 ,设置字体 </span></div><div class="line">            HSSFFont font = book.createFont();  </div><div class="line">            setFont(style, font, <span class="number">22</span>, <span class="string">"宋体"</span>);  </div><div class="line"></div><div class="line">            <span class="comment">//样式内容设置 </span></div><div class="line">            HSSFCellStyle bodyStyle = book.createCellStyle();  </div><div class="line">            setStyle(bodyStyle);</div><div class="line">            bodyStyle.setWrapText(<span class="keyword">true</span>);<span class="comment">//自动换行 </span></div><div class="line"></div><div class="line">            <span class="comment">//样式头设置</span></div><div class="line">            HSSFCellStyle headstyle = book.createCellStyle();</div><div class="line">            setStyle(headstyle);</div><div class="line"></div><div class="line">            <span class="comment">// 生成首列头 字体 ,并设置字体 </span></div><div class="line">            HSSFFont headfont = book.createFont(); </div><div class="line">            setFont(headstyle, headfont, <span class="number">11</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">            outputStream = response.getOutputStream();</div><div class="line">        <span class="comment">// response.setContentType("application/dowload");</span></div><div class="line">        response.reset();</div><div class="line">        response.setContentType(<span class="string">"application/msexcel"</span>);</div><div class="line">        response.setHeader(<span class="string">"Content-disposition"</span>,<span class="string">"attachment;filename=\""</span> + <span class="keyword">new</span> String(</div><div class="line">                (java.net.URLEncoder.encode(tableName + CommonUtils.getNowDateStringOf8() + (<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>) + <span class="string">".xls"</span>, <span class="string">"UTF-8"</span>)).getBytes(<span class="string">"UTF-8"</span>),<span class="string">"GB2312"</span>) + <span class="string">"\""</span>);</div><div class="line"></div><div class="line">            <span class="comment">//填充表头标题 </span></div><div class="line">            <span class="keyword">int</span> colSize = list.get(<span class="number">0</span>).entrySet().size();  </div><div class="line">            <span class="comment">//合并单元格供标题使用(表名) </span></div><div class="line">            sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, colSize-<span class="number">1</span>));  </div><div class="line">            HSSFRow firstRow = sheet.createRow(<span class="number">0</span>);<span class="comment">//第几行（从0开始） </span></div><div class="line">            HSSFCell firstCell = firstRow.createCell(<span class="number">0</span>);  </div><div class="line">            firstCell.setCellValue(tableName);  </div><div class="line">            firstCell.setCellStyle(style);  </div><div class="line"></div><div class="line">            <span class="comment">//填充表头header </span></div><div class="line">            HSSFRow headRow = sheet.createRow(<span class="number">1</span>);</div><div class="line">            headRow.setHeight((<span class="keyword">short</span>) (<span class="number">20</span> * <span class="number">20</span>));  </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headRowList.size(); i++) &#123;</div><div class="line">            HSSFCell cell = headRow.createCell(i);</div><div class="line">            cell.setCellValue(headRowList.get(i));  </div><div class="line">                cell.setCellStyle(headstyle);</div><div class="line">            &#125;             </div><div class="line"></div><div class="line">            <span class="comment">//填充表格内容 </span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;  </div><div class="line">                HSSFRow row2 = sheet.createRow(i+<span class="number">2</span>);<span class="comment">//index：第几行 </span></div><div class="line">                row2.setHeight((<span class="keyword">short</span>) (<span class="number">25</span> * <span class="number">20</span>));  </div><div class="line">                Map&lt;String, String&gt; map = list.get(i);  </div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;headRowList.size(); j++) &#123;  </div><div class="line">                    String value = map.get(headRowList.get(j));  </div><div class="line">                    HSSFCell cell = row2.createCell(j);<span class="comment">//第几列：从0开始 </span></div><div class="line">                    cell.setCellValue(value);  </div><div class="line">                    cell.setCellStyle(bodyStyle);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line"></div><div class="line">            <span class="comment">// 写进文档</span></div><div class="line">            book.write(outputStream);</div><div class="line">        outputStream.flush();</div><div class="line">        outputStream.close();</div><div class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;  </div><div class="line">            logger.error(<span class="string">"jftj/genexcel Exception"</span>, e);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</div><div class="line">        outputStream.close();</div><div class="line">        &#125;</div><div class="line">        logger.info(<span class="string">"getexcel end"</span>);</div><div class="line">    &#125;  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** * 字体设置 * <span class="doctag">@param</span> style * <span class="doctag">@param</span> font */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFont</span><span class="params">(HSSFCellStyle style, HSSFFont font, <span class="keyword">int</span> size, String fontName)</span> </span>&#123;</div><div class="line">    <span class="comment">//font.setColor(HSSFColor.VIOLET.index); </span></div><div class="line">    font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);  </div><div class="line">    font.setFontHeightInPoints((<span class="keyword">short</span>) size); <span class="comment">//设置字体大小 </span></div><div class="line">    <span class="keyword">if</span>(StringUtils.isNotBlank(fontName))&#123;</div><div class="line">        font.setFontName(fontName);    </div><div class="line">    &#125;</div><div class="line">    style.setFont(font);<span class="comment">// 把字体应用到当前的样式</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** * 根据widthMap设置相应的列宽 * <span class="doctag">@param</span> sheet * <span class="doctag">@param</span> widthMap */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setByWidthMap</span><span class="params">(HSSFSheet sheet, Map&lt;Integer, Integer&gt; widthMap)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Entry&lt;Integer, Integer&gt; entry : widthMap.entrySet()) &#123;</div><div class="line">        sheet.setColumnWidth(entry.getKey(), entry.getValue() * <span class="number">256</span>); </div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** * 默认宽度设置 * 3-4个中文字符 16 * 时间类型 ,带时分秒的 25 * <span class="doctag">@param</span> sheet * <span class="doctag">@param</span> len */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDefaultSheetWidth</span><span class="params">(HSSFSheet sheet, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        sheet.setColumnWidth(i, <span class="number">25</span> * <span class="number">256</span>);</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** * 私密直播单元格宽度设置 * <span class="doctag">@param</span> sheet */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setStyle</span><span class="params">(HSSFCellStyle style)</span> </span>&#123;</div><div class="line">    style.setFillForegroundColor(HSSFColor.WHITE.index);  <span class="comment">//设置背景颜色</span></div><div class="line">    style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);  </div><div class="line">    style.setBorderBottom(HSSFCellStyle.BORDER_THIN);  </div><div class="line">    style.setBorderLeft(HSSFCellStyle.BORDER_THIN); </div><div class="line">    style.setBorderRight(HSSFCellStyle.BORDER_THIN);  </div><div class="line">    style.setBorderTop(HSSFCellStyle.BORDER_THIN);  </div><div class="line">    style.setAlignment(HSSFCellStyle.ALIGN_CENTER); <span class="comment">//水平居中 </span></div><div class="line">    style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);<span class="comment">//垂直居中</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="导出Controller"><a href="#导出Controller" class="headerlink" title="导出Controller"></a><strong>导出Controller</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** * 导出检验 * * <span class="doctag">@param</span> request * <span class="doctag">@param</span> response * <span class="doctag">@param</span> customer * <span class="doctag">@throws</span> Exception */</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/checkExport"</span>, method = RequestMethod.GET)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkExport</span><span class="params">(String searchText, String beginTime, String endTime, Integer orderStatus, String objectId, Integer orderSource, Integer productId, Integer payPlatForm,</span></span></div><div class="line">                    Integer payType,HttpServletRequest request, HttpServletResponse response) <span class="keyword">throws</span> Exception &#123;</div><div class="line"><span class="keyword">int</span> count = payServiceRemoting.countXsbOrderMng(searchText, beginTime, endTime, orderStatus, objectId, orderSource, productId, payPlatForm, payType);</div><div class="line"><span class="keyword">if</span> (count &gt;<span class="number">10000</span>) &#123;</div><div class="line">    putFailedResult(response, <span class="string">"导出数据超过10000条"</span>);<span class="comment">//此处是将结果转换成json字符串，并返回成功或者失败给页面js进行判断 是否进行导出</span></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</div><div class="line">    putFailedResult(response, <span class="string">"导出数据超过为空"</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">putSuccessResult(response, <span class="string">"操作成功"</span>);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** * 导出 * <span class="doctag">@param</span> model * <span class="doctag">@param</span> applyLiveStatus * <span class="doctag">@param</span> searchkey * <span class="doctag">@param</span> pageNo * <span class="doctag">@param</span> pageSize * <span class="doctag">@param</span> request * <span class="doctag">@param</span> response * <span class="doctag">@return</span> * <span class="doctag">@throws</span> IOException */</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"exportExcel"</span>,method = RequestMethod.GET)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">exportExcel</span><span class="params">(String searchText, String beginTime, String endTime, Integer orderStatus, String objectId, Integer orderSource, Integer productId, Integer payPlatForm,</span></span></div><div class="line">                 Integer payType,HttpServletRequest request, HttpServletResponse response) <span class="keyword">throws</span> IOException &#123;</div><div class="line"></div><div class="line">    <span class="comment">//1.获取数据 </span></div><div class="line">    List&lt;XsbOrderVo&gt; orderVos = payServiceRemoting.listXsbOrderMng(searchText, beginTime, endTime, orderStatus, objectId, orderSource, productId, payPlatForm, payType,<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="comment">//2.对数据内容封装成map key为excel表格的每列标题，value为对应数据</span></div><div class="line">    List&lt;Map&lt;String, String&gt;&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (XsbOrderVo xsbOrderVo : orderVos) &#123;</div><div class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line">        map.put(<span class="string">"订单编号"</span>, xsbOrderVo.getOrderId());</div><div class="line">        map.put(<span class="string">"服务类型"</span>, xsbOrderVo.getOrderSource());</div><div class="line">        map.put(<span class="string">"项目名称"</span>, xsbOrderVo.getObjectName());</div><div class="line">        map.put(<span class="string">"姓名"</span>, xsbOrderVo.getCustomerName());</div><div class="line">        map.put(<span class="string">"手机"</span>, xsbOrderVo.getCustomerPhone());</div><div class="line">        map.put(<span class="string">"支付方式"</span>, xsbOrderVo.getPayType());</div><div class="line">        map.put(<span class="string">"付款金额(/元)"</span>, xsbOrderVo.getOrderAmount());</div><div class="line">        map.put(<span class="string">"支付状态"</span>, xsbOrderVo.getOrderStatus());</div><div class="line">        map.put(<span class="string">"订单来源"</span>, xsbOrderVo.getPayPlatForm());</div><div class="line">        map.put(<span class="string">"下单时间"</span>, xsbOrderVo.getCreateTime());</div><div class="line">        data.add(map);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//3.excel表格每列宽度设置,excelColumnWidthMap:key为哪列(从0开始 0对应第一列),value为宽度(一般3-4个中文字符可填写16,时间类型到分秒的 25左右)</span></div><div class="line">    <span class="comment">//可以不设置excelColumnWidthMap,填写null即可 默认为25</span></div><div class="line">    Map&lt;Integer,Integer&gt; widthMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    widthMap.put(<span class="number">0</span>, <span class="number">20</span>);</div><div class="line">    widthMap.put(<span class="number">1</span>, <span class="number">25</span>);</div><div class="line">    widthMap.put(<span class="number">2</span>, <span class="number">25</span>);</div><div class="line">    widthMap.put(<span class="number">3</span>, <span class="number">20</span>);</div><div class="line">    widthMap.put(<span class="number">4</span>, <span class="number">20</span>);</div><div class="line">    widthMap.put(<span class="number">5</span>, <span class="number">25</span>);</div><div class="line">    widthMap.put(<span class="number">6</span>, <span class="number">25</span>);</div><div class="line">    widthMap.put(<span class="number">7</span>, <span class="number">20</span>);</div><div class="line">    widthMap.put(<span class="number">8</span>, <span class="number">20</span>);</div><div class="line">    widthMap.put(<span class="number">9</span>, <span class="number">22</span>);</div><div class="line"></div><div class="line">    <span class="comment">//编辑excel </span></div><div class="line">    ExcelExportUtil.generateExcel(data, <span class="string">"xxxx"</span>,widthMap response);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a><strong>页面</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//页面</div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"List.do"</span> <span class="attr">id</span>=<span class="string">"searchForm"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;<span class="name">form</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-success mb5"</span> <span class="attr">style</span>=<span class="string">"float:right;"</span> <span class="attr">id</span> = <span class="string">"exportExcel"</span>&gt;</span>导出项目列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line">//导出excel</div><div class="line">$('#exportExcel').on('click',function()&#123;</div><div class="line">    var isCheck=false;</div><div class="line">    var formData = $('#searchForm').serialize();</div><div class="line">    $.ajax(&#123;</div><div class="line">        type: "GET",</div><div class="line">        url: "/checkExport",</div><div class="line">        async: false,</div><div class="line">        dataType:"json",</div><div class="line">        data: formData,</div><div class="line">        success: function(data) &#123;</div><div class="line">            if (data.status == '1') &#123;</div><div class="line">                isCheck=true;</div><div class="line">            &#125; else &#123;</div><div class="line">                alert(data.msg);</div><div class="line">            &#125;;</div><div class="line">        &#125;,</div><div class="line">        error : function() &#123;</div><div class="line">            alert("下载失败");</div><div class="line">        &#125; </div><div class="line">    &#125;)</div><div class="line">    if(isCheck)&#123;</div><div class="line">        parent.location.href="/exportExcel?"+formData;</div><div class="line">    &#125;</div><div class="line"> &#125;)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习整理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> POI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[canvas画布]]></title>
      <url>/2017/07/02/canvas%E7%94%BB%E5%B8%83/</url>
      <content type="html"><![CDATA[<h1 id="canvas画布"><a href="#canvas画布" class="headerlink" title="canvas画布"></a><center><a href="http://wangzeqi.website"><strong>canvas画布</strong></a></center></h1><h1 id="一、canvas简介"><a href="#一、canvas简介" class="headerlink" title="一、canvas简介"></a>一、canvas简介</h1><p>​ <code>&lt;canvas&gt;</code> 是 <code>HTML5</code> 新增的，一个可以使用脚本(通常为<code>JavaScript</code>)在其中绘制图像的 <code>HTML</code> 元素。它可以用来制作照片集或者制作简单(也不是那么简单)的动画，甚至可以进行实时视频处理和渲染。</p>
<p>​ 它最初由苹果内部使用自己<code>MacOS X WebKit</code>推出，供应用程序使用像仪表盘的构件和 <code>Safari</code> 浏览器使用。 后来，有人通过<code>Gecko</code>内核的浏览器 (尤其是<code>Mozilla</code>和<code>Firefox</code>)，<code>Opera</code>和<code>Chrome</code>和超文本网络应用技术工作组建议为下一代的网络技术使用该元素。</p>
<p>​ <code>Canvas</code>是由<code>HTML</code>代码配合高度和宽度属性而定义出的可绘制区域。<code>JavaScript</code>代码可以访问该区域，类似于其他通用的二维<code>API</code>，通过一套完整的绘图函数来动态生成图形。</p>
<p>​ Mozilla 程序从 Gecko 1.8 (Firefox 1.5)开始支持 <code>&lt;canvas&gt;</code>, Internet Explorer 从IE9开始<code>&lt;canvas&gt;</code> 。Chrome和Opera 9+ 也支持 <code>&lt;canvas&gt;</code>。<br><a id="more"></a></p>
<h1 id="二、Canvas基本使用"><a href="#二、Canvas基本使用" class="headerlink" title="二、Canvas基本使用"></a>二、Canvas基本使用</h1><h2 id="2-1-lt-canvas-gt-元素"><a href="#2-1-lt-canvas-gt-元素" class="headerlink" title="2.1 &lt;canvas&gt;元素"></a>2.1 <code>&lt;canvas&gt;</code>元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"tutorial"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​ <code>&lt;canvas&gt;</code>看起来和<code>&lt;img&gt;</code>标签一样，只是 <code>&lt;canvas&gt;</code> 只有两个可选的属性 <code>width、heigth</code> 属性，而没有 <code>src、alt</code> 属性。</p>
<p>​ 如果不给<code>&lt;canvas&gt;</code>设置<code>widht、height</code>属性时，则默认 <code>width</code>为300、<code>height</code>为150,单位都是<code>px</code>。也可以使用<code>css</code>属性来设置宽高，但是如宽高属性和初始比例不一致，他会出现扭曲。所以，建议永远不要使用<code>css</code>属性来设置<code>&lt;canvas&gt;</code>的宽高。</p>
<h3 id="替换内容"><a href="#替换内容" class="headerlink" title="替换内容"></a>替换内容</h3><p>​ 由于某些较老的浏览器（尤其是IE9之前的IE浏览器）或者浏览器不支持HTML元素<code>&lt;canvas&gt;</code>，在这些浏览器上你应该总是能展示替代内容。</p>
<p>​ 支持<code>&lt;canvas&gt;</code>的浏览器会只渲染<code>&lt;canvas&gt;</code>标签，而忽略其中的替代内容。不支持 <code>&lt;canvas&gt;</code> 的浏览器则 会直接渲染替代内容。</p>
<blockquote>
<p>用文本替换：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;canvas&gt;</div><div class="line">    你的浏览器不支持canvas,请升级你的浏览器</div><div class="line">&lt;/canvas&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>用 <code>&lt;img&gt;</code> 替换：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;canvas&gt;</div><div class="line">    &lt;img src=&quot;./美女.jpg&quot; alt=&quot;&quot;&gt; </div><div class="line">&lt;/canvas&gt;</div></pre></td></tr></table></figure>
<h3 id="结束标签-lt-canvas-gt-不可省"><a href="#结束标签-lt-canvas-gt-不可省" class="headerlink" title="结束标签&lt;/canvas&gt;不可省"></a>结束标签<code>&lt;/canvas&gt;</code>不可省</h3><p>与 <code>&lt;img&gt;</code>元素不同，<code>&lt;canvas&gt;</code>元素<strong>需要</strong>结束标签(<code>&lt;/canvas&gt;</code>)。如果结束标签不存在，则文档的其余部分会被认为是替代内容，将不会显示出来。</p>
<h2 id="2-2-渲染上下文-Thre-Rending-Context"><a href="#2-2-渲染上下文-Thre-Rending-Context" class="headerlink" title="2.2 渲染上下文(Thre Rending Context)"></a>2.2 渲染上下文(Thre Rending Context)</h2><p>​ <code>&lt;canvas&gt;</code>会创建一个固定大小的画布，会公开一个或多个 <strong>渲染上下文</strong>(画笔)，使用 <strong>渲染上下文</strong>来绘制和处理要展示的内容。</p>
<p>​ 我们重点研究 2D渲染上下文。 其他的上下文我们暂不研究，比如， WebGL使用了基于OpenGL ES的3D上下文 (“experimental-webgl”) 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line"><span class="comment">//获得 2d 上下文对象</span></div><div class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div></pre></td></tr></table></figure>
<h2 id="2-3-检测支持性"><a href="#2-3-检测支持性" class="headerlink" title="2.3 检测支持性"></a>2.3 检测支持性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (canvas.getContext)&#123;</div><div class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line">  <span class="comment">// drawing code here</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// canvas-unsupported code here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-4-代码模板"><a href="#2-4-代码模板" class="headerlink" title="2.4 代码模板"></a>2.4 代码模板</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Canvas tutorial<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"> canvas &#123; border: 1px solid black; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"tutorial"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"> <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123; <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>); <span class="keyword">if</span>(!canvas.getContext) <span class="keyword">return</span>; <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>); <span class="comment">//开始代码 &#125; draw(); </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="2-5-一个简单的例子"><a href="#2-5-一个简单的例子" class="headerlink" title="2.5 一个简单的例子"></a>2.5 一个简单的例子</h2><blockquote>
<p>绘制两个长方形。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Canvas tutorial<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"> canvas &#123; border: 1px solid black; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"tutorial"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"> <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123; <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>); <span class="keyword">if</span>(!canvas.getContext) <span class="keyword">return</span>; <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>); ctx.fillStyle = <span class="string">"rgb(200,0,0)"</span>; <span class="comment">//绘制矩形 ctx.fillRect (10, 10, 55, 50); ctx.fillStyle = "rgba(0, 0, 200, 0.5)"; ctx.fillRect (30, 30, 55, 50); &#125; draw(); </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="三、绘制形状"><a href="#三、绘制形状" class="headerlink" title="三、绘制形状"></a>三、绘制形状</h1><h2 id="3-1-栅格-grid-和坐标空间"><a href="#3-1-栅格-grid-和坐标空间" class="headerlink" title="3.1 栅格(grid)和坐标空间"></a>3.1 栅格<code>(grid)</code>和坐标空间</h2><p>​ 如下图所示，<code>canvas</code>元素默认被网格所覆盖。通常来说网格中的一个单元相当于<code>canvas</code>元素中的一像素。栅格的起点为左上角（坐标为（0,0））。所有元素的位置都相对于原点来定位。所以图中蓝色方形左上角的坐标为距离左边（X轴）x像素，距离上边（Y轴）y像素（坐标为（x,y））。</p>
<p>​ 后面我们会涉及到坐标原点的平移、网格的旋转以及缩放等。</p>
<p><img src="https://mdn.mozillademos.org/files/224/Canvas_default_grid.png" alt=""></p>
<h2 id="3-2-绘制矩形"><a href="#3-2-绘制矩形" class="headerlink" title="3.2 绘制矩形"></a>3.2 绘制矩形</h2><p>​ <code>&lt;canvas&gt;</code> 只支持一种原生的 图形绘制：矩形。所有其他图形都至少需要生成一种路径(<code>path</code>)。不过，我们拥有众多路径生成的方法让复杂图形的绘制成为了可能。</p>
<blockquote>
<p><code>canvas</code>t 提供了三种方法绘制矩形：</p>
</blockquote>
<ol>
<li><p><code>fillRect(x, y, width, height)</code></p>
<p>绘制一个填充的矩形</p>
</li>
<li><p><code>strockRect(x, y, width, height)</code></p>
<p>绘制一个矩形的边框</p>
</li>
<li><p><code>clearRect(x, y, widh, height)</code></p>
<p>清除指定的矩形区域，然后这块区域会变的完全透明。</p>
</li>
</ol>
<p>说明：</p>
<p>​ 这3个方法具有相同的参数。</p>
<p>​ <code>x, y</code>：指的是矩形的左上角的坐标。(相对于<code>canvas</code>的坐标原点)</p>
<p>​ <code>width, height</code>：指的是绘制的矩形的宽和高。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line">    <span class="keyword">if</span>(!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">    ctx.fillRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">50</span>);  <span class="comment">//绘制矩形,填充的默认颜色为黑色</span></div><div class="line">    ctx.strokeRect(<span class="number">10</span>, <span class="number">70</span>, <span class="number">100</span>, <span class="number">50</span>);  <span class="comment">//绘制矩形边框</span></div><div class="line"></div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/57498980.jpg" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.clearRect(<span class="number">15</span>, <span class="number">15</span>, <span class="number">50</span>, <span class="number">25</span>);</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/92358331.jpg" alt=""></p>
<h1 id="四、绘制路径-path"><a href="#四、绘制路径-path" class="headerlink" title="四、绘制路径(path)"></a>四、绘制路径(<code>path</code>)</h1><p>​ 图形的基本元素是路径。</p>
<p>​ 路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。</p>
<p>​ 一个路径，甚至一个子路径，都是闭合的。</p>
<blockquote>
<p>使用路径绘制图形需要一些额外的步骤：</p>
</blockquote>
<ol>
<li>创建路径起始点</li>
<li>调用绘制方法去绘制出路径</li>
<li>把路径封闭</li>
<li>一旦路径生成，通过描边或填充路径区域来渲染图形。</li>
</ol>
<blockquote>
<p>下面是需要用到的方法：</p>
</blockquote>
<ol>
<li><p><code>beginPath()</code></p>
<p>新建一条路径，路径一旦创建成功，图形绘制命令被指向到路径上生成路径</p>
</li>
<li><p><code>moveTo(x, y)</code></p>
<p>把画笔移动到指定的坐标<code>(x, y)</code>。相当于设置路径的起始点坐标。</p>
</li>
<li><p><code>closePath()</code></p>
<p>闭合路径之后，图形绘制命令又重新指向到上下文中</p>
</li>
<li><p><code>stroke()</code></p>
<p>通过线条来绘制图形轮廓</p>
</li>
<li><p><code>fill()</code></p>
<p>通过填充路径的内容区域生成实心的图形</p>
</li>
</ol>
<h2 id="4-1-绘制线段"><a href="#4-1-绘制线段" class="headerlink" title="4.1 绘制线段"></a>4.1 绘制线段</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">    ctx.beginPath(); <span class="comment">//新建一条path</span></div><div class="line">    ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>); <span class="comment">//把画笔移动到指定的坐标</span></div><div class="line">    ctx.lineTo(<span class="number">200</span>, <span class="number">50</span>);  <span class="comment">//绘制一条从当前位置到指定坐标(200, 50)的直线.</span></div><div class="line">    <span class="comment">//闭合路径。会拉一条从当前点到path起始点的直线。如果当前点与起始点重合，则什么都不做</span></div><div class="line">    ctx.closePath();</div><div class="line">    ctx.stroke(); <span class="comment">//绘制路径。</span></div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<h2 id="4-2-绘制三角形边框"><a href="#4-2-绘制三角形边框" class="headerlink" title="4.2 绘制三角形边框"></a>4.2 绘制三角形边框</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>, <span class="number">50</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">    ctx.closePath(); <span class="comment">//虽然我们只绘制了两条线段，但是closePath会closePath，仍然是一个3角形</span></div><div class="line">    ctx.stroke(); <span class="comment">//描边。stroke不会自动closePath()</span></div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/20099429.jpg" alt=""></p>
<h2 id="4-3-填充三角形"><a href="#4-3-填充三角形" class="headerlink" title="4.3 填充三角形"></a>4.3 填充三角形</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>, <span class="number">50</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line">    ctx.fill(); <span class="comment">//填充闭合区域。如果path没有闭合，则fill()会自动闭合路径。</span></div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/83072674.jpg" alt=""></p>
<h2 id="4-4-绘制圆弧"><a href="#4-4-绘制圆弧" class="headerlink" title="4.4 绘制圆弧"></a>4.4 绘制圆弧</h2><blockquote>
<p>有两个方法可以绘制圆弧：</p>
</blockquote>
<ol>
<li><p><code>arc(x, y, r, startAngle, endAngle, anticlockwise)</code>:</p>
<p>以<code>(x, y)</code>为圆心，以<code>r</code>为半径，从 <code>startAngle</code>弧度开始到<code>endAngle</code>弧度结束。<code>anticlosewise</code>是布尔值，<code>true</code>表示逆时针，<code>false</code>表示顺时针。(默认是顺时针)</p>
<p>注意：</p>
<ol>
<li>这里的度数都是弧度。</li>
<li><code>0</code>弧度是指的<code>x</code>轴正方形</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">radians=(<span class="built_in">Math</span>.PI/<span class="number">180</span>)*degrees   <span class="comment">//角度转换成弧度</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>arcTo(x1, y1, x2, y2, radius)</code>:</p>
<p>根据给定的控制点和半径画一段圆弧，最后再以直线连接两个控制点。</p>
</li>
</ol>
<h3 id="圆弧案例1："><a href="#圆弧案例1：" class="headerlink" title="圆弧案例1："></a>圆弧案例1：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.arc(<span class="number">50</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="literal">false</span>);</div><div class="line">    ctx.stroke();</div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/97210404.jpg" alt=""></p>
<h3 id="圆弧案例2："><a href="#圆弧案例2：" class="headerlink" title="圆弧案例2："></a>圆弧案例2：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.arc(<span class="number">50</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="literal">false</span>);</div><div class="line">    ctx.stroke();</div><div class="line"></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.arc(<span class="number">150</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">0</span>, -<span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="literal">true</span>);</div><div class="line">    ctx.closePath();</div><div class="line">    ctx.stroke();</div><div class="line"></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.arc(<span class="number">50</span>, <span class="number">150</span>, <span class="number">40</span>, -<span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="literal">false</span>);</div><div class="line">    ctx.fill();</div><div class="line"></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.arc(<span class="number">150</span>, <span class="number">150</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI, <span class="literal">false</span>);</div><div class="line">    ctx.fill();</div><div class="line"></div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/62078705.jpg" alt=""></p>
<h3 id="圆弧案例3："><a href="#圆弧案例3：" class="headerlink" title="圆弧案例3："></a>圆弧案例3：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>);</div><div class="line">    <span class="comment">//参数1、2：控制点1坐标 参数3、4：控制点2坐标 参数4：圆弧半径</span></div><div class="line">    ctx.arcTo(<span class="number">200</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>);</div><div class="line">    ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>)</div><div class="line">    ctx.stroke();</div><div class="line"></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.rect(<span class="number">50</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">    ctx.rect(<span class="number">200</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">10</span>)</div><div class="line">    ctx.rect(<span class="number">200</span>, <span class="number">200</span>, <span class="number">10</span>, <span class="number">10</span>)</div><div class="line">    ctx.fill()</div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/95442248.jpg" alt=""></p>
<p><code>arcTo</code>方法的说明：</p>
<p>​ 这个方法可以这样理解。绘制的弧形是由两条切线所决定。</p>
<p>​ 第 1 条切线：起始点和控制点1决定的直线。</p>
<p>​ 第 2 条切线：控制点1 和控制点2决定的直线。</p>
<p>​ <strong>其实绘制的圆弧就是与这两条直线相切的圆弧。</strong></p>
<h2 id="4-5-绘制贝塞尔曲线"><a href="#4-5-绘制贝塞尔曲线" class="headerlink" title="4.5 绘制贝塞尔曲线"></a>4.5 绘制贝塞尔曲线</h2><h3 id="4-5-1-什么是贝塞尔曲线"><a href="#4-5-1-什么是贝塞尔曲线" class="headerlink" title="4.5.1 什么是贝塞尔曲线"></a>4.5.1 什么是贝塞尔曲线</h3><p>​ 贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。</p>
<p>​ 一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋，我们在绘图工具上看到的钢笔工具就是来做这种矢量曲线的。</p>
<p>​ 贝塞尔曲线是计算机图形学中相当重要的参数曲线，在一些比较成熟的位图软件中也有贝塞尔曲线工具如PhotoShop等。在Flash4中还没有完整的曲线工具，而在Flash5里面已经提供出贝塞尔曲线工具。</p>
<p>​ 贝塞尔曲线于1962，由法国工程师皮埃尔·贝塞尔（Pierre Bézier）所广泛发表，他运用贝塞尔曲线来为汽车的主体进行设计。贝塞尔曲线最初由Paul de Casteljau于1959年运用de Casteljau演算法开发，以稳定数值的方法求出贝兹曲线。</p>
<h4 id="一次贝塞尔曲线-线性贝塞尔曲线"><a href="#一次贝塞尔曲线-线性贝塞尔曲线" class="headerlink" title="一次贝塞尔曲线(线性贝塞尔曲线)"></a>一次贝塞尔曲线(线性贝塞尔曲线)</h4><p>​ 一次贝塞尔曲线其实是一条直线。</p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/40655077.jpg" alt=""></p>
<h4 id="二次贝塞尔曲线"><a href="#二次贝塞尔曲线" class="headerlink" title="二次贝塞尔曲线"></a>二次贝塞尔曲线</h4><p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/94917354.jpg" alt=""></p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/35792129.jpg" alt=""></p>
<h4 id="三次贝塞尔曲线"><a href="#三次贝塞尔曲线" class="headerlink" title="三次贝塞尔曲线"></a>三次贝塞尔曲线</h4><p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/69159470.jpg" alt=""></p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/55999388.jpg" alt=""></p>
<h3 id="4-5-2-绘制贝塞尔曲线"><a href="#4-5-2-绘制贝塞尔曲线" class="headerlink" title="4.5.2 绘制贝塞尔曲线"></a>4.5.2 绘制贝塞尔曲线</h3><h4 id="绘制二次贝塞尔曲线"><a href="#绘制二次贝塞尔曲线" class="headerlink" title="绘制二次贝塞尔曲线"></a>绘制二次贝塞尔曲线</h4><p><code>quadraticCurveTo(cp1x, cp1y, x, y)</code>:</p>
<p><strong>说明：</strong></p>
<p>​ 参数1和2：控制点坐标</p>
<p>​ 参数3和4：结束点坐标</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(<span class="number">10</span>, <span class="number">200</span>); <span class="comment">//起始点</span></div><div class="line">    <span class="keyword">var</span> cp1x = <span class="number">40</span>, cp1y = <span class="number">100</span>;  <span class="comment">//控制点</span></div><div class="line">    <span class="keyword">var</span> x = <span class="number">200</span>, y = <span class="number">200</span>; <span class="comment">// 结束点</span></div><div class="line">    <span class="comment">//绘制二次贝塞尔曲线</span></div><div class="line">    ctx.quadraticCurveTo(cp1x, cp1y, x, y);</div><div class="line">    ctx.stroke();</div><div class="line"></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.rect(<span class="number">10</span>, <span class="number">200</span>, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">    ctx.rect(cp1x, cp1y, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">    ctx.rect(x, y, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">    ctx.fill();</div><div class="line"></div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/31012258.jpg" alt=""></p>
<h4 id="绘制三次贝塞尔曲线"><a href="#绘制三次贝塞尔曲线" class="headerlink" title="绘制三次贝塞尔曲线"></a><strong>绘制三次贝塞尔曲线</strong></h4><p><code>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)</code>：</p>
<p>说明：</p>
<p>​ 参数1和2：控制点1的坐标</p>
<p>​ 参数3和4：控制点2的坐标</p>
<p>​ 参数5和6：结束点的坐标</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(<span class="number">40</span>, <span class="number">200</span>); <span class="comment">//起始点</span></div><div class="line">    <span class="keyword">var</span> cp1x = <span class="number">20</span>, cp1y = <span class="number">100</span>;  <span class="comment">//控制点1</span></div><div class="line">    <span class="keyword">var</span> cp2x = <span class="number">100</span>, cp2y = <span class="number">120</span>;  <span class="comment">//控制点2</span></div><div class="line">    <span class="keyword">var</span> x = <span class="number">200</span>, y = <span class="number">200</span>; <span class="comment">// 结束点</span></div><div class="line">    <span class="comment">//绘制二次贝塞尔曲线</span></div><div class="line">    ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);</div><div class="line">    ctx.stroke();</div><div class="line"></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.rect(<span class="number">40</span>, <span class="number">200</span>, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">    ctx.rect(cp1x, cp1y, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">    ctx.rect(cp2x, cp2y, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">    ctx.rect(x, y, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">    ctx.fill();</div><div class="line"></div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/18941618.jpg" alt=""></p>
<h1 id="五、添加样式和颜色"><a href="#五、添加样式和颜色" class="headerlink" title="五、添加样式和颜色"></a>五、添加样式和颜色</h1><p>​ 在前面的绘制矩形章节中，只用到了默认的线条和颜色。</p>
<p>​ 如果想要给图形上色，有两个重要的属性可以做到。</p>
<ol>
<li><p><code>fillStyle = color</code></p>
<p>设置图形的填充颜色</p>
</li>
<li><p><code>strokeStyle = color</code></p>
<p>设置图形轮廓的颜色</p>
</li>
</ol>
<blockquote>
<p>备注：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1\. `color` 可以是表示 `css` 颜色值的字符串、渐变对象或者图案对象。</div><div class="line">2\. 默认情况下，线条和填充颜色都是黑色。</div><div class="line">3\. 一旦您设置了 `strokeStyle` 或者 `fillStyle` 的值，那么这个新值就会成为新绘制的图形的默认值。如果你要给每个图形上不同的颜色，你需要重新设置 `fillStyle` 或 `strokeStyle` 的值。</div></pre></td></tr></table></figure>
<h2 id="fillStyle"><a href="#fillStyle" class="headerlink" title="fillStyle"></a><code>fillStyle</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line">  <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</div><div class="line">      ctx.fillStyle = <span class="string">'rgb('</span> + <span class="built_in">Math</span>.floor(<span class="number">255</span> - <span class="number">42.5</span> * i) + <span class="string">','</span> +</div><div class="line">        <span class="built_in">Math</span>.floor(<span class="number">255</span> - <span class="number">42.5</span> * j) + <span class="string">',0)'</span>;</div><div class="line">      ctx.fillRect(j * <span class="number">50</span>, i * <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/90462466.jpg" alt=""></p>
<h2 id="strokeStyle"><a href="#strokeStyle" class="headerlink" title="strokeStyle"></a><code>strokeStyle</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line">        <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</div><div class="line">                ctx.strokeStyle = <span class="string">`rgb(<span class="subst">$&#123;randomInt(<span class="number">0</span>, <span class="number">255</span>)&#125;</span>,<span class="subst">$&#123;randomInt(<span class="number">0</span>, <span class="number">255</span>)&#125;</span>,<span class="subst">$&#123;randomInt(<span class="number">0</span>, <span class="number">255</span>)&#125;</span>)`</span>;</div><div class="line">                ctx.strokeRect(j * <span class="number">50</span>, i * <span class="number">50</span>, <span class="number">40</span>, <span class="number">40</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    draw();</div><div class="line">    <span class="comment">/** 作者:李振超 4 Jun 2017 12:12 返回随机的 [from, to] 之间的整数(包括from，也包括to) */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">randomInt</span>(<span class="params">from, to</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * (to - <span class="keyword">from</span> + <span class="number">1</span>) + <span class="keyword">from</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/39824191.jpg" alt=""></p>
<h2 id="Transparency-透明度"><a href="#Transparency-透明度" class="headerlink" title="Transparency(透明度)"></a><code>Transparency(透明度)</code></h2><p><code>globalAlpha = transparencyValue</code></p>
<p>​ 这个属性影响到 canvas 里所有图形的透明度，有效的值范围是 0.0 （完全透明）到 1.0（完全不透明），默认是 1.0。</p>
<p>​ <code>globalAlpha</code> 属性在需要绘制大量拥有相同透明度的图形时候相当高效。不过，我认为使用<code>rgba()</code>设置透明度更加好一些。</p>
<h2 id="line-style"><a href="#line-style" class="headerlink" title="line style"></a><code>line style</code></h2><h3 id="1-lineWidth-value"><a href="#1-lineWidth-value" class="headerlink" title="1. lineWidth = value"></a>1. <code>lineWidth = value</code></h3><p>线宽。只能是正值。默认是<code>1.0</code>。</p>
<p>起始点和终点的连线为中心，<strong>上下各占线宽的一半</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">10</span>, <span class="number">10</span>);</div><div class="line">ctx.lineTo(<span class="number">100</span>, <span class="number">10</span>);</div><div class="line">ctx.lineWidth = <span class="number">10</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">110</span>, <span class="number">10</span>);</div><div class="line">ctx.lineTo(<span class="number">160</span>, <span class="number">10</span>)</div><div class="line">ctx.lineWidth = <span class="number">20</span>;</div><div class="line">ctx.stroke()</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/29873575.jpg" alt=""></p>
<h3 id="2-lineCap-type"><a href="#2-lineCap-type" class="headerlink" title="2. lineCap = type"></a>2. <code>lineCap = type</code></h3><p>线条末端样式。</p>
<p>共有3个值：</p>
<ol>
<li><code>butt</code>：线段末端以方形结束</li>
<li><code>round</code>：线段末端以圆形结束</li>
<li><p><code>square</code>：线段末端以方形结束，但是增加了一个宽度和线段相同，高度是线段厚度一半的矩形区域。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lineCaps = [<span class="string">"butt"</span>, <span class="string">"round"</span>, <span class="string">"square"</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</div><div class="line">   ctx.beginPath();</div><div class="line">   ctx.moveTo(<span class="number">20</span> + <span class="number">30</span> * i, <span class="number">30</span>);</div><div class="line">   ctx.lineTo(<span class="number">20</span> + <span class="number">30</span> * i, <span class="number">100</span>);</div><div class="line">   ctx.lineWidth = <span class="number">20</span>;</div><div class="line">   ctx.lineCap = lineCaps[i];</div><div class="line">   ctx.stroke();</div><div class="line">&#125;</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">0</span>, <span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">30</span>);</div><div class="line"></div><div class="line">ctx.moveTo(<span class="number">0</span>, <span class="number">100</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">100</span>)</div><div class="line"></div><div class="line">ctx.strokeStyle = <span class="string">"red"</span>;</div><div class="line">ctx.lineWidth = <span class="number">1</span>;</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-4/41486892.jpg" alt=""></p>
</li>
</ol>
<h3 id="3-lineJoin-type"><a href="#3-lineJoin-type" class="headerlink" title="3. lineJoin = type"></a>3. <code>lineJoin = type</code></h3><p>同一个path内，设定线条与线条间接合处的样式。</p>
<p>共有3个值<code>round</code>, <code>bevel</code> 和 <code>miter</code>：</p>
<ol>
<li><p><code>round</code></p>
<p>通过填充一个额外的，圆心在相连部分末端的扇形，绘制拐角的形状。 圆角的半径是线段的宽度。</p>
</li>
<li><p><code>bevel</code></p>
<p>在相连部分的末端填充一个额外的以三角形为底的区域， 每个部分都有各自独立的矩形拐角。</p>
</li>
<li><p><code>miter</code>(默认)</p>
<p>通过延伸相连部分的外边缘，使其相交于一点，形成一个额外的菱形区域。</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> lineJoin = [<span class="string">'round'</span>, <span class="string">'bevel'</span>, <span class="string">'miter'</span>];</div><div class="line">    ctx.lineWidth = <span class="number">20</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lineJoin.length; i++)&#123;</div><div class="line">        ctx.lineJoin = lineJoin[i];</div><div class="line">        ctx.beginPath();</div><div class="line">        ctx.moveTo(<span class="number">50</span>, <span class="number">50</span> + i * <span class="number">50</span>);</div><div class="line">        ctx.lineTo(<span class="number">100</span>, <span class="number">100</span> + i * <span class="number">50</span>);</div><div class="line">        ctx.lineTo(<span class="number">150</span>, <span class="number">50</span> + i * <span class="number">50</span>);</div><div class="line">        ctx.lineTo(<span class="number">200</span>, <span class="number">100</span> + i * <span class="number">50</span>);</div><div class="line">        ctx.lineTo(<span class="number">250</span>, <span class="number">50</span> + i * <span class="number">50</span>);</div><div class="line">        ctx.stroke();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-5/5058353.jpg" alt=""></p>
<h3 id="4-虚线"><a href="#4-虚线" class="headerlink" title="4. 虚线"></a>4. 虚线</h3><p>用 <code>setLineDash</code> 方法和 <code>lineDashOffset</code> 属性来制定虚线样式. <code>setLineDash</code> 方法接受一个数组，来指定线段与间隙的交替；<code>lineDashOffset</code>属性设置起始偏移量.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line"></div><div class="line">    ctx.setLineDash([<span class="number">20</span>, <span class="number">5</span>]);  <span class="comment">// [实线长度, 间隙长度]</span></div><div class="line">    ctx.lineDashOffset = <span class="number">-0</span>;</div><div class="line">    ctx.strokeRect(<span class="number">50</span>, <span class="number">50</span>, <span class="number">210</span>, <span class="number">210</span>);</div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-5/92471191.jpg" alt=""></p>
<p>备注：</p>
<p>​ <code>getLineDash()</code>:返回一个包含当前虚线样式，长度为非负偶数的数组。</p>
<h1 id="六、绘制文本"><a href="#六、绘制文本" class="headerlink" title="六、绘制文本"></a>六、绘制文本</h1><h2 id="绘制文本的两个方法"><a href="#绘制文本的两个方法" class="headerlink" title="绘制文本的两个方法"></a>绘制文本的两个方法</h2><p>canvas 提供了两种方法来渲染文本:</p>
<ol>
<li><p><code>fillText(text, x, y [, maxWidth])</code></p>
<p>在指定的(x,y)位置填充指定的文本，绘制的最大宽度是可选的.</p>
</li>
<li><p><code>strokeText(text, x, y [, maxWidth])</code></p>
<p>在指定的(x,y)位置绘制文本边框，绘制的最大宽度是可选的.</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ctx;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">    ctx.font = <span class="string">"100px sans-serif"</span></div><div class="line">    ctx.fillText(<span class="string">"天若有情"</span>, <span class="number">10</span>, <span class="number">100</span>);</div><div class="line">    ctx.strokeText(<span class="string">"天若有情"</span>, <span class="number">10</span>, <span class="number">200</span>)</div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-6/87968030.jpg" alt=""></p>
<h2 id="给文本添加样式"><a href="#给文本添加样式" class="headerlink" title="给文本添加样式"></a>给文本添加样式</h2><ol>
<li><p><code>font = value</code></p>
<p>当前我们用来绘制文本的样式。这个字符串使用和 <code>CSS font</code>属性相同的语法. 默认的字体是 <code>10px sans-serif</code>。</p>
</li>
<li><p><code>textAlign = value</code></p>
<p>文本对齐选项. 可选的值包括：<code>start</code>, <code>end</code>, <code>left</code>, <code>right</code> or <code>center</code>. 默认值是 <code>start</code>。</p>
</li>
<li><p><code>textBaseline = value</code></p>
<p>基线对齐选项，可选的值包括：<code>top</code>, <code>hanging</code>, <code>middle</code>, <code>alphabetic</code>, <code>ideographic</code>, <code>bottom</code>。默认值是 <code>alphabetic。</code></p>
</li>
<li><p><code>direction = value</code></p>
<p>文本方向。可能的值包括：<code>ltr</code>, <code>rtl</code>, <code>inherit</code>。默认值是 <code>inherit。</code></p>
</li>
</ol>
<h1 id="七、绘制图片"><a href="#七、绘制图片" class="headerlink" title="七、绘制图片"></a>七、绘制图片</h1><p>​ 我们也可以在<code>canvas</code>上直接绘制图片。</p>
<h2 id="7-1-由零开始创建图片"><a href="#7-1-由零开始创建图片" class="headerlink" title="7.1 由零开始创建图片"></a>7.1 由零开始创建图片</h2><h3 id="创建-lt-img-gt-元素"><a href="#创建-lt-img-gt-元素" class="headerlink" title="创建&lt;img&gt;元素"></a>创建<code>&lt;img&gt;</code>元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();   <span class="comment">// 创建一个&lt;img&gt;元素</span></div><div class="line">img.src = <span class="string">'myImage.png'</span>; <span class="comment">// 设置图片源地址</span></div></pre></td></tr></table></figure>
<p>脚本执行后图片开始装载</p>
<h3 id="绘制img"><a href="#绘制img" class="headerlink" title="绘制img"></a>绘制<code>img</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//参数1：要绘制的img 参数2、3：绘制的img在canvas中的坐标</span></div><div class="line">ctx.drawImage(img,<span class="number">0</span>,<span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>注意：</p>
<p>​ 考虑到图片是从网络加载，如果 <code>drawImage</code> 的时候图片还没有完全加载完成，则什么都不做，个别浏览器会抛异常。所以我们应该保证在 <code>img</code> 绘制完成之后再 <code>drawImage</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();   <span class="comment">// 创建img元素</span></div><div class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">&#125;</div><div class="line">img.src = <span class="string">'myImage.png'</span>; <span class="comment">// 设置图片源地址</span></div></pre></td></tr></table></figure>
<h2 id="7-2-绘制-img-标签元素中的图片"><a href="#7-2-绘制-img-标签元素中的图片" class="headerlink" title="7.2 绘制 img 标签元素中的图片"></a>7.2 绘制 <code>img</code> 标签元素中的图片</h2><p>​ <code>img</code> 可以 <code>new</code> 也可以来源于我们页面的 <code>&lt;img&gt;</code>标签</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./美女.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"tutorial"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"> <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123; <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>); <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>; <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>); <span class="keyword">var</span> img = <span class="built_in">document</span>.querySelector(<span class="string">"img"</span>); ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>); &#125; <span class="built_in">document</span>.querySelector(<span class="string">"img"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; draw(); &#125; </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>第一张图片就是页面中的<code>&lt;img&gt;</code>标签</p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-6/84133001.jpg" alt=""></p>
<h2 id="7-3-缩放图片"><a href="#7-3-缩放图片" class="headerlink" title="7.3 缩放图片"></a>7.3 缩放图片</h2><p><code>drawImage()</code> 也可以再添加两个参数：</p>
<p>​ <code>drawImage(image, x, y, width, height)</code></p>
<p>​ 这个方法多了2个参数：<code>width</code> 和 <code>height，</code>这两个参数用来控制 当像canvas画入时应该缩放的大小。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">200</span>)</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-9/14522939.jpg" alt=""></p>
<h2 id="7-4-切片-slice"><a href="#7-4-切片-slice" class="headerlink" title="7.4 切片(slice)"></a>7.4 切片(<code>slice</code>)</h2><p><code>drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)</code></p>
<p>​ 第一个参数和其它的是相同的，都是一个图像或者另一个 canvas 的引用。</p>
<p>其他8个参数：</p>
<p>​ 前4个是定义图像源的切片位置和大小，</p>
<p>​ 后4个则是定义切片的目标显示位置和大小。</p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-9/86448348.jpg" alt=""></p>
<h1 id="八、状态的保存和恢复"><a href="#八、状态的保存和恢复" class="headerlink" title="八、状态的保存和恢复"></a>八、状态的保存和恢复</h1><p><code>Saving and restoring state</code>是绘制复杂图形时必不可少的操作。</p>
<p><code>save()和restore()</code></p>
<p>​ <code>save</code> 和 <code>restore</code> 方法是用来保存和恢复 <code>canvas</code> 状态的，都没有参数。</p>
<p>​ <code>Canvas</code> 的状态就是当前画面应用的所有样式和变形的一个快照。</p>
<ol>
<li><p>关于 <code>save()</code></p>
<p>Canvas状态存储在栈中，每当<code>save()</code>方法被调用后，当前的状态就被推送到栈中保存。一个绘画状态包括：</p>
<ul>
<li><p>当前应用的变形（即移动，旋转和缩放）</p>
</li>
<li><p><code>strokeStyle</code>, <code>fillStyle</code>, <code>globalAlpha</code>, <code>lineWidth</code>, <code>lineCap</code>, <code>lineJoin</code>, <code>miterLimit</code>, <code>shadowOffsetX</code>, <code>shadowOffsetY</code>, <code>shadowBlur</code>, <code>shadowColor</code>, <code>globalCompositeOperation 的值</code></p>
</li>
<li><p>当前的裁切路径（<code>clipping path</code>）</p>
</li>
</ul>
<p>​</p>
<p><strong>可以调用任意多次 <code>save</code>方法。</strong>(类似数组的<code>push()</code>)</p>
</li>
<li><p>关于<code>restore()</code></p>
<p>每一次调用 <code>restore</code> 方法，上一个保存的状态就从栈中弹出，所有设定都恢复。(类似数组的<code>pop()</code>)</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ctx;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial'</span>);</div><div class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line"></div><div class="line">    ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">150</span>, <span class="number">150</span>);   <span class="comment">// 使用默认设置绘制一个矩形</span></div><div class="line">    ctx.save();                  <span class="comment">// 保存默认状态</span></div><div class="line"></div><div class="line">    ctx.fillStyle = <span class="string">'red'</span>       <span class="comment">// 在原有配置基础上对颜色做改变</span></div><div class="line">    ctx.fillRect(<span class="number">15</span>, <span class="number">15</span>, <span class="number">120</span>, <span class="number">120</span>); <span class="comment">// 使用新的设置绘制一个矩形</span></div><div class="line"></div><div class="line">    ctx.save();                  <span class="comment">// 保存当前状态</span></div><div class="line">    ctx.fillStyle = <span class="string">'#FFF'</span>       <span class="comment">// 再次改变颜色配置</span></div><div class="line">    ctx.fillRect(<span class="number">30</span>, <span class="number">30</span>, <span class="number">90</span>, <span class="number">90</span>);   <span class="comment">// 使用新的配置绘制一个矩形</span></div><div class="line"></div><div class="line">    ctx.restore();               <span class="comment">// 重新加载之前的颜色状态</span></div><div class="line">    ctx.fillRect(<span class="number">45</span>, <span class="number">45</span>, <span class="number">60</span>, <span class="number">60</span>);   <span class="comment">// 使用上一次的配置绘制一个矩形</span></div><div class="line"></div><div class="line">    ctx.restore();               <span class="comment">// 加载默认颜色配置</span></div><div class="line">    ctx.fillRect(<span class="number">60</span>, <span class="number">60</span>, <span class="number">30</span>, <span class="number">30</span>);   <span class="comment">// 使用加载的配置绘制一个矩形</span></div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<h1 id="九、变形"><a href="#九、变形" class="headerlink" title="九、变形"></a>九、变形</h1><h2 id="9-1-translate"><a href="#9-1-translate" class="headerlink" title="9.1 translate"></a>9.1 translate</h2><p><code>translate(x, y)</code></p>
<p>​ 用来移动 <code>canvas</code> 的<strong>原点</strong>到指定的位置</p>
<p>​ <code>translate</code>方法接受两个参数。<code>x</code> 是左右偏移量，<code>y</code> 是上下偏移量，如右图所示。</p>
<p>在做变形之前先保存状态是一个良好的习惯。大多数情况下，调用 <code>restore</code> 方法比手动恢复原先的状态要简单得多。又如果你是在一个循环中做位移但没有保存和恢复<code>canvas</code> 的状态，很可能到最后会发现怎么有些东西不见了，那是因为它很可能已经超出 <code>canvas</code> 范围以外了。</p>
<p>​ 注意：<code>translate</code>移动的是<code>canvas</code>的坐标原点。(坐标变换)</p>
<p>​ <img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/83770925.jpg" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ctx;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial1'</span>);</div><div class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">    ctx.save(); <span class="comment">//保存坐原点平移之前的状态</span></div><div class="line">    ctx.translate(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    ctx.strokeRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)</div><div class="line">    ctx.restore(); <span class="comment">//恢复到最初状态</span></div><div class="line">    ctx.translate(<span class="number">220</span>, <span class="number">220</span>);</div><div class="line">    ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)</div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/36692804.jpg" alt=""></p>
<h2 id="9-2-rotate"><a href="#9-2-rotate" class="headerlink" title="9.2 rotate"></a>9.2 rotate</h2><p><code>rotate(angle)</code></p>
<p>​ 旋转坐标轴。</p>
<p>​ 这个方法只接受一个参数：旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。</p>
<p>​ 旋转的中心是坐标原点。</p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/37980271.jpg" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ctx;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial1'</span>);</div><div class="line">  <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line"></div><div class="line">  ctx.fillStyle = <span class="string">"red"</span>;</div><div class="line">  ctx.save();</div><div class="line"></div><div class="line">  ctx.translate(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">  ctx.rotate(<span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">45</span>);</div><div class="line">  ctx.fillStyle = <span class="string">"blue"</span>;</div><div class="line">  ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">  ctx.restore();</div><div class="line"></div><div class="line">  ctx.save();</div><div class="line">  ctx.translate(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">  ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>)</div><div class="line">  ctx.restore();</div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/40328613.jpg" alt=""></p>
<h2 id="9-3-scale"><a href="#9-3-scale" class="headerlink" title="9.3 scale"></a>9.3 scale</h2><p><code>scale(x, y)</code></p>
<p>​ 我们用它来增减图形在 <code>canvas</code> 中的像素数目，对形状，位图进行缩小或者放大。</p>
<p>​ <code>scale</code>方法接受两个参数。<code>x,y</code>分别是横轴和纵轴的缩放因子，它们都必须是正值。值比 1.0 小表示缩 小，比 1.0 大则表示放大，值为 1.0 时什么效果都没有。</p>
<p>​ 默认情况下，<code>canvas</code> 的 1 单位就是 1 个像素。举例说，如果我们设置缩放因子是 0.5，1 个单位就变成对应 0.5 个像素，这样绘制出来的形状就会是原先的一半。同理，设置为 2.0 时，1 个单位就对应变成了 2 像素，绘制的结果就是图形放大了 2 倍。</p>
<h2 id="9-4-transform-变形矩阵"><a href="#9-4-transform-变形矩阵" class="headerlink" title="9.4 transform(变形矩阵)"></a>9.4 transform(变形矩阵)</h2><p><code>transform(a, b, c, d, e, f)</code></p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/89391901.jpg" alt=""></p>
<p><code>a (m11)</code></p>
<p>​ Horizontal scaling.</p>
<p><code>b (m12)</code></p>
<p>​ Horizontal skewing.</p>
<p><code>c (m21)</code></p>
<p>​ Vertical skewing.</p>
<p><code>d (m22)</code></p>
<p>​ Vertical scaling.</p>
<p><code>e (dx)</code></p>
<p>​ Horizontal moving.</p>
<p><code>f (dy)</code></p>
<p>​ Vertical moving.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ctx;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial1'</span>);</div><div class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">    ctx.transform(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/15535750.jpg" alt=""></p>
<h1 id="十、合成"><a href="#十、合成" class="headerlink" title="十、合成"></a>十、合成</h1><p>​ 在前面的所有例子中、，我们总是将一个图形画在另一个之上，对于其他更多的情况，仅仅这样是远远不够的。比如，对合成的图形来说，绘制顺序会有限制。不过，我们可以利用 <code>globalCompositeOperation</code> 属性来改变这种状况。</p>
<p><code>globalCompositeOperation = type</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> ctx;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial1'</span>);</div><div class="line">        <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line"></div><div class="line">        ctx.fillStyle = <span class="string">"blue"</span>;</div><div class="line">        ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line">        ctx.globalCompositeOperation = <span class="string">"source-over"</span>; <span class="comment">//全局合成操作</span></div><div class="line">        ctx.fillStyle = <span class="string">"red"</span>;</div><div class="line">        ctx.fillRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line">    &#125;</div><div class="line">    draw();</div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>注：下面的展示中，蓝色是原有的，红色是新的。</p>
<p>type `是下面 13 种字符串值之一：</p>
<h2 id="1-source-over-default"><a href="#1-source-over-default" class="headerlink" title="1. source-over(default)"></a>1. source-over(default)</h2><p>这是默认设置，新图像会覆盖在原有图像。</p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/15850624.jpg" alt=""></p>
<h2 id="2-source-in"><a href="#2-source-in" class="headerlink" title="2. source-in"></a>2. source-in</h2><p>仅仅会出现新图像与原来图像重叠的部分，其他区域都变成透明的。(包括其他的老图像区域也会透明)</p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/37411043.jpg" alt=""></p>
<h2 id="3-source-out"><a href="#3-source-out" class="headerlink" title="3. source-out"></a>3. <code>source-out</code></h2><p>仅仅显示新图像与老图像没有重叠的部分，其余部分全部透明。(老图像也不显示)</p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/41781103.jpg" alt=""></p>
<h2 id="4-source-atop"><a href="#4-source-atop" class="headerlink" title="4. source-atop"></a>4. source-atop</h2><p>新图像仅仅显示与老图像重叠区域。老图像仍然可以显示。</p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/29772191.jpg" alt=""></p>
<h2 id="5-destination-over"><a href="#5-destination-over" class="headerlink" title="5. destination-over"></a>5. destination-over</h2><p>新图像会在老图像的下面。</p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/23645788.jpg" alt=""></p>
<h2 id="6-destination-in"><a href="#6-destination-in" class="headerlink" title="6. destination-in"></a>6. destination-in</h2><p>仅仅新老图像重叠部分的老图像被显示，其他区域全部透明。</p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/78166139.jpg" alt=""></p>
<h2 id="7-destination-out"><a href="#7-destination-out" class="headerlink" title="7. destination-out"></a>7. destination-out</h2><p>仅仅老图像与新图像没有重叠的部分。 注意显示的是老图像的部分区域。</p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/27996302.jpg" alt=""></p>
<h2 id="8-destination-atop"><a href="#8-destination-atop" class="headerlink" title="8. destination-atop"></a>8. destination-atop</h2><p>老图像仅仅仅仅显示重叠部分，新图像会显示在老图像的下面。</p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/73933570.jpg" alt=""></p>
<h2 id="9-lighter"><a href="#9-lighter" class="headerlink" title="9. lighter"></a>9. lighter</h2><p>新老图像都显示，但是重叠区域的颜色做加处理</p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/65148759.jpg" alt=""></p>
<h2 id="10-darken"><a href="#10-darken" class="headerlink" title="10. darken"></a>10. darken</h2><p>保留重叠部分最黑的像素。(每个颜色位进行比较，得到最小的)</p>
<p><code>blue: #0000ff</code></p>
<p><code>red: #ff0000</code></p>
<p>所以重叠部分的颜色：<code>#000000</code></p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/88895274.jpg" alt=""></p>
<h2 id="11-lighten"><a href="#11-lighten" class="headerlink" title="11. lighten"></a>11. lighten</h2><p>保证重叠部分最量的像素。(每个颜色位进行比较，得到最大的)</p>
<p><code>blue: #0000ff</code></p>
<p><code>red: #ff0000</code></p>
<p>所以重叠部分的颜色：<code>#ff00ff</code></p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/21148678.jpg" alt=""></p>
<h2 id="12-xor"><a href="#12-xor" class="headerlink" title="12. xor"></a>12. xor</h2><p>重叠部分会变成透明</p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/44617053.jpg" alt=""></p>
<h2 id="13-copy"><a href="#13-copy" class="headerlink" title="13. copy"></a>13. copy</h2><p>只有新图像会被保留，其余的全部被清除(边透明)<br><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/11205920.jpg" alt=""></p>
<h1 id="十一、裁剪路径"><a href="#十一、裁剪路径" class="headerlink" title="十一、裁剪路径"></a>十一、裁剪路径</h1><p><code>clip()</code></p>
<p>​ 把已经创建的路径转换成裁剪路径。</p>
<p>​ 裁剪路径的作用是遮罩。只显示裁剪路径内的区域，裁剪路径外的区域会被隐藏。</p>
<p>​ 注意：<code>clip()</code>只能遮罩在这个方法调用之后绘制的图像，如果是<code>clip()</code>方法调用之前绘制的图像，则无法实现遮罩。</p>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/53022912.jpg" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ctx;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'tutorial1'</span>);</div><div class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line"></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.arc(<span class="number">20</span>,<span class="number">20</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</div><div class="line">    ctx.clip();</div><div class="line"></div><div class="line">    ctx.fillStyle = <span class="string">"pink"</span>;</div><div class="line">    ctx.fillRect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">100</span>,<span class="number">100</span>);</div><div class="line">&#125;</div><div class="line">draw();</div></pre></td></tr></table></figure>
<h1 id="十二、动画"><a href="#十二、动画" class="headerlink" title="十二、动画"></a>十二、动画</h1><h2 id="动画的基本步骤"><a href="#动画的基本步骤" class="headerlink" title="动画的基本步骤"></a>动画的基本步骤</h2><ol>
<li><p><strong>清空<code>canvas</code></strong></p>
<p>再绘制每一帧动画之前，需要清空所有。清空所有最简单的做法就是<code>clearRect()</code>方法</p>
</li>
<li><p><strong>保存<code>canvas</code>状态</strong></p>
<p>如果在绘制的过程中会更改<code>canvas</code>的状态(颜色、移动了坐标原点等),又在绘制每一帧时都是原始状态的话，则最好保存下<code>canvas</code>的状态</p>
</li>
<li><p><strong>绘制动画图形</strong></p>
<p>这一步才是真正的绘制动画帧</p>
</li>
<li><p><strong>恢复<code>canvas</code>状态</strong></p>
<p>如果你前面保存了<code>canvas</code>状态，则应该在绘制完成一帧之后恢复<code>canvas</code>状态。</p>
</li>
</ol>
<h2 id="控制动画"><a href="#控制动画" class="headerlink" title="控制动画"></a>控制动画</h2><p>我们可用通过<code>canvas</code>的方法或者自定义的方法把图像会知道到<code>canvas</code>上。正常情况，我们能看到绘制的结果是在脚本执行结束之后。例如，我们不可能在一个 <code>for</code> 循环内部完成动画。</p>
<p>也就是，为了执行动画，我们需要一些可以定时执行重绘的方法。</p>
<p>一般用到下面三个方法：</p>
<ol>
<li><code>setInterval()</code></li>
<li><code>setTimeout()</code></li>
<li><code>requestAnimationFrame()</code></li>
</ol>
<h2 id="案例1：太阳系"><a href="#案例1：太阳系" class="headerlink" title="案例1：太阳系"></a>案例1：太阳系</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sun;</div><div class="line"><span class="keyword">let</span> earth;</div><div class="line"><span class="keyword">let</span> moon;</div><div class="line"><span class="keyword">let</span> ctx;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    sun = <span class="keyword">new</span> Image();</div><div class="line">    earth = <span class="keyword">new</span> Image();</div><div class="line">    moon = <span class="keyword">new</span> Image();</div><div class="line">    sun.src = <span class="string">"sun.png"</span>;</div><div class="line">    earth.src = <span class="string">"earth.png"</span>;</div><div class="line">    moon.src = <span class="string">"moon.png"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">"#solar"</span>);</div><div class="line">    ctx = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line"></div><div class="line">    sun.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">        draw()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">init();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>); <span class="comment">//清空所有的内容</span></div><div class="line">    <span class="comment">/*绘制 太阳*/</span></div><div class="line">    ctx.drawImage(sun, <span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</div><div class="line"></div><div class="line">    ctx.save();</div><div class="line">    ctx.translate(<span class="number">150</span>, <span class="number">150</span>);</div><div class="line"></div><div class="line">    <span class="comment">//绘制earth轨道</span></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.strokeStyle = <span class="string">"rgba(255,255,0,0.5)"</span>;</div><div class="line">    ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI)</div><div class="line">    ctx.stroke()</div><div class="line"></div><div class="line">    <span class="keyword">let</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    <span class="comment">//绘制地球</span></div><div class="line">    ctx.rotate(<span class="number">2</span> * <span class="built_in">Math</span>.PI / <span class="number">60</span> * time.getSeconds() + <span class="number">2</span> * <span class="built_in">Math</span>.PI / <span class="number">60000</span> * time.getMilliseconds())</div><div class="line">    ctx.translate(<span class="number">100</span>, <span class="number">0</span>);</div><div class="line">    ctx.drawImage(earth, <span class="number">-12</span>, <span class="number">-12</span>)</div><div class="line"></div><div class="line">    <span class="comment">//绘制月球轨道</span></div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.strokeStyle = <span class="string">"rgba(255,255,255,.3)"</span>;</div><div class="line">    ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</div><div class="line">    ctx.stroke();</div><div class="line"></div><div class="line">    <span class="comment">//绘制月球</span></div><div class="line">    ctx.rotate(<span class="number">2</span> * <span class="built_in">Math</span>.PI / <span class="number">6</span> * time.getSeconds() + <span class="number">2</span> * <span class="built_in">Math</span>.PI / <span class="number">6000</span> * time.getMilliseconds());</div><div class="line">    ctx.translate(<span class="number">40</span>, <span class="number">0</span>);</div><div class="line">    ctx.drawImage(moon, <span class="number">-3.5</span>, <span class="number">-3.5</span>);</div><div class="line">    ctx.restore();</div><div class="line"></div><div class="line">    requestAnimationFrame(draw);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/65211642.jpg" alt=""></p>
</blockquote>
<h2 id="案例2：模拟时钟"><a href="#案例2：模拟时钟" class="headerlink" title="案例2：模拟时钟"></a>案例2：模拟时钟</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"> body &#123; padding: 0; margin: 0; background-color: rgba(0, 0, 0, 0.1) &#125; canvas &#123; display: block; margin: 200px auto; &#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"solar"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> </span></div><div class="line">	init(); </div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123; </div><div class="line">		<span class="keyword">let</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">"#solar"</span>)</div><div class="line">		; <span class="keyword">let</span> ctx = canvas.getContext(<span class="string">"2d"</span>); </div><div class="line">		draw(ctx); </div><div class="line">	&#125; </div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">ctx</span>)</span>&#123; </div><div class="line">		requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>)</span>&#123; drawDial(ctx); <span class="comment">//绘制表盘 </span></div><div class="line">		drawAllHands(ctx); <span class="comment">//绘制时分秒针 </span></div><div class="line">		requestAnimationFrame(step); </div><div class="line">		&#125;); </div><div class="line">	&#125; </div><div class="line">	</div><div class="line">	<span class="comment">/*绘制时分秒针*/</span> </div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">drawAllHands</span>(<span class="params">ctx</span>)</span>&#123;</div><div class="line">		 <span class="keyword">let</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="keyword">let</span> s = time.getSeconds(); </div><div class="line">		 <span class="keyword">let</span> m = time.getMinutes(); </div><div class="line">		 <span class="keyword">let</span> h = time.getHours(); </div><div class="line">		 <span class="keyword">let</span> pi = <span class="built_in">Math</span>.PI; </div><div class="line">		 <span class="keyword">let</span> secondAngle = pi / <span class="number">180</span> * <span class="number">6</span> * s; <span class="comment">//计算出来s针的弧度 </span></div><div class="line">		 <span class="keyword">let</span> minuteAngle = pi / <span class="number">180</span> * <span class="number">6</span> * m + secondAngle / <span class="number">60</span>; <span class="comment">//计算出来分针的弧度 </span></div><div class="line">		 <span class="keyword">let</span> hourAngle = pi / <span class="number">180</span> * <span class="number">30</span> * h + minuteAngle / <span class="number">12</span>; <span class="comment">//计算出来时针的弧度 </span></div><div class="line">		 drawHand(hourAngle, <span class="number">60</span>, <span class="number">6</span>, <span class="string">"red"</span>, ctx); <span class="comment">//绘制时针       </span></div><div class="line">		 drawHand(minuteAngle, <span class="number">106</span>, <span class="number">4</span>, <span class="string">"green"</span>, ctx); <span class="comment">//绘制分针 </span></div><div class="line">		 drawHand(secondAngle, <span class="number">129</span>, <span class="number">2</span>, <span class="string">"blue"</span>, ctx); <span class="comment">//绘制秒针 </span></div><div class="line">	 &#125; </div><div class="line">	 <span class="comment">/*绘制时针、或分针、或秒针 * </span></div><div class="line">	 参数1：要绘制的针的角度 * </div><div class="line">	 参数2：要绘制的针的长度 * </div><div class="line">	 参数3：要绘制的针的宽度 * </div><div class="line">	 参数4：要绘制的针的颜色 * </div><div class="line">	 参数4：ctx * */ </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">drawHand</span>(<span class="params">angle, len, width, color, ctx</span>)</span>&#123; </div><div class="line">		ctx.save(); ctx.translate(<span class="number">150</span>, <span class="number">150</span>); <span class="comment">//把坐标轴的远点平移到原来的中心 </span></div><div class="line">		ctx.rotate(-<span class="built_in">Math</span>.PI / <span class="number">2</span> + angle); <span class="comment">//旋转坐标轴。 x轴就是针的角度 </span></div><div class="line">		ctx.beginPath(); </div><div class="line">		ctx.moveTo(<span class="number">-4</span>, <span class="number">0</span>); </div><div class="line">		ctx.lineTo(len, <span class="number">0</span>); <span class="comment">// 沿着x轴绘制针 </span></div><div class="line">		ctx.lineWidth = width; </div><div class="line">		ctx.strokeStyle = color; </div><div class="line">		ctx.lineCap = <span class="string">"round"</span>; </div><div class="line">		ctx.stroke(); </div><div class="line">		ctx.closePath(); </div><div class="line">		ctx.restore(); </div><div class="line">	&#125; <span class="comment">/*绘制表盘*/</span> </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">drawDial</span>(<span class="params">ctx</span>)</span>&#123; </div><div class="line">		<span class="keyword">let</span> pi = <span class="built_in">Math</span>.PI; </div><div class="line">		ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>); <span class="comment">//清除所有内容 </span></div><div class="line">		ctx.save(); </div><div class="line">		ctx.translate(<span class="number">150</span>, <span class="number">150</span>); <span class="comment">//一定坐标原点到原来的中心 </span></div><div class="line">		ctx.beginPath(); </div><div class="line">		ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">148</span>, <span class="number">0</span>, <span class="number">2</span> * pi); <span class="comment">//绘制圆周 </span></div><div class="line">		ctx.stroke(); </div><div class="line">		ctx.closePath(); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++)&#123;<span class="comment">//绘制刻度。 ctx.save(); </span></div><div class="line">		ctx.rotate(-pi / <span class="number">2</span> + i * pi / <span class="number">30</span>); <span class="comment">//旋转坐标轴。坐标轴x的正方形从 向上开始算起 </span></div><div class="line">		ctx.beginPath(); </div><div class="line">		ctx.moveTo(<span class="number">110</span>, <span class="number">0</span>);</div><div class="line">		ctx.lineTo(<span class="number">140</span>, <span class="number">0</span>);</div><div class="line">		ctx.lineWidth = i % <span class="number">5</span> ? <span class="number">2</span> : <span class="number">4</span>; </div><div class="line">		ctx.strokeStyle = i % <span class="number">5</span> ? <span class="string">"blue"</span> : <span class="string">"red"</span>; </div><div class="line">		ctx.stroke(); </div><div class="line">		ctx.closePath(); </div><div class="line">		ctx.restore(); </div><div class="line">	&#125; </div><div class="line">	ctx.restore(); </div><div class="line">&#125; </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><img src="http://o7cqr8cfk.bkt.clouddn.com/17-6-10/61345876.jpg" alt=""></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习积累 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS选择器总结]]></title>
      <url>/2017/07/02/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="1-基础的选择器"><a href="#1-基础的选择器" class="headerlink" title="1.基础的选择器"></a>1.基础的选择器</h3><table>
<thead>
<tr>
<th style="text-align:center">选择器</th>
<th>含义</th>
<th style="text-align:center">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">*</td>
<td>通用元素选择器，匹配任何元素</td>
<td style="text-align:center">* { margin:0; padding:0; }</td>
</tr>
<tr>
<td style="text-align:center">E</td>
<td>标签选择器，匹配所有使用E标签的元素</td>
<td style="text-align:center">p { font-size:2em; }</td>
</tr>
<tr>
<td style="text-align:center">.info和E.info</td>
<td>class选择器，匹配所有class属性中包含info的元素</td>
<td style="text-align:center">.info{background:#ff0;}p.info{background:#ff0; }</td>
</tr>
<tr>
<td style="text-align:center">#info和E#info</td>
<td>id选择器，匹配所有id属性等于footer的元素</td>
<td style="text-align:center">#info { background:#ff0; }p#info { background:#ff0; }</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="2-组合选择器"><a href="#2-组合选择器" class="headerlink" title="2.组合选择器"></a>2.组合选择器</h3><table>
<thead>
<tr>
<th style="text-align:center">选择器</th>
<th>含义</th>
<th style="text-align:center">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">E,F</td>
<td>多元素选择器，同时匹配所有E元素或F元素，E和F之间用逗号分隔</td>
<td style="text-align:center">Div,p { color:#f00; }</td>
</tr>
<tr>
<td style="text-align:center">E F</td>
<td>后代元素选择器，匹配所有属于E元素后代的F元素，E和F之间用空格分隔</td>
<td style="text-align:center">#nav li {display:inline;}li a { font-weight:bold; }</td>
</tr>
<tr>
<td style="text-align:center">E &gt; F</td>
<td>子元素选择器，匹配所有E元素的子元素F</td>
<td style="text-align:center">div &gt; strong { color:#f00; }</td>
</tr>
<tr>
<td style="text-align:center">E + F</td>
<td>毗邻元素选择器，匹配所有紧随E元素之后的同级元素F</td>
<td style="text-align:center">p + p { color:#f00; }</td>
</tr>
</tbody>
</table>
<h3 id="3-CSS-2-1-属性选择器"><a href="#3-CSS-2-1-属性选择器" class="headerlink" title="3.CSS 2.1 属性选择器"></a>3.CSS 2.1 属性选择器</h3><table>
<thead>
<tr>
<th style="text-align:center">选择器</th>
<th>含义</th>
<th style="text-align:center">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">E[att]</td>
<td>匹配所有具有att属性的E元素，不考虑它的值。（注意：E在此处可以省略，比如“[cheacked]”以下同。）</td>
<td style="text-align:center">p[title] { color:#f00; }</td>
</tr>
<tr>
<td style="text-align:center">E[att=val]</td>
<td>匹配所有att属性等于“val”的E元素</td>
<td style="text-align:center">div[class=”error”] { color:#f00; }</td>
</tr>
<tr>
<td style="text-align:center">E[att~=val]</td>
<td>匹配所有att属性具有多个空格分隔的值、其中一个值等于“val”的E元素</td>
<td style="text-align:center">td[class~=”name”] { color:#f00; }</td>
</tr>
<tr>
<td style="text-align:center">E[att]=val]</td>
<td>匹配所有att属性具有多个连字号分隔（hyphen-separated）的值、其中一个值以“val”开头的E元素，主要用于lang属性，比如“en”、“en-us”、“en-gb”等等</td>
<td style="text-align:center">p[lang</td>
<td>=en] { color:#f00; }</td>
</tr>
</tbody>
</table>
<p><strong>注：CSS 2.1属性选择器还有一个特点就是使用多个选择器，同事满足这多个选择器：</strong><br>blockquote[class=quote][cite] { color:#f00; }</p>
<h3 id="4-CSS-2-1-中的伪类"><a href="#4-CSS-2-1-中的伪类" class="headerlink" title="4.CSS 2.1 中的伪类"></a>4.CSS 2.1 中的伪类</h3><table>
<thead>
<tr>
<th style="text-align:center">选择器</th>
<th>含义</th>
<th style="text-align:center">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">E:first-child</td>
<td>匹配父元素的第一个子元素</td>
<td style="text-align:center">p:first-child { font-style:italic; }  input[type=text]:focus { color:#000; background:#ffe; }  input[type=text]:focus:hover { background:#fff; }q:lang(sv) { quotes: “\201D” “\201D” “\2019″ “\2019″; }</td>
</tr>
<tr>
<td style="text-align:center">E:link</td>
<td>匹配所有未被点击的链接</td>
</tr>
<tr>
<td style="text-align:center">E:visited</td>
<td>匹配所有已被点击的链接</td>
</tr>
<tr>
<td style="text-align:center">E:active</td>
<td>匹配鼠标已经其上按下、还没有释放的E元素</td>
</tr>
<tr>
<td style="text-align:center">E:hover</td>
<td>匹配鼠标悬停其上的E元素</td>
</tr>
<tr>
<td style="text-align:center">E:focus</td>
<td>匹配获得当前焦点的E元素</td>
</tr>
<tr>
<td style="text-align:center">E:lang(c)</td>
<td>匹配lang属性等于c的E元素</td>
</tr>
</tbody>
</table>
<h3 id="5-CSS-2-1中的伪元素"><a href="#5-CSS-2-1中的伪元素" class="headerlink" title="5.CSS 2.1中的伪元素"></a>5.CSS 2.1中的伪元素</h3><table>
<thead>
<tr>
<th style="text-align:center">选择器</th>
<th>含义</th>
<th style="text-align:center">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">E:first-line</td>
<td>匹配E元素的第一行</td>
<td style="text-align:center">p:first-line { font-weight:bold; color;#600; }      .preamble:first-letter { font-size:1.5em; font-weight:bold; }.cbb:before { content:””; display:block; height:17px; width:18px; background:url(top.png) no-repeat 0 0; margin:0 0 0 -18px; }         a:link:after { content: ” (” attr(href) “) “; }</td>
</tr>
</tbody>
</table>
<p>| E:first-letter| 匹配E元素的第一个字母|<br>| E:before | 在E元素之前插入生成的内容 |<br>| E:after| 在E元素之后插入生成的内容|</p>
<h3 id="6-CSS-3的同级元素通用选择器"><a href="#6-CSS-3的同级元素通用选择器" class="headerlink" title="6.CSS 3的同级元素通用选择器"></a>6.CSS 3的同级元素通用选择器</h3><table>
<thead>
<tr>
<th style="text-align:center">选择器</th>
<th>含义</th>
<th style="text-align:center">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">E ~ F</td>
<td>匹配任何在E元素之后的同级F元素</td>
<td style="text-align:center">p ~ ul { background:#ff0; }</td>
</tr>
</tbody>
</table>
<h3 id="7．CSS-3-属性选择器"><a href="#7．CSS-3-属性选择器" class="headerlink" title="7．CSS 3 属性选择器"></a>7．CSS 3 属性选择器</h3><table>
<thead>
<tr>
<th style="text-align:center">选择器</th>
<th>含义</th>
<th style="text-align:center">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">E[att^=”val”]</td>
<td>属性att的值以”val”开头的元素</td>
<td style="text-align:center">div[id^=”nav”] { background:#ff0; }</td>
</tr>
<tr>
<td style="text-align:center">E[att$=”val”]</td>
<td>属性att的值以”val”结尾的元素</td>
</tr>
<tr>
<td style="text-align:center">E[att*=”val”]</td>
<td>属性att的值包含”val”字符串的元素</td>
</tr>
</tbody>
</table>
<h3 id="8-CSS-3中与用户界面有关的伪类"><a href="#8-CSS-3中与用户界面有关的伪类" class="headerlink" title="8. CSS 3中与用户界面有关的伪类"></a>8. CSS 3中与用户界面有关的伪类</h3><table>
<thead>
<tr>
<th style="text-align:center">选择器</th>
<th>含义</th>
<th style="text-align:center">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">E:enabled</td>
<td>匹配表单中激活的元素</td>
<td style="text-align:center">input[type=”text”]:disabled { background:#ddd;}</td>
</tr>
<tr>
<td style="text-align:center">E:disabled</td>
<td>匹配表单中禁用的元素</td>
</tr>
<tr>
<td style="text-align:center">E:checked</td>
<td>匹配表单中被选中的radio（单选框）或checkbox（复选框）元素</td>
</tr>
<tr>
<td style="text-align:center">E::selection</td>
<td>匹配用户当前选中的元素</td>
</tr>
</tbody>
</table>
<h3 id="9-CSS-3中的结构性伪类"><a href="#9-CSS-3中的结构性伪类" class="headerlink" title="9. CSS 3中的结构性伪类"></a>9. CSS 3中的结构性伪类</h3><table>
<thead>
<tr>
<th style="text-align:center">选择器</th>
<th>含义</th>
<th style="text-align:center">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">E:root</td>
<td>匹配文档的根元素，对于HTML文档，就是HTML元素</td>
<td style="text-align:center">p:nth-child(3) { color:#f00; }p:nth-child(odd) { color:#f00; }    p:nth-child(even) { color:#f00; }   p:nth-child(3n+0) { color:#f00; }    p:nth-child(3n) { color:#f00; }   tr:nth-child(2n+11) { background:#ff0; }   tr:nth-last-child(2) { background:#ff0; }   p:last-child { background:#ff0; }    p:only-child { background:#ff0; }    p:empty { background:#ff0; }</td>
</tr>
<tr>
<td style="text-align:center">E:nth-child(n)</td>
<td>匹配其父元素的第n个子元素，第一个编号为1</td>
</tr>
<tr>
<td style="text-align:center">E:nth-last-child(n)</td>
<td>匹配其父元素的倒数第n个子元素，第一个编号为1</td>
</tr>
<tr>
<td style="text-align:center">E:nth-of-type(n)</td>
<td>与:nth-child()作用类似，但是仅匹配使用同种标签的元素</td>
</tr>
<tr>
<td style="text-align:center">E:nth-last-of-type(n)</td>
<td>与:nth-last-child() 作用类似，但是仅匹配使用同种标签的元素</td>
</tr>
<tr>
<td style="text-align:center">E:last-child</td>
<td>匹配父元素的最后一个子元素，等同于:nth-last-child(1)</td>
</tr>
<tr>
<td style="text-align:center">E:first-of-type</td>
<td>匹配父元素下使用同种标签的第一个子元素，等同于:nth-of-type(1)</td>
</tr>
<tr>
<td style="text-align:center">E:last-of-type</td>
<td>匹配父元素下使用同种标签的最后一个子元素，等同于:nth-last-of-type(1)</td>
</tr>
<tr>
<td style="text-align:center">E:only-child</td>
<td>匹配父元素下仅有的一个子元素，等同于:first-child:last-child或 :nth-child(1):nth-last-child(1)</td>
</tr>
<tr>
<td style="text-align:center">E:only-of-type</td>
<td>匹配父元素下使用同种标签的唯一一个子元素，等同于:first-of-type:last-of-type或 :nth-of-type(1):nth-last-of-type(1)</td>
</tr>
<tr>
<td style="text-align:center">E:empty</td>
<td>匹配一个不包含任何子元素的元素，注意，文本节点也被看作子元素</td>
</tr>
</tbody>
</table>
<p> |</p>
<h3 id="10-CSS-3的反选伪类"><a href="#10-CSS-3的反选伪类" class="headerlink" title="10.CSS 3的反选伪类"></a>10.CSS 3的反选伪类</h3><table>
<thead>
<tr>
<th style="text-align:center">选择器</th>
<th>含义</th>
<th style="text-align:center">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">E:not(s)</td>
<td>匹配不符合当前选择器的任何元素</td>
<td style="text-align:center">:not(p) { border:1px solid #ccc; }</td>
</tr>
</tbody>
</table>
<h3 id="11-CSS-3中的-target-伪类"><a href="#11-CSS-3中的-target-伪类" class="headerlink" title="11. CSS 3中的 :target 伪类"></a>11. CSS 3中的 :target 伪类</h3><table>
<thead>
<tr>
<th style="text-align:center">选择器</th>
<th>含义</th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">E:target</td>
<td>匹配文档中特定”id”点击后的效果</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 学习积累 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 选择器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计算机网络知识]]></title>
      <url>/2017/07/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="计算机网络知识"><a href="#计算机网络知识" class="headerlink" title="计算机网络知识"></a><center><strong>计算机网络知识</strong></center></h1><blockquote>
<h2 id="网络知识导图"><a href="#网络知识导图" class="headerlink" title="网络知识导图"></a><strong>网络知识导图</strong></h2><p><img src="http://os94ofsac.bkt.clouddn.com/note/jsjwl.png" alt="思维导图"></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git常用命令(转)]]></title>
      <url>/2017/06/30/Git%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>最近一直在用Git，发现自己有几（hen）个（duo）不会用的命令了，这可不行啊，本着<img src="http://img.blog.csdn.net/20170112193852467?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhjc3dscDA2MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述">精益求精的原则，想写一篇关于Git的博客，但发现了一片很不错的文章就引用了，写得很不错，和大家一起分享！<br><a id="more"></a><br>首先作为一个正直<img src="http://img.blog.csdn.net/20170112195330551?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhjc3dscDA2MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述">的程序员我会注明出处的：<img src="http://img.blog.csdn.net/20170112194124031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhjc3dscDA2MjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"> 像我这样的一定会早日变大佬！</p>
<p>小司机我花了好长时间重新上传图片与排版！</p>
<p><img src="http://i.imgur.com/WZL8kVt.png" alt=""></p>
<p>进入正文<br><strong>一：Git是什么？</strong></p>
<p> Git是目前世界上最先进的分布式版本控制系统。</p>
<p><strong>二：SVN与Git的最主要的区别？</strong></p>
<p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p>
<p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>
<p><strong>三：在windows上如何安装Git？</strong></p>
<p>  msysgit是 windows版的Git,如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/01.jpg" alt=""></p>
<p> 需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 “Git<br>–> Git Bash”,如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/73b0d6cdb48abf7b6e84468ba0b63ea8.jpg" alt=""></p>
<p>会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/7b4710625788e3b5afa9f44bae8eaed2.jpg" alt=""></p>
<p>安装完成后，还需要最后一步设置，在命令行输入如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/02a57c9fbbbaa2490f510a6ddc190c2a.jpg" alt=""></p>
<p>  因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。</p>
<p><strong>   注意：</strong>git config  –global<br>参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。</p>
<p><strong>四：如何操作？</strong></p>
<pre><code>一：创建版本库。
</code></pre><p> 什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。</p>
<pre><code>所以创建一个版本库也非常简单，如下我是D盘 –\&gt; www下
</code></pre><p>目录下新建一个testgit版本库。</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/b6855fb63ecd54daa36e209b1ecc27fc.jpg" alt=""></p>
<p>pwd 命令是用于显示当前的目录。</p>
<pre><code>1. 通过命令 git init 把这个目录变成git可以管理的仓库，如下：
</code></pre><p><img src="http://oc5bjv3gr.bkt.clouddn.com/bc525926ea41beb84aef55ecbd20fffc.jpg" alt=""></p>
<p> 这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/d5960d7dbd8f6d13e930d50fb86d72bd.jpg" alt=""></p>
<pre><code>2. 把文件添加到版本库中。
</code></pre><p>首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。</p>
<p><strong>    下面先看下demo如下演示：</strong></p>
<pre><code>我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111

第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：
</code></pre><p><img src="http://oc5bjv3gr.bkt.clouddn.com/651f92423dcb28d06d70e5d17d632ab8.jpg" alt=""></p>
<p>   如果和上面一样，没有任何提示，说明已经添加成功了。</p>
<p>   第二步：用命令 git commit告诉Git，把文件提交到仓库。</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/64cb78dd4707b05fa9725a1a1201b49f.jpg" alt=""></p>
<p>  现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git<br>status来查看是否还有文件未提交，如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/f86d72b38fe937ed8365ff3f0410cee1.jpg" alt=""></p>
<p> 说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git<br>status来查看下结果，如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/0112b84e6fe37c7690754bf707f9c707.jpg" alt=""></p>
<p>上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。</p>
<p>接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：</p>
<p>git diff readme.txt 如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/3d9d3e02629a608f72e223af6f666a79.jpg" alt=""></p>
<p>如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。</p>
<p>知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git<br>add  第二步是：git commit)。</p>
<p>如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/63f8dab305b02ab53b54547930c7dfe1.jpg" alt=""></p>
<p>二：版本回退：</p>
<p> 如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行</p>
<p>内容为33333333333333.继续执行命令如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/ec47467f29f46dd94973450d4108e0f9.jpg" alt=""></p>
<p>现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令<br>git log 演示如下所示：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/3ec1dc53145fafa44d5a2e26841d4c45.jpg" alt=""></p>
<pre><code>git
</code></pre><p>log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是<br>111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline<br>演示如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/a0b2822fc5d1f85f8ee3aba58c3d9aca.jpg" alt=""></p>
<p>现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git<br>reset  –hard HEAD\^ 那么如果要回退到上上个版本只需把HEAD\^ 改成 HEAD\^\^<br>以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git<br>reset  –hard HEAD~100 即可。未回退之前的readme.txt内容如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/c795ea38022353ecff240a2bb907799a.jpg" alt=""></p>
<p>如果想回退到上一个版本的命令如下操作：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/f5cf5652e077800a51a61454817b8078.jpg" alt=""></p>
<p>再来查看下 readme.txt内容如下：通过命令cat readme.txt查看</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/c258b0cdf86299089125f155c60dd515.jpg" alt=""></p>
<p>可以看到，内容已经回退到上一个版本了。我们可以继续使用git log<br>来查看下历史记录信息，如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/ad6c2a0e1061b8e08111735e149e0a1e.jpg" alt=""></p>
<p>我们看到 增加333333<br>内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：</p>
<p>git reset  –hard 版本号<br>，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git<br>reflog  演示如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/07e318b56e224a6707f56ffbe5370d72.jpg" alt=""></p>
<p>通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令</p>
<p>git reset  –hard 6fcfc89来恢复了。演示如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/96137ced101b595afe01e36f80fa9264.jpg" alt=""></p>
<p>可以看到 目前已经是最新的版本了。</p>
<p>三：理解工作区与暂存区的区别？</p>
<p> <strong>工作区：</strong>就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。</p>
<p><strong><br>版本库(Repository)：</strong>工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。</p>
<p>我们前面说过使用Git提交文件到版本库有两步：</p>
<p>  第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。</p>
<p>  第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。</p>
<p>我们继续使用demo来演示下：</p>
<p>我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt<br>内容为test，我们先用命令 git status来查看下状态，如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/7bd5704c847a24f58e74c8bab4c977c3.jpg" alt=""></p>
<p>现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git<br>status来查看下状态，如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/9143af30e332880c761cc16ca8b85f9b.jpg" alt=""></p>
<p>接着我们可以使用git commit一次性提交到分支上，如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/3b3b8d91fa276311a5e4833848115523.jpg" alt=""></p>
<p>四：Git撤销修改和删除文件操作。</p>
<p><strong>一：撤销修改：</strong></p>
<pre><code>比如我现在在readme.txt文件里面增加一行
</code></pre><p>内容为555555555555，我们先通过命令查看如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/a6ea3327dab506c8e1f5cdc91e14e522.jpg" alt=""></p>
<p>在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：</p>
<p>第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。</p>
<p>第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset  –hard HEAD\^</p>
<p>但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用<br>git status 查看下当前的状态。如下所示：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/83b8597ff3db970d292f211ba2f23d48.jpg" alt=""></p>
<p>可以发现，Git会告诉你，git checkout  — file 可以丢弃工作区的修改，如下命令：</p>
<p>git checkout  —  readme.txt,如下所示：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/8e8c40a64fa3c032c63876fb6b03e732.jpg" alt=""></p>
<p>命令 git checkout –readme.txt<br>意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：</p>
<ol>
<li><p>readme.txt自动修改后，还没有放到暂存区，使用<br>撤销修改就回到和版本库一模一样的状态。</p>
</li>
<li><p>另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。</p>
</li>
</ol>
<p>对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行<br>内容为6666666666666，我git add<br>增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/c47846f81f64f9c3034346ad61da36c8.jpg" alt=""></p>
<p><strong>注意：</strong>命令git checkout — readme.txt 中的 — 很重要，如果没有 —<br>的话，那么命令变成创建分支了。</p>
<p><strong>二：删除文件。</strong></p>
<pre><code>假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：
</code></pre><p><img src="http://oc5bjv3gr.bkt.clouddn.com/e07952351006207769f5e82cba883826.jpg" alt=""></p>
<p>如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt<br>，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令<br>提交掉，现在目录是这样的，</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/165f2c551d10c7cf2dcd8ab1107068b5.jpg" alt=""></p>
<p>只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？</p>
<p>可以使用如下命令 git checkout  — b.txt，如下所示：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/8be208d19e263fbd7d6513026e5ac261.jpg" alt=""></p>
<p>再来看看我们testgit目录，添加了3个文件了。如下所示：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/6e6035066acfcda7b7e654dd74726c3d.jpg" alt=""></p>
<p>五：远程仓库。</p>
<p> 在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：</p>
<pre><code>第一步：创建SSH
</code></pre><p>Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：</p>
<p>ssh-keygen  -t rsa –C “youremail\@example.com”,<br>由于我本地此前运行过一次，所以本地有，如下所示：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/e0ae93a7c810ed00871a0302f7712fe9.jpg" alt=""></p>
<p>id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>
<p>第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH<br>Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/6e2e20ed2d7d0062e85eac0167f665df.jpg" alt=""></p>
<p>点击 Add Key，你就应该可以看到已经添加的key。</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/c21779d050238337af124697eb316be6.jpg" alt=""></p>
<ol>
<li>如何添加远程库？</li>
</ol>
<p> 现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。</p>
<p>   首先，登录github上，然后在右上角找到“create a new<br>repo”创建一个新的仓库。如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/6369016070aebc467e2c47f7cf7c2ada.jpg" alt=""></p>
<p>在Repository name填入testgit，其他保持默认设置，点击“Create<br>repository”按钮，就成功地创建了一个新的Git仓库：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/bea1d16ab729a3e2798b49af12a54057.jpg" alt=""></p>
<p>目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p>
<p>现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：</p>
<p>git remote add origin <a href="https://github.com/tugenhua0707/testgit.git" target="_blank" rel="external">https://github.com/tugenhua0707/testgit.git</a></p>
<p>所有的如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/b72192a4d47c40161a80aa58275ab67a.jpg" alt=""></p>
<p>把本地库的内容推送到远程，使用 git<br>push命令，实际上是把当前分支master推送到远程。</p>
<p>由于远程库是空的，我们第一次推送master分支时，加上了<br>–u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/30593c83505978c306b9b9237b96ffbb.jpg" alt=""></p>
<p>从现在起，只要本地作了提交，就可以通过如下命令：</p>
<p>git push origin master</p>
<p>把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。</p>
<ol>
<li>如何从远程库克隆？</li>
</ol>
<p>上面我们了解了先有本地库，后有远程库时候，如何关联远程库。</p>
<p>现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？</p>
<p>首先，登录github，创建一个新的仓库，名字叫testgit2.如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/3c72866f487dd92dabec693643b33866.jpg" alt=""></p>
<p>如下，我们看到：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/442eaacbfa57885fefadb7311d145b25.jpg" alt=""></p>
<p>现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/90c75484cfa95e1ec8172b668939b7d8.jpg" alt=""></p>
<p>接着在我本地目录下 生成testgit2目录了，如下所示：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/fee8e190b41c77955f60e9fc1318a8ce.jpg" alt=""></p>
<p>六：创建与合并分支。</p>
<p>在<br> 版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p>
<p>首先，我们来创建dev分支，然后切换到dev分支上。如下操作：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/22b4eb0fe31198b15cfea63e573cc334.jpg" alt=""></p>
<p>git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令</p>
<p>git branch dev</p>
<p>git checkout dev</p>
<p>git<br>branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行<br>7777777777777</p>
<p>首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/b983458ea054183eb4af57d8d6e7824f.jpg" alt=""></p>
<p>现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/764fe94576f63dd73479147ff94e2e04.jpg" alt=""></p>
<p>现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令<br>git merge dev 如下所示：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/5a483a3fd6682c4052c997fcfd946b45.jpg" alt=""></p>
<p>git<br>merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。</p>
<p>注意到上面的<em>Fast-forward</em>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。</p>
<p>合并完成后，我们可以接着删除dev分支了，操作如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/09992931708f48a78aed199a6eeb97c6.jpg" alt=""></p>
<p>总结创建与合并分支命令如下：</p>
<p>   查看分支：git branch</p>
<p>   创建分支：git branch name</p>
<p>   切换分支：git checkout name</p>
<p>创建+切换分支：git checkout –b name</p>
<p>合并某分支到当前分支：git merge name</p>
<p>删除分支：git branch –d name</p>
<ol>
<li>如何解决冲突？</li>
</ol>
<p>下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/5f3282f0f6311189aa05e56d9c2647aa.jpg" alt=""></p>
<p>同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/44e1ea9097086ed2a38d39557a5d2425.jpg" alt=""></p>
<p>现在我们需要在master分支上来合并fenzhi1，如下操作：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/9ee63bb968403c8ee705dfdadda1b162.jpg" alt=""></p>
<p>Git用\&lt;\&lt;\&lt;\&lt;\&lt;\&lt;\&lt;，=======，>>>>>>>标记出不同分支的内容，其中\&lt;\&lt;\<head是指主分支修改的内容，\>>>>>fenzhi1<br>是指fenzhi1上修改的内容，我们可以修改下如下后保存：</head是指主分支修改的内容，\></p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/737caa86ac59bfa5fa835f5127bacedb.jpg" alt=""></p>
<p>如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/b2fdecfd7040a07aaeafe231c408c00c.jpg" alt=""></p>
<pre><code>3.分支管理策略。

  通常合并分支时，git一般使用”Fast
</code></pre><p>forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数<br>–no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：</p>
<ol>
<li><p>创建一个dev分支。</p>
</li>
<li><p>修改readme.txt内容。</p>
</li>
<li><p>添加到暂存区。</p>
</li>
<li><p>切换回主分支(master)。</p>
</li>
<li><p>合并dev分支，使用命令 git merge –no-ff  -m “注释” dev</p>
</li>
<li><p>查看历史记录</p>
</li>
</ol>
<p>截图如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/4662d65c8cfea344bfb8cd7f4670a921.jpg" alt=""></p>
<p><strong>分支策略：</strong>首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p>
<p>七：bug分支：</p>
<pre><code>在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。
</code></pre><p>比如我在开发中接到一个404<br>bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/0e2a9ae1dc1d6e279060d9ce9f81294a.jpg" alt=""></p>
<p> 并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404<br>bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场<br>”隐藏起来”，等以后恢复现场后继续工作。如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/00ce3a067db394d1a0124027665a0532.jpg" alt=""></p>
<p>   所以现在我可以通过创建issue-404分支来修复bug了。</p>
<p>首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/3a0d0c604680c7ab4e955a03a569b45b.jpg" alt=""></p>
<p>修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/3b65e4a06634faacd01b9d7d41e5d4c5.jpg" alt=""></p>
<p>现在，我们回到dev分支上干活了。</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/c33b417032263385b8c83c9f72ab38f1.jpg" alt=""></p>
<p>工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash<br>list来查看下。如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/482359a3df7b714e023dc37979deef16.jpg" alt=""></p>
<p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：</p>
<ol>
<li><p>git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash<br>drop来删除。</p>
</li>
<li><p>另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。</p>
<pre><code>演示如下
</code></pre></li>
</ol>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/4a6db00d7a489527a1f2261780dd0698.jpg" alt=""></p>
<p>八：多人协作。</p>
<p>当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。</p>
<ol>
<li><p>要查看远程库的信息 使用 git remote</p>
</li>
<li><p>要查看远程库的详细信息 使用 git remote –v</p>
</li>
</ol>
<p>如下演示：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/ba6e0940a55f3ec5f15f3208009e48b6.jpg" alt=""></p>
<p><strong>一：推送分支：</strong></p>
<p>推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p>
<pre><code>使用命令 git push origin master
</code></pre><p>比如我现在的github上的readme.txt代码如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/d4751261d0739e26382cdf95769521e9.jpg" alt=""></p>
<p>本地的readme.txt代码如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/8ea73f12aeb1557e2a5d3d06216ecd9c.jpg" alt=""></p>
<p>现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/eeed16637e418f1f8852cef6ac736f29.jpg" alt=""></p>
<p>我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/cdf10c8c02e75aa7996747219e2c0d83.jpg" alt=""></p>
<p>可以看到<br>推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git<br>push origin dev</p>
<p>那么一般情况下，那些分支要推送呢？</p>
<ol>
<li><p>master分支是主分支，因此要时刻与远程同步。</p>
</li>
<li><p>一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。</p>
</li>
</ol>
<p><strong>二：抓取分支：</strong></p>
<p>多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH<br>key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2</p>
<p>但是我首先要把dev分支也要推送到远程去，如下</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/974c96713c55582c0db69794c4429819.jpg" alt=""></p>
<p>接着进入testgit2目录，进行克隆远程的库到本地来，如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/3e9afd32df20d31dbf75626a5b34a9c8.jpg" alt=""></p>
<p>现在目录下生成有如下所示：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/c4151ad52bd956c5a7883f93e3690dce.jpg" alt=""></p>
<p>现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git<br>checkout  –b dev origin/dev</p>
<p>现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。</p>
<p>如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/947e4d94262899a38e086689b109b1d8.jpg" alt=""></p>
<p>小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时，如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/a7f4f8fcc72bfcbbbdd4393058ad4121.jpg" alt=""></p>
<p>由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git<br>pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/b220501bdd87d216efd27ecb61f36349.jpg" alt=""></p>
<p><em>git<br>pull</em>也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：如下：</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/158b614840490bd9c4d88f70136a15bf.jpg" alt=""></p>
<p>这回<em>git pull</em>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<br>解决冲突完全一样。解决后，提交，再push：</p>
<p>我们可以先来看看readme.txt内容了。</p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/89bddf944a748371ddce3c29463cd9b7.jpg" alt=""></p>
<p>现在手动已经解决完了，我接在需要再提交，再push到远程库里面去。如下所示：  </p>
<p><img src="http://oc5bjv3gr.bkt.clouddn.com/04d6c30ea23d12350672e88cc0d10008.jpg" alt=""></p>
<p>因此：多人协作工作模式一般是这样的：</p>
<ol>
<li><p>首先，可以试图用git push origin branch-name推送自己的修改.</p>
</li>
<li><p>如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。</p>
</li>
<li><p>如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin<br>branch-name推送。</p>
</li>
</ol>
<p><strong>Git基本常用命令如下：</strong></p>
<p>   mkdir：         XX (创建一个空目录 XX指目录名)</p>
<p>   pwd：          显示当前目录的路径。</p>
<p>   git init          把当前的目录变成可以管理的git仓库，生成隐藏.git文件。</p>
<p>   git add XX       把xx文件添加到暂存区去。</p>
<p>   git commit –m “XX”  提交文件 –m 后面的是注释。</p>
<p>   git status        查看仓库状态</p>
<p>   git diff  XX      查看XX文件修改了那些内容</p>
<p>   git log          查看历史记录</p>
<p>   git reset  –hard HEAD\^ 或者 git reset  –hard HEAD~ 回退到上一个版本</p>
<pre><code>(如果想回退到100个版本，使用git reset –hard HEAD\~100 )
</code></pre><p>   cat XX         查看XX文件内容</p>
<p>   git reflog       查看历史记录的版本号id</p>
<p>   git checkout — XX  把XX文件在工作区的修改全部撤销。</p>
<p>   git rm XX          删除XX文件</p>
<p>   git remote add<br>origin <a href="https://github.com/tugenhua0707/testgit" target="_blank" rel="external">https://github.com/tugenhua0707/testgit</a> 关联一个远程库</p>
<p>   git push –u(第一次要用-u 以后不需要) origin master<br>把当前master分支推送到远程库</p>
<p>   git clone <a href="https://github.com/tugenhua0707/testgit" target="_blank" rel="external">https://github.com/tugenhua0707/testgit</a>  从远程库中克隆</p>
<p>   git checkout –b dev  创建dev分支 并切换到dev分支上</p>
<p>   git branch  查看当前所有的分支</p>
<p>   git checkout master 切换回master分支</p>
<p>   git merge dev    在当前的分支上合并dev分支</p>
<p>   git branch –d dev 删除dev分支</p>
<p>   git branch name  创建分支</p>
<p>   git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作</p>
<p>   git stash list 查看所有被隐藏的文件列表</p>
<p>   git stash apply 恢复被隐藏的文件，但是内容不删除</p>
<p>   git stash drop 删除文件</p>
<p>   git stash pop 恢复文件的同时 也删除文件</p>
<p>   git remote 查看远程库的信息</p>
<p>   git remote –v 查看远程库的详细信息</p>
<p>   git push origin master  Git会把master分支推送到远程库对应的远程分支上</p>
]]></content>
      
        <categories>
            
            <category> GIT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java23种设计模式]]></title>
      <url>/2017/06/29/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="java23种设计模式（Design-Patterns）"><a href="#java23种设计模式（Design-Patterns）" class="headerlink" title="java23种设计模式（Design Patterns）"></a><strong><center>java23种设计模式（Design Patterns）</center></strong></h1><blockquote>
<p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题，每种模式在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是它能被广泛应用的原因。本章系Java之美[从菜鸟到高手演变]系列之设计模式，我们会以理论与实践相结合的方式来进行本章的学习，希望广大程序爱好者，学好设计模式，做一个优秀的软件工程师！<br><a id="more"></a></p>
<h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a><strong>设计模式的分类</strong></h2><p>总体来说设计模式分为三大类：<br>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。<br>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。<br>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。<br>其实还有两类：并发型模式和线程池模式。用一个图片来整体描述一下：<br><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/DesignPatterns.jpg" alt="这里写图片描述"></p>
</blockquote>
<h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a><strong>设计模式的六大原则</strong></h2><h3 id="开闭原则（Open-Close-Principle）"><a href="#开闭原则（Open-Close-Principle）" class="headerlink" title="开闭原则（Open Close Principle）"></a><strong>开闭原则（Open Close Principle）</strong></h3><blockquote>
<p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>
<h3 id="里氏代换原则（Liskov-Substitution-Principle）"><a href="#里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="里氏代换原则（Liskov Substitution Principle）"></a><strong>里氏代换原则（Liskov Substitution Principle）</strong></h3><p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</p>
<h3 id="依赖倒转原则（Dependence-Inversion-Principle）"><a href="#依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒转原则（Dependence Inversion Principle）"></a><strong>依赖倒转原则（Dependence Inversion Principle）</strong></h3><p>这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。</p>
<h3 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface Segregation Principle）"></a><strong>接口隔离原则（Interface Segregation Principle）</strong></h3><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p>
<h3 id="迪米特法则（最少知道原则）（Demeter-Principle）"><a href="#迪米特法则（最少知道原则）（Demeter-Principle）" class="headerlink" title="迪米特法则（最少知道原则）（Demeter Principle）"></a><strong>迪米特法则（最少知道原则）（Demeter Principle）</strong></h3><p>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
<h3 id="合成复用原则（Composite-Reuse-Principle）"><a href="#合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="合成复用原则（Composite Reuse Principle）"></a><strong>合成复用原则（Composite Reuse Principle）</strong></h3><p>原则是尽量使用合成/聚合的方式，而不是使用继承。</p>
<h2 id="Java的23中设计模式"><a href="#Java的23中设计模式" class="headerlink" title="Java的23中设计模式"></a><strong>Java的23中设计模式</strong></h2><p>从这一块开始，我们详细介绍Java中23种设计模式的概念，应用场景等情况，并结合他们的特点及设计模式的原则进行分析。</p>
</blockquote>
<h3 id="工厂方法模式（Factory-Method）"><a href="#工厂方法模式（Factory-Method）" class="headerlink" title="工厂方法模式（Factory Method）"></a><strong>工厂方法模式（Factory Method）</strong></h3><h4 id="普通工厂模式"><a href="#普通工厂模式" class="headerlink" title="普通工厂模式"></a><strong>普通工厂模式</strong></h4><blockquote>
<p>就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。首先看下关系图：</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/factory-1.png" alt="factory"></p>
</blockquote>
<p>首先，创建二者的共同接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其次，创建实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is mailsender!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is sms sender!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，建工厂类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">(String type)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (<span class="string">"mail"</span>.equals(type)) &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"sms"</span>.equals(type)) &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            System.out.println(<span class="string">"请输入正确的类型!"</span>);  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        SendFactory factory = <span class="keyword">new</span> SendFactory();  </div><div class="line">        Sender sender = factory.produce(<span class="string">"sms"</span>);  </div><div class="line">        sender.Send();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>输出：this is sms sender!</strong></p>
<h4 id="多个工厂方法模式"><a href="#多个工厂方法模式" class="headerlink" title="多个工厂方法模式"></a><strong>多个工厂方法模式</strong></h4><blockquote>
<p>多个工厂方法模式,是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。关系图：</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/factory-2.jpg" alt="这里写图片描述"></p>
</blockquote>
<p>将上面的代码做下修改，改动下SendFactory类就行，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;  </div><div class="line">   <span class="function"><span class="keyword">public</span> Sender <span class="title">produceMail</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produceSms</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        SendFactory factory = <span class="keyword">new</span> SendFactory();  </div><div class="line">        Sender sender = factory.produceMail();  </div><div class="line">        sender.Send();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>输出：this is mailsender!</strong></p>
<h4 id="静态工厂方法模式"><a href="#静态工厂方法模式" class="headerlink" title="静态工厂方法模式"></a><strong>静态工厂方法模式</strong></h4><blockquote>
<p>静态工厂方法模式,将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">produceMail</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">produceSms</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;      </div><div class="line">        Sender sender = SendFactory.produceMail();  </div><div class="line">        sender.Send();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>输出：this is mailsender!</strong></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote>
<p>总体来说，工厂模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂方法模式。</p>
</blockquote>
<h3 id="抽象工厂模式（Abstract-Factory）"><a href="#抽象工厂模式（Abstract-Factory）" class="headerlink" title="抽象工厂模式（Abstract Factory）"></a><strong>抽象工厂模式（Abstract Factory）</strong></h3><blockquote>
<p>工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。因为抽象工厂不太好理解，我们先看看图，然后就和代码，就比较容易理解。</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/factory-3.jpg" alt="这里写图片描述"></p>
</blockquote>
<p>请看例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>两个实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is mailsender!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is sms sender!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>两个工厂类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendSmsFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span></span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">再提供一个接口：</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Provider</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Provider provider = <span class="keyword">new</span> SendMailFactory();  </div><div class="line">        Sender sender = provider.produce();  </div><div class="line">        sender.Send();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote>
<p>其实这个模式的好处就是，如果你现在想增加一个功能：发及时信息，则只需做一个实现类，实现Sender接口，同时做一个工厂类，实现Provider接口，就OK了，无需去改动现成的代码。这样做，拓展性较好！</p>
</blockquote>
<h3 id="单例模式（Singleton）"><a href="#单例模式（Singleton）" class="headerlink" title="单例模式（Singleton）"></a><strong>单例模式（Singleton）</strong></h3><blockquote>
<p>单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。这样的模式有几个好处：<br>1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。<br>2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。<br>3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。<br><strong>首先我们写一个简单的单例类：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 私有构造方法，防止被实例化 */</span>  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 静态工程方法，创建实例 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            instance = <span class="keyword">new</span> Singleton();  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>这个类可以满足基本要求，但是，像这样毫无线程安全保护的类，如果我们把它放入多线程的环境下，肯定就会出现问题了，如何解决？我们首先会想到对getInstance方法加synchronized关键字，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            instance = <span class="keyword">new</span> Singleton();  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> instance;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>但是，synchronized关键字锁住的是这个对象，这样的用法，在性能上会有所下降，因为每次调用getInstance()，都要对对象上锁，事实上，只有在第一次创建对象的时候需要加锁，之后就不需要了，所以，这个地方需要改进。我们改成下面这个：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            <span class="keyword">synchronized</span> (instance) &#123;  </div><div class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">                    instance = <span class="keyword">new</span> Singleton();  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> instance;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>似乎解决了之前提到的问题，将synchronized关键字加在了内部，也就是说当调用的时候是不需要加锁的，只有在instance为null，并创建对象的时候才需要加锁，性能有一定的提升。但是，这样的情况，还是有可能有问题的，看下面的情况：在Java指令中创建对象和赋值操作是分开进行的，也就是说instance = new Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先后顺序，也就是说有可能JVM会为新的Singleton实例分配空间，然后直接赋值给instance成员，然后再去初始化这个Singleton实例。这样就可能出错了，我们以A、B两个线程为例：<br>a&gt;A、B线程同时进入了第一个if判断<br>b&gt;A首先进入synchronized块，由于instance为null，所以它执行instance = new Singleton();<br>c&gt;由于JVM内部的优化机制，JVM先画出了一些分配给Singleton实例的空白内存，并赋值给instance成员（注意此时JVM没有开始初始化这个实例），然后A离开了synchronized块。<br>d&gt;B进入synchronized块，由于instance此时不是null，因此它马上离开了synchronized块并将结果返回给调用该方法的程序。<br>e&gt;此时B线程打算使用Singleton实例，却发现它没有被初始化，于是错误发生了。<br>所以程序还是有可能发生错误，其实程序在运行过程是很复杂的，从这点我们就可以看出，尤其是在写多线程环境下的程序更有难度，有挑战性。我们对该程序做进一步优化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span></span>&#123;           </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();           </div><div class="line">    &#125;           </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;           </div><div class="line">    <span class="keyword">return</span> SingletonFactory.instance;           </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实际情况是，单例模式使用内部类来维护单例的实现，JVM内部的机制能够保证当一个类被加载的时候，这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候，JVM能够帮我们保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕，这样我们就不用担心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制，这样就解决了低性能问题。这样我们暂时总结一个完美的单例模式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 私有构造方法，防止被实例化 */</span>  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 此处使用一个内部类来维护单例 */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span> </span>&#123;  </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 获取实例 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> SingletonFactory.instance;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> getInstance();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实说它完美，也不一定，如果在构造函数中抛出异常，实例将永远得不到创建，也会出错。所以说，十分完美的东西是没有的，我们只能根据实际情况，选择最适合自己应用场景的实现方法。也有人这样实现：因为我们只需要在创建类的时候进行同步，所以只要将创建和getInstance()分开，单独为创建加synchronized关键字，也是可以的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonTest instance = <span class="keyword">null</span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncInit</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            instance = <span class="keyword">new</span> SingletonTest();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonTest <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            syncInit();  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>考虑性能的话，整个程序只需创建一次实例，所以性能也不会有什么影响。<br><strong>补充：采用”影子实例”的办法为单例对象的属性同步更新</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonTest instance = <span class="keyword">null</span>;  </div><div class="line">    <span class="keyword">private</span> Vector properties = <span class="keyword">null</span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> Vector <span class="title">getProperties</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> properties;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncInit</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            instance = <span class="keyword">new</span> SingletonTest();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonTest <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            syncInit();  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateProperties</span><span class="params">()</span> </span>&#123;  </div><div class="line">        SingletonTest shadow = <span class="keyword">new</span> SingletonTest();  </div><div class="line">        properties = shadow.getProperties();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote>
<p>通过单例模式的学习告诉我们：<br>1、单例模式理解起来简单，但是具体实现起来还是有一定的难度。<br>2、synchronized关键字锁定的是对象，在用的时候，一定要在恰当的地方使用（注意需要使用锁的对象和过程，可能有的时候并不是整个对象及整个过程都需要锁）。<br>到这儿，单例模式基本已经讲完了，结尾处，笔者突然想到另一个问题，就是采用类的静态方法，实现单例模式的效果，也是可行的，此处二者有什么不同？<br>首先，静态类不能实现接口。（从类的角度说是可以的，但是那样就破坏了静态了。因为接口中不允许有static修饰的方法，所以即使实现了也是非静态的）<br>其次，单例可以被延迟初始化，静态类一般在第一次加载是初始化。之所以延迟加载，是因为有些类比较庞大，所以延迟加载有助于提升性能。<br>再次，单例类可以被继承，他的方法可以被覆写。但是静态类内部方法都是static，无法被覆写。<br>最后一点，单例类比较灵活，毕竟从实现上只是一个普通的Java类，只要满足单例的基本需求，你可以在里面随心所欲的实现一些其它功能，但是静态类不行。从上面这些概括中，基本可以看出二者的区别，但是，从另一方面讲，我们上面最后实现的那个单例模式，内部就是用一个静态类来实现的，所以，二者有很大的关联，只是我们考虑问题的层面不同罢了。两种思想的结合，才能造就出完美的解决方案，就像HashMap采用数组+链表来实现一样，其实生活中很多事情都是这样，单用不同的方法来处理问题，总是有优点也有缺点，最完美的方法是，结合各个方法的优点，才能最好的解决问题！</p>
<h3 id="建造者模式（Builder）"><a href="#建造者模式（Builder）" class="headerlink" title="建造者模式（Builder）"></a><strong>建造者模式（Builder）</strong></h3><p>工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创建复合对象，所谓复合对象就是指某个类具有不同的属性，其实建造者模式就是前面抽象工厂模式和最后的Test结合起来得到的。我们看一下代码：<br>还和前面一样，一个Sender接口，两个实现类MailSender和SmsSender。最后，建造者类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> List&lt;Sender&gt; list = <span class="keyword">new</span> ArrayList&lt;Sender&gt;();  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceMailSender</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;  </div><div class="line">            list.add(<span class="keyword">new</span> MailSender());  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceSmsSender</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++)&#123;  </div><div class="line">            list.add(<span class="keyword">new</span> SmsSender());  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Builder builder = <span class="keyword">new</span> Builder();  </div><div class="line">        builder.produceMailSender(<span class="number">10</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从这点看出，建造者模式将很多功能集成到一个类里，这个类可以创造出比较复杂的东西。所以与工程模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建符合对象，多个部分。因此，是选择工厂模式还是建造者模式，依实际情况而定。</p>
<h3 id="原型模式（Prototype）"><a href="#原型模式（Prototype）" class="headerlink" title="原型模式（Prototype）"></a><strong>原型模式（Prototype）</strong></h3><blockquote>
<p>原型模式虽然是创建型的模式，但是与工程模式没有关系，从名字即可看出，该模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。本小结会通过对象的复制，进行讲解。在Java中，复制对象是通过clone()实现的，先创建一个原型类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;  </div><div class="line">        Prototype proto = (Prototype) <span class="keyword">super</span>.clone();  </div><div class="line">        <span class="keyword">return</span> proto;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h4><blockquote>
<p>很简单，一个原型类，只需要实现Cloneable接口，覆写clone方法，此处clone方法可以改成任意的名称，因为Cloneable接口是个空接口，你可以任意定义实现类的方法名，如cloneA或者cloneB，因为此处的重点是super.clone()这句话，super.clone()调用的是Object的clone()方法，而在Object类中，clone()是native的，具体怎么实现，我会在另一篇文章中，关于解读Java中本地方法的调用，此处不再深究。在这儿，我将结合对象的浅复制和深复制来说一下，首先需要了解对象深、浅复制的概念：<br>浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。<br>深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，就是深复制进行了完全彻底的复制，而浅复制不彻底。<br>此处，写一个深浅复制的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;  </div><div class="line">    <span class="keyword">private</span> String string;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> SerializableObject obj;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 浅复制 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;  </div><div class="line">        Prototype proto = (Prototype) <span class="keyword">super</span>.clone();  </div><div class="line">        <span class="keyword">return</span> proto;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 深复制 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;  </div><div class="line">  </div><div class="line">        <span class="comment">/* 写入当前对象的二进制流 */</span>  </div><div class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();  </div><div class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);  </div><div class="line">        oos.writeObject(<span class="keyword">this</span>);  </div><div class="line">  </div><div class="line">        <span class="comment">/* 读出二进制流产生的新对象 */</span>  </div><div class="line">        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());  </div><div class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);  </div><div class="line">        <span class="keyword">return</span> ois.readObject();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> string;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setString</span><span class="params">(String string)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.string = string;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> SerializableObject <span class="title">getObj</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> obj;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(SerializableObject obj)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.obj = obj;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerializableObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>要实现深复制，需要采用流的形式读入当前对象的二进制输入，再写出二进制数据对应的对象。<br>我们接着讨论设计模式，上篇文章我讲完了5种创建型模式，这章开始，我将讲下7种结构型模式：适配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中对象的适配器模式是各种模式的起源，我们看下面的图：</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/model.png" alt="模式"></p>
<h3 id="适配器模式（Adapter）"><a href="#适配器模式（Adapter）" class="headerlink" title="适配器模式（Adapter）"></a><strong>适配器模式（Adapter）</strong></h3><blockquote>
<p>适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。首先，我们来看看类的适配器模式，先看类图：<br><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Adapter.jpg" alt="适配器模式"></p>
</blockquote>
<p>核心思想就是：有一个Source类，拥有一个方法，待适配，目标接口时Targetable，通过Adapter类，将Source的功能扩展到Targetable里，看代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is original method!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Targetable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 与原类中的方法相同 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 新类的方法 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Targetable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is the targetable method!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Adapter类继承Source类，实现Targetable接口，下面是测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Targetable target = <span class="keyword">new</span> Adapter();  </div><div class="line">        target.method1();  </div><div class="line">        target.method2();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><strong>this is original method!</strong><br><strong>this is the targetable method!</strong><br>这样Targetable接口的实现类就具有了Source类的功能。</p>
<h4 id="对象的适配器模式"><a href="#对象的适配器模式" class="headerlink" title="对象的适配器模式"></a><strong>对象的适配器模式</strong></h4><blockquote>
<p>基本思路和类的适配器模式相同，只是将Adapter类作修改，这次不继承Source类，而是持有Source类的实例，以达到解决兼容性的问题。看图：<br><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Adapter-1.jpg" alt="这里写图片描述"></p>
</blockquote>
<p>只需要修改Adapter类的源码即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> <span class="keyword">implements</span> <span class="title">Targetable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Source source;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wrapper</span><span class="params">(Source source)</span></span>&#123;  </div><div class="line">        <span class="keyword">super</span>();  </div><div class="line">        <span class="keyword">this</span>.source = source;  </div><div class="line">    &#125;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is the targetable method!"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;  </div><div class="line">        source.method1();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Source source = <span class="keyword">new</span> Source();  </div><div class="line">        Targetable target = <span class="keyword">new</span> Wrapper(source);  </div><div class="line">        target.method1();  </div><div class="line">        target.method2();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>输出与第一种一样，只是适配的方法不同而已。</strong></p>
<h4 id="接口的适配器模式"><a href="#接口的适配器模式" class="headerlink" title="接口的适配器模式"></a><strong>接口的适配器模式</strong></h4><blockquote>
<p>接口的适配器是这样的：有时我们写的一个接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要某一些，此处为了解决这个问题，我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接口，实现了所有的方法，而我们不和原始的接口打交道，只和该抽象类取得联系，所以我们写一个类，继承该抽象类，重写我们需要的方法就行。看一下类图：<br><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Adapter-3.jpg" alt="Adapter"></p>
</blockquote>
<p>这个很好理解，在实际开发中，我们也常会遇到这种接口中定义了太多的方法，以致于有时我们在一些实现类中并不是都需要。看代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>抽象类Wrapper2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper2</span> <span class="keyword">implements</span> <span class="title">Sourceable</span></span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceSub1</span> <span class="keyword">extends</span> <span class="title">Wrapper2</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"the sourceable interface's first Sub1!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceSub2</span> <span class="keyword">extends</span> <span class="title">Wrapper2</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"the sourceable interface's second Sub2!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Sourceable source1 = <span class="keyword">new</span> SourceSub1();  </div><div class="line">        Sourceable source2 = <span class="keyword">new</span> SourceSub2();  </div><div class="line">          </div><div class="line">        source1.method1();  </div><div class="line">        source1.method2();  </div><div class="line">        source2.method1();  </div><div class="line">        source2.method2();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试输出：<br><strong>the sourceable interface’s first Sub1!</strong><br><strong>the sourceable interface’s second Sub2!</strong></p>
<h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote>
<p>讲了这么多，总结一下三种适配器模式的应用场景：<br>类的适配器模式：当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可。<br>对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。<br>接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所有方法，我们写别的类的时候，继承抽象类即可。</p>
</blockquote>
<h3 id="7、装饰模式（Decorator）"><a href="#7、装饰模式（Decorator）" class="headerlink" title="7、装饰模式（Decorator）"></a><strong>7、装饰模式（Decorator）</strong></h3><blockquote>
<p>顾名思义，装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例，关系图如下：<br><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Decotator.jpg" alt="装饰者模式"></p>
</blockquote>
<p>Source类是被装饰类，Decorator类是一个装饰类，可以为Source类动态的添加一些功能，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"the original method!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Sourceable source;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Sourceable source)</span></span>&#123;  </div><div class="line">        <span class="keyword">super</span>();  </div><div class="line">        <span class="keyword">this</span>.source = source;  </div><div class="line">    &#125;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"before decorator!"</span>);  </div><div class="line">        source.method();  </div><div class="line">        System.out.println(<span class="string">"after decorator!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Sourceable source = <span class="keyword">new</span> Source();  </div><div class="line">        Sourceable obj = <span class="keyword">new</span> Decorator(source);  </div><div class="line">        obj.method();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><strong>before decorator!</strong><br><strong>the original method!</strong><br><strong>after decorator!</strong></p>
<h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote>
<p>装饰器模式的应用场景：<br>1、需要扩展一个类的功能。<br>2、动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）<br>缺点：产生过多相似的对象，不易排错！</p>
</blockquote>
<h3 id="代理模式（Proxy）"><a href="#代理模式（Proxy）" class="headerlink" title="代理模式（Proxy）"></a><strong>代理模式（Proxy）</strong></h3><blockquote>
<p>其实每个模式名称就表明了该模式的作用，代理模式就是多一个代理类出来，替原对象进行一些操作，比如我们在租房子的时候回去找中介，为什么呢？因为你对该地区房屋的信息掌握的不够全面，希望找一个更熟悉的人去帮你做，此处的代理就是这个意思。再如我们有的时候打官司，我们需要请律师，因为律师在法律方面有专长，可以替我们进行操作，表达我们的想法。先来看看关系图：</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Proxy.jpg" alt="Proxy模式"></p>
</blockquote>
<p>根据上文的阐述，代理模式就比较容易的理解了，我们看下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"the original method!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Source source;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">super</span>();  </div><div class="line">        <span class="keyword">this</span>.source = <span class="keyword">new</span> Source();  </div><div class="line">    &#125;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </div><div class="line">        before();  </div><div class="line">        source.method();  </div><div class="line">        atfer();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">atfer</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"after proxy!"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"before proxy!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Sourceable source = <span class="keyword">new</span> Proxy();  </div><div class="line">        source.method();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><strong>before proxy!</strong><br><strong>the original method!</strong><br><strong>after proxy!</strong></p>
<h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote>
<p>代理模式的应用场景：<br>如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：<br>1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。<br>2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。<br>使用代理模式，可以将功能划分的更加清晰，有助于后期维护！</p>
</blockquote>
<h3 id="外观模式（Facade）"><a href="#外观模式（Facade）" class="headerlink" title="外观模式（Facade）"></a><strong>外观模式（Facade）</strong></h3><blockquote>
<p>外观模式是为了解决类与类之家的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，该模式中没有涉及到接口，看下类图：（我们以一个计算机的启动过程为例）</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/Facade.jpg" alt="http://os94ofsac.bkt.clouddn.com/Facade.jpg"></p>
</blockquote>
<p>我们先看下实现类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CPU</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"cpu startup!"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"cpu shutdown!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memory</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"memory startup!"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"memory shutdown!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Disk</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"disk startup!"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"disk shutdown!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> CPU cpu;  </div><div class="line">    <span class="keyword">private</span> Memory memory;  </div><div class="line">    <span class="keyword">private</span> Disk disk;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">()</span></span>&#123;  </div><div class="line">        cpu = <span class="keyword">new</span> CPU();  </div><div class="line">        memory = <span class="keyword">new</span> Memory();  </div><div class="line">        disk = <span class="keyword">new</span> Disk();  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"start the computer!"</span>);  </div><div class="line">        cpu.startup();  </div><div class="line">        memory.startup();  </div><div class="line">        disk.startup();  </div><div class="line">        System.out.println(<span class="string">"start computer finished!"</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;  </div><div class="line">        System.out.println(<span class="string">"begin to close the computer!"</span>);  </div><div class="line">        cpu.shutdown();  </div><div class="line">        memory.shutdown();  </div><div class="line">        disk.shutdown();  </div><div class="line">        System.out.println(<span class="string">"computer closed!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Computer computer = <span class="keyword">new</span> Computer();  </div><div class="line">        computer.startup();  </div><div class="line">        computer.shutdown();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：<br><strong>start the computer!</strong><br><strong>cpu startup!</strong><br><strong>memory startup!</strong><br><strong>disk startup!</strong><br><strong>start computer finished!</strong><br><strong>begin to close the computer!</strong><br><strong>cpu shutdown!</strong><br><strong>memory shutdown!</strong><br><strong>disk shutdown!</strong><br><strong>computer closed!</strong><br>如果我们没有Computer类，那么，CPU、Memory、Disk他们之间将会相互持有实例，产生关系，这样会造成严重的依赖，修改一个类，可能会带来其他类的修改，这不是我们想要看到的，有了Computer类，他们之间的关系被放在了Computer类里，这样就起到了解耦的作用，这，就是外观模式！</p>
<h3 id="桥接模式（Bridge）"><a href="#桥接模式（Bridge）" class="headerlink" title="桥接模式（Bridge）"></a><strong>桥接模式（Bridge）</strong></h3><blockquote>
<p>桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：<strong>将抽象化与实现化解耦，使得二者可以独立变化</strong>，像我们常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了。我们来看看关系图：</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/Bridge.jpg" alt="http://os94ofsac.bkt.clouddn.com/Bridge.jpg"></p>
</blockquote>
<p>实现代码：<br>先定义接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceSub1</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is the first sub!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceSub2</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is the second sub!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义一个桥，持有Sourceable的一个实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Bridge</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> Sourceable source;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;  </div><div class="line">        source.method();  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> Sourceable <span class="title">getSource</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> source;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSource</span><span class="params">(Sourceable source)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.source = source;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBridge</span> <span class="keyword">extends</span> <span class="title">Bridge</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;  </div><div class="line">        getSource().method();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgeTest</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">          </div><div class="line">        Bridge bridge = <span class="keyword">new</span> MyBridge();  </div><div class="line">          </div><div class="line">        <span class="comment">/*调用第一个对象*/</span>  </div><div class="line">        Sourceable source1 = <span class="keyword">new</span> SourceSub1();  </div><div class="line">        bridge.setSource(source1);  </div><div class="line">        bridge.method();  </div><div class="line">          </div><div class="line">        <span class="comment">/*调用第二个对象*/</span>  </div><div class="line">        Sourceable source2 = <span class="keyword">new</span> SourceSub2();  </div><div class="line">        bridge.setSource(source2);  </div><div class="line">        bridge.method();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><strong>this is the first sub!</strong><br><strong>this is the second sub!</strong></p>
<blockquote>
<p>这样，就通过对Bridge类的调用，实现了对接口Sourceable的实现类SourceSub1和SourceSub2的调用。接下来我再画个图，大家就应该明白了，因为这个图是我们JDBC连接的原理，有数据库学习基础的，一结合就都懂了。</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/bridge-1.jpg" alt="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/bridge-1.jpg"></p>
</blockquote>
<h3 id="组合模式（Composite）"><a href="#组合模式（Composite）" class="headerlink" title="组合模式（Composite）"></a><strong>组合模式（Composite）</strong></h3><blockquote>
<p>组合模式有时又叫<strong>部分-整体模式</strong>在处理类似树形结构的问题时比较方便，看看关系图：</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Composite.jpg" alt="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Composite.jpg"></p>
</blockquote>
<p>直接来看代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> String name;  </div><div class="line">    <span class="keyword">private</span> TreeNode parent;  </div><div class="line">    <span class="keyword">private</span> Vector&lt;TreeNode&gt; children = <span class="keyword">new</span> Vector&lt;TreeNode&gt;();  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(String name)</span></span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> name;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.name = name;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getParent</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> parent;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(TreeNode parent)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.parent = parent;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="comment">//添加孩子节点  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(TreeNode node)</span></span>&#123;  </div><div class="line">        children.add(node);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="comment">//删除孩子节点  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(TreeNode node)</span></span>&#123;  </div><div class="line">        children.remove(node);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="comment">//取得孩子节点  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;TreeNode&gt; <span class="title">getChildren</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> children.elements();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span> </span>&#123;  </div><div class="line">  </div><div class="line">    TreeNode root = <span class="keyword">null</span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tree</span><span class="params">(String name)</span> </span>&#123;  </div><div class="line">        root = <span class="keyword">new</span> TreeNode(name);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Tree tree = <span class="keyword">new</span> Tree(<span class="string">"A"</span>);  </div><div class="line">        TreeNode nodeB = <span class="keyword">new</span> TreeNode(<span class="string">"B"</span>);  </div><div class="line">        TreeNode nodeC = <span class="keyword">new</span> TreeNode(<span class="string">"C"</span>);  </div><div class="line">          </div><div class="line">        nodeB.add(nodeC);  </div><div class="line">        tree.root.add(nodeB);  </div><div class="line">        System.out.println(<span class="string">"build the tree finished!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote>
<p>使用场景：将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，数等。</p>
</blockquote>
<h3 id="享元模式（Flyweight）"><a href="#享元模式（Flyweight）" class="headerlink" title="享元模式（Flyweight）"></a><strong>享元模式（Flyweight）</strong></h3><blockquote>
<p>享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Flyweight.jpg" alt="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Flyweight.jpg"></p>
<p>FlyWeightFactory负责创建和管理享元单元，当一个客户端请求时，工厂需要检查当前对象池中是否有符合条件的对象，如果有，就返回已经存在的对象，如果没有，则创建一个新对象，FlyWeight是超类。一提到共享池，我们很容易联想到Java里面的JDBC连接池，想想每个连接的特点，我们不难总结出：适用于作共享的一些个对象，他们有一些共有的属性，就拿数据库连接池来说，url、driverClassName、username、password及dbname，这些属性对于每个连接来说都是一样的，所以就适合用享元模式来处理，建一个工厂类，将上述类似属性作为内部数据，其它的作为外部数据，在方法调用时，当做参数传进来，这样就节省了空间，减少了实例的数量。</p>
</blockquote>
<p>看个例子：<br>看下数据库连接池的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> Vector&lt;Connection&gt; pool;  </div><div class="line">      </div><div class="line">    <span class="comment">/*公有属性*/</span>  </div><div class="line">    <span class="keyword">private</span> String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;  </div><div class="line">    <span class="keyword">private</span> String username = <span class="string">"root"</span>;  </div><div class="line">    <span class="keyword">private</span> String password = <span class="string">"root"</span>;  </div><div class="line">    <span class="keyword">private</span> String driverClassName = <span class="string">"com.mysql.jdbc.Driver"</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> poolSize = <span class="number">100</span>;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectionPool instance = <span class="keyword">null</span>;  </div><div class="line">    Connection conn = <span class="keyword">null</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">/*构造方法，做一些初始化工作*/</span>  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ConnectionPool</span><span class="params">()</span> </span>&#123;  </div><div class="line">        pool = <span class="keyword">new</span> Vector&lt;Connection&gt;(poolSize);  </div><div class="line">  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poolSize; i++) &#123;  </div><div class="line">            <span class="keyword">try</span> &#123;  </div><div class="line">                Class.forName(driverClassName);  </div><div class="line">                conn = DriverManager.getConnection(url, username, password);  </div><div class="line">                pool.add(conn);  </div><div class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;  </div><div class="line">                e.printStackTrace();  </div><div class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </div><div class="line">                e.printStackTrace();  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 返回连接到连接池 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;  </div><div class="line">        pool.add(conn);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 返回连接池中的一个数据库连接 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (pool.size() &gt; <span class="number">0</span>) &#123;  </div><div class="line">            Connection conn = pool.get(<span class="number">0</span>);  </div><div class="line">            pool.remove(conn);  </div><div class="line">            <span class="keyword">return</span> conn;  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>通过连接池的管理，实现了数据库连接的共享，不需要每一次都重新创建连接，节省了数据库重新创建的开销，提升了系统的性能！</p>
</blockquote>
<h3 id="13、策略模式（strategy）"><a href="#13、策略模式（strategy）" class="headerlink" title="13、策略模式（strategy）"></a><strong>13、策略模式（strategy）</strong></h3><blockquote>
<p>策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。需要设计一个接口，为一系列实现类提供统一的方法，多个实现类实现该接口，设计一个抽象类（可有可无，属于辅助类），提供辅助函数，关系图如下：</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/strategy.jpg" alt="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/strategy.jpg"></p>
</blockquote>
<p>图中ICalculator提供同意的方法，<br>AbstractCalculator是辅助类，提供辅助方法，接下来，依次实现下每个类：<br>首先统一接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Public <span class="class"><span class="keyword">interface</span> <span class="title">ICalculator</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>辅助类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] split(String exp,String opt)&#123;  </div><div class="line">        String array[] = exp.split(opt);  </div><div class="line">        <span class="keyword">int</span> arrayInt[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];  </div><div class="line">        arrayInt[<span class="number">0</span>] = Integer.parseInt(array[<span class="number">0</span>]);  </div><div class="line">        arrayInt[<span class="number">1</span>] = Integer.parseInt(array[<span class="number">1</span>]);  </div><div class="line">        <span class="keyword">return</span> arrayInt;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>三个实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title">ICalculator</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> arrayInt[] = split(exp,<span class="string">"\\+"</span>);  </div><div class="line">        <span class="keyword">return</span> arrayInt[<span class="number">0</span>]+arrayInt[<span class="number">1</span>];  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title">ICalculator</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> arrayInt[] = split(exp,<span class="string">"-"</span>);  </div><div class="line">        <span class="keyword">return</span> arrayInt[<span class="number">0</span>]-arrayInt[<span class="number">1</span>];  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Multiply</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title">ICalculator</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> arrayInt[] = split(exp,<span class="string">"\\*"</span>);  </div><div class="line">        <span class="keyword">return</span> arrayInt[<span class="number">0</span>]*arrayInt[<span class="number">1</span>];  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单的测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        String exp = <span class="string">"2+8"</span>;  </div><div class="line">        ICalculator cal = <span class="keyword">new</span> Plus();  </div><div class="line">        <span class="keyword">int</span> result = cal.calculate(exp);  </div><div class="line">        System.out.println(result);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<strong>10</strong></p>
<h4 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote>
<p>策略模式的决定权在用户，系统本身提供不同算法的实现，新增或者删除算法，对各种算法做封装。因此，策略模式多用在算法决策系统中，外部用户只需要决定用哪个算法即可。</p>
</blockquote>
<h3 id="模板方法模式（Template-Method）"><a href="#模板方法模式（Template-Method）" class="headerlink" title="模板方法模式（Template Method）"></a><strong>模板方法模式（Template Method）</strong></h3><blockquote>
<p>解释一下模板方法模式，就是指：一个抽象类中，有一个主方法，再定义1…n个方法，可以是抽象的，也可以是实际的方法，定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类的调用，先看个关系图：</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Template%20.jpg" alt="这里写图片描述"></p>
<p>就是在AbstractCalculator类中定义一个主方法calculate，calculate()调用spilt()等，Plus和Minus分别继承AbstractCalculator类，通过对AbstractCalculator的调用实现对子类的调用。</p>
</blockquote>
<p>看下面的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="comment">/*主方法，实现对本类其它方法的调用*/</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp,String opt)</span></span>&#123;  </div><div class="line">        <span class="keyword">int</span> array[] = split(exp,opt);  </div><div class="line">        <span class="keyword">return</span> calculate(array[<span class="number">0</span>],array[<span class="number">1</span>]);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="comment">/*被子类重写的方法*/</span>  </div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;  </div><div class="line">      </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] split(String exp,String opt)&#123;  </div><div class="line">        String array[] = exp.split(opt);  </div><div class="line">        <span class="keyword">int</span> arrayInt[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];  </div><div class="line">        arrayInt[<span class="number">0</span>] = Integer.parseInt(array[<span class="number">0</span>]);  </div><div class="line">        arrayInt[<span class="number">1</span>] = Integer.parseInt(array[<span class="number">1</span>]);  </div><div class="line">        <span class="keyword">return</span> arrayInt;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> num1 + num2;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        String exp = <span class="string">"8+8"</span>;  </div><div class="line">        AbstractCalculator cal = <span class="keyword">new</span> Plus();  </div><div class="line">        <span class="keyword">int</span> result = cal.calculate(exp, <span class="string">"\\+"</span>);  </div><div class="line">        System.out.println(result);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote>
<p>我跟踪下这个小程序的执行过程：首先将exp和”\+”做参数，调用AbstractCalculator类里的calculate(String,String)方法，在calculate(String,String)里调用同类的split()，之后再调用calculate(int ,int)方法，从这个方法进入到子类中，执行完return num1 + num2后，将值返回到AbstractCalculator类，赋给result，打印出来。正好验证了我们开头的思路。</p>
</blockquote>
<h3 id="观察者模式（Observer）"><a href="#观察者模式（Observer）" class="headerlink" title="观察者模式（Observer）"></a><strong>观察者模式（Observer）</strong></h3><blockquote>
<p>包括这个模式在内的接下来的四个模式，都是类和类之间的关系，不涉及到继承，学的时候应该 记得归纳，记得本文最开始的那个图。观察者模式很好理解，类似于邮件订阅和RSS订阅，当我们浏览一些博客或wiki时，经常会看到RSS图标，就这的意思是，当你订阅了该文章，如果后续有更新，会及时通知你。其实，简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到通知，并且随着变化！对象之间是一种一对多的关系。先来看看关系图：</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Observer.jpg" alt="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/java/Observer.jpg"></p>
</blockquote>
<p>我解释下这些类的作用：MySubject类就是我们的主对象，Observer1和Observer2是依赖于MySubject的对象，当MySubject变化时，Observer1和Observer2必然变化。AbstractSubject类中定义着需要监控的对象列表，可以对其进行修改：增加或删除被监控对象，且当MySubject变化时，负责通知在列表内存在的对象。我们看实现代码：<br>一个Observer接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>两个实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer1</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"observer1 has received!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer2</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"observer2 has received!"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Subject接口及实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="comment">/*增加观察者*/</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Observer observer)</span></span>;  </div><div class="line">      </div><div class="line">    <span class="comment">/*删除观察者*/</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Observer observer)</span></span>;  </div><div class="line">      </div><div class="line">    <span class="comment">/*通知所有的观察者*/</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;  </div><div class="line">      </div><div class="line">    <span class="comment">/*自身的操作*/</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; vector = <span class="keyword">new</span> Vector&lt;Observer&gt;();  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Observer observer)</span> </span>&#123;  </div><div class="line">        vector.add(observer);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Observer observer)</span> </span>&#123;  </div><div class="line">        vector.remove(observer);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;  </div><div class="line">        Enumeration&lt;Observer&gt; enumo = vector.elements();  </div><div class="line">        <span class="keyword">while</span>(enumo.hasMoreElements())&#123;  </div><div class="line">            enumo.nextElement().update();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySubject</span> <span class="keyword">extends</span> <span class="title">AbstractSubject</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"update self!"</span>);  </div><div class="line">        notifyObservers();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Subject sub = <span class="keyword">new</span> MySubject();  </div><div class="line">        sub.add(<span class="keyword">new</span> Observer1());  </div><div class="line">        sub.add(<span class="keyword">new</span> Observer2());  </div><div class="line">          </div><div class="line">        sub.operation();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><strong>update self!</strong><br><strong>observer1 has received!</strong><br><strong>observer2 has received!</strong></p>
<blockquote>
<p>这些东西，其实不难，只是有些抽象，不太容易整体理解，建议读者：根据关系图，新建项目，自己写代码（或者参考我的代码）,按照总体思路走一遍，这样才能体会它的思想，理解起来容易！ </p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git常用命令]]></title>
      <url>/2017/06/29/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="Git-是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。"><a href="#Git-是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。" class="headerlink" title="Git 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。"></a><strong>Git 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。</strong></h2><p>Git常用操作命令：</p>
<h3 id="远程仓库相关命令"><a href="#远程仓库相关命令" class="headerlink" title="远程仓库相关命令"></a><strong>远程仓库相关命令</strong></h3><a id="more"></a>
<p>检出仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git://github.com/jquery/jquery.git</div></pre></td></tr></table></figure></p>
<p>查看远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div></pre></td></tr></table></figure></p>
<p>添加远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add [name] [url]</div></pre></td></tr></table></figure></p>
<p>删除远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote rm [name]</div></pre></td></tr></table></figure></p>
<p>修改远程仓库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote <span class="built_in">set</span>-url --push [name] [newUrl]</div></pre></td></tr></table></figure>
<p>拉取远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull [remoteName] [localBranchName]</div></pre></td></tr></table></figure></p>
<p>推送远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push [remoteName] [localBranchName]</div></pre></td></tr></table></figure></p>
<p><strong>如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> push origin <span class="built_in">test</span>:master // 提交本地<span class="built_in">test</span>分支作为远程的master分支</div><div class="line"></div><div class="line"><span class="variable">$git</span> push origin <span class="built_in">test</span>:<span class="built_in">test</span>  // 提交本地<span class="built_in">test</span>分支作为远程的<span class="built_in">test</span>分支</div></pre></td></tr></table></figure></p>
<h3 id="分支-branch-操作相关命令"><a href="#分支-branch-操作相关命令" class="headerlink" title="分支(branch)操作相关命令"></a><strong>分支(branch)操作相关命令</strong></h3><p>查看本地分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure></p>
<p>查看远程分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -r</div></pre></td></tr></table></figure></p>
<p>创建本地分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch [name] //----注意新分支创建后不会自动切换为当前分支</div></pre></td></tr></table></figure></p>
<p>切换分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout [name]</div></pre></td></tr></table></figure></p>
<p>创建新分支并立即切换到新分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b [name]</div></pre></td></tr></table></figure></p>
<p>删除分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git branch -d [name] </div><div class="line"></div><div class="line">// -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</div><div class="line"> </div><div class="line">$ git merge [name] //----将名称为[name]的分支与当前分支合并</div></pre></td></tr></table></figure></p>
<p>创建远程分支(本地分支push到远程)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin [name]</div></pre></td></tr></table></figure></p>
<p>删除远程分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin :heads/[name] 或 $ gitpush origin :[name]</div></pre></td></tr></table></figure></p>
<p><strong>创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> symbolic-ref HEAD refs/heads/[name]</div><div class="line"><span class="variable">$rm</span> .git/index</div><div class="line"><span class="variable">$git</span> clean -fdx</div></pre></td></tr></table></figure>
<h2 id="版本-tag-操作相关命令"><a href="#版本-tag-操作相关命令" class="headerlink" title="版本(tag)操作相关命令"></a><strong>版本(tag)操作相关命令</strong></h2><p>查看版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag</div></pre></td></tr></table></figure></p>
<p>创建版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag [name]</div></pre></td></tr></table></figure></p>
<p>删除版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -d [name]</div></pre></td></tr></table></figure></p>
<p>查看远程版本：$ git tag -r<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -r</div></pre></td></tr></table></figure></p>
<p>创建远程版本(本地版本push到远程)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin [name]</div></pre></td></tr></table></figure></p>
<p>删除远程版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin :refs/tags/[name]</div></pre></td></tr></table></figure></p>
<p>合并远程仓库的tag到本地：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull origin --tags</div></pre></td></tr></table></figure></p>
<p>上传本地tag到远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin --tags</div></pre></td></tr></table></figure></p>
<p>创建带注释的tag：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -a [name] -m <span class="string">'yourMessage'</span></div></pre></td></tr></table></figure></p>
<h2 id="子模块-submodule-相关操作命令"><a href="#子模块-submodule-相关操作命令" class="headerlink" title="子模块(submodule)相关操作命令"></a><strong>子模块(submodule)相关操作命令</strong></h2><p>添加子模块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git submodule add [url] [path]</div></pre></td></tr></table></figure></p>
<p>如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs</div></pre></td></tr></table></figure></p>
<p>初始化子模块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git submodule init  //----只在首次检出仓库时运行一次就行</div></pre></td></tr></table></figure></p>
<p>更新子模块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git submodule update //----每次更新或切换分支后都需要运行一下</div></pre></td></tr></table></figure></p>
<p>删除子模块：（分4步走哦）</p>
<blockquote>
<p>$ git rm –cached [path]<br>  编辑“.gitmodules”文件，将子模块的相关配置节点删除掉<br>  编辑“ .git/config”文件，将子模块的相关配置节点删除掉<br>  手动删除子模块残留的目录</p>
</blockquote>
<h2 id="忽略一些文件、文件夹不提交"><a href="#忽略一些文件、文件夹不提交" class="headerlink" title="忽略一些文件、文件夹不提交"></a><strong>忽略一些文件、文件夹不提交</strong></h2><p>在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如<br>target<br>bin<br>*.db</p>
<hr>
<p><strong>Git 常用命令</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">git branch 查看本地所有分支</div><div class="line">git status 查看当前状态 </div><div class="line">git commit 提交 </div><div class="line">git branch -a 查看所有的分支</div><div class="line">git branch -r 查看本地所有分支</div><div class="line">git commit -am <span class="string">"init"</span> 提交并且加注释 </div><div class="line">git remote add origin git@192.168.1.119:ndshow</div><div class="line">git push origin master 将文件给推到服务器上 </div><div class="line">git remote show origin 显示远程库origin里的资源 </div><div class="line">git push origin master:develop</div><div class="line">git push origin master:hb-dev 将本地库与服务器上的库进行关联 </div><div class="line">git checkout --track origin/dev 切换到远程dev分支</div><div class="line">git branch -D master develop 删除本地库develop</div><div class="line">git checkout -b dev 建立一个新的本地分支dev</div><div class="line">git merge origin/dev 将分支dev与当前分支进行合并</div><div class="line">git checkout dev 切换到本地dev分支</div><div class="line">git remote show 查看远程库</div><div class="line">git add .</div><div class="line">git rm 文件名(包括路径) 从git中删除指定文件</div><div class="line">git <span class="built_in">clone</span> git://github.com/schacon/grit.git 从服务器上将代码给拉下来</div><div class="line">git config --list 看所有用户</div><div class="line">git ls-files 看已经被提交的</div><div class="line">git rm [file name] 删除一个文件</div><div class="line">git commit -a 提交当前repos的所有的改变</div><div class="line">git add [file name] 添加一个文件到git index</div><div class="line">git commit -v 当你用－v参数的时候可以看commit的差异</div><div class="line">git commit -m <span class="string">"This is the message describing the commit"</span> 添加commit信息</div><div class="line">git commit -a -a是代表add，把所有的change加到git index里然后再commit</div><div class="line">git commit -a -v 一般提交命令</div><div class="line">git <span class="built_in">log</span> 看你commit的日志</div><div class="line">git diff 查看尚未暂存的更新</div><div class="line">git rm a.a 移除文件(从暂存区和工作区中删除)</div><div class="line">git rm --cached a.a 移除文件(只从暂存区中删除)</div><div class="line">git commit -m <span class="string">"remove"</span> 移除文件(从Git中删除)</div><div class="line">git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)</div><div class="line">git diff --cached 或 $ git diff --staged 查看尚未提交的更新</div><div class="line">git stash push 将文件给push到一个临时空间中</div><div class="line">git stash pop 将文件从临时空间pop下来</div><div class="line"></div><div class="line">git remote add origin git@github.com:username/Hello-World.git</div><div class="line">git push origin master 将本地项目给提交到服务器中</div><div class="line"></div><div class="line">git pull 本地与服务器端同步</div><div class="line"></div><div class="line">git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。</div><div class="line">git push origin serverfix:awesomebranch</div><div class="line"></div><div class="line">git fetch 相当于是从远程获取最新版本到本地，不会自动merge</div><div class="line">git commit -a -m <span class="string">"log_message"</span> (-a是提交所有改动，-m是加入<span class="built_in">log</span>信息) 本地修改同步至服务器端 ：</div><div class="line">git branch branch_0.1 master 从主分支master创建branch_0.1分支</div><div class="line">git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0</div><div class="line">git checkout branch_1.0/master 切换到branch_1.0/master分支</div><div class="line">du -hs</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 学习整理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git常用命令]]></title>
      <url>/2017/06/29/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a><center><a href="http://wangzeqi.website"><strong>Linux常用命令</strong></a></center></h1><h2 id="列出目录内容"><a href="#列出目录内容" class="headerlink" title="列出目录内容"></a><strong>列出目录内容</strong></h2><p>ls -a：显示所有文件（包括隐藏文件）；</p>
<p>ls -l：显示详细信息；</p>
<p>ls -R：递归显示子目录结构；</p>
<p>ls -ld：显示目录和链接信息；</p>
<p>ctrl+r：历史记录中所搜命令（输入命令中的任意一个字符）；</p>
<p><a href="http://lib.csdn.net/base/linux" title="Linux知识库" target="_blank" rel="external">Linux</a>中以.开头的文件是隐藏文件；</p>
<p>pwd:显示当前目录<br><a id="more"></a></p>
<h2 id="查看文件的类型"><a href="#查看文件的类型" class="headerlink" title="查看文件的类型"></a><strong>查看文件的类型</strong></h2><p>file:查看文件的类型</p>
<h2 id="复制文件目录"><a href="#复制文件目录" class="headerlink" title="复制文件目录"></a><strong>复制文件目录</strong></h2><h3 id="cp：复制文件和目录-cp源文件（文件夹）目标文件（文件夹）"><a href="#cp：复制文件和目录-cp源文件（文件夹）目标文件（文件夹）" class="headerlink" title="cp：复制文件和目录 cp源文件（文件夹）目标文件（文件夹）"></a>cp：复制文件和目录 cp源文件（文件夹）目标文件（文件夹）</h3><p>常用参数：-r:递归复制整个目录树；-v：显示详细信息；</p>
<p>复制文件夹时要在cp命令后面加一个-r参数：</p>
<p>如：cp -r 源文件夹 目标文件夹</p>
<h3 id="touch-文件名：当文件不存在的时候，创建相应的文件；当文件存在的时候，修改文件的创建时间。"><a href="#touch-文件名：当文件不存在的时候，创建相应的文件；当文件存在的时候，修改文件的创建时间。" class="headerlink" title="touch+文件名：当文件不存在的时候，创建相应的文件；当文件存在的时候，修改文件的创建时间。"></a>touch+文件名：当文件不存在的时候，创建相应的文件；当文件存在的时候，修改文件的创建时间。</h3><p>功能：生成一个空文件或修改文件的存取/修改的时间记录值。</p>
<p>touch * ：将当前下的文件时间修改为系统的当前时间</p>
<p>touch -d 20040210 test：将test文件的日期改为20040210</p>
<p>touch abc　：若abc文件存在，则修改为系统的当前时间；若不存在，则生成一个为当前时间的空文件</p>
<h3 id="mv-文件-目标目录：移动或重命名文件或目录（如果指定文件名，则可以重命名文件）。可以将文件及目录移到另一目录下，或更改文件及目录的名称。"><a href="#mv-文件-目标目录：移动或重命名文件或目录（如果指定文件名，则可以重命名文件）。可以将文件及目录移到另一目录下，或更改文件及目录的名称。" class="headerlink" title="mv 文件 目标目录：移动或重命名文件或目录（如果指定文件名，则可以重命名文件）。可以将文件及目录移到另一目录下，或更改文件及目录的名称。"></a>mv 文件 目标目录：移动或重命名文件或目录（如果指定文件名，则可以重命名文件）。可以将文件及目录移到另一目录下，或更改文件及目录的名称。</h3><p>格式为：mv [参数]&lt;源文件或目录&gt; &lt;目标文件或目录&gt;</p>
<p>mva.txt ../：将a.txt文件移动上层目录</p>
<p>mva.txtb.txt：将a.txt改名为b.txt</p>
<p>mvdir2 ../：将dir2目录上移一层</p>
<h3 id="rm：删除文件；"><a href="#rm：删除文件；" class="headerlink" title="rm：删除文件；"></a>rm：删除文件；</h3><p>常用参数：-i：交互式 -r：递归的删除包括目录中的所有内容</p>
<h3 id="mkdir-文件夹名称：创建文件夹；"><a href="#mkdir-文件夹名称：创建文件夹；" class="headerlink" title="mkdir +文件夹名称：创建文件夹；"></a>mkdir +文件夹名称：创建文件夹；</h3><h3 id="rm-r-文件夹名称：删除文件夹（空文件夹和非空文件夹都可删除）"><a href="#rm-r-文件夹名称：删除文件夹（空文件夹和非空文件夹都可删除）" class="headerlink" title="rm -r +文件夹名称：删除文件夹（空文件夹和非空文件夹都可删除）"></a>rm -r +文件夹名称：删除文件夹（空文件夹和非空文件夹都可删除）</h3><p>rmdir 文件夹名称：删除文件夹（只能删除空文件夹）</p>
<h3 id="mkdir-p-dir1-dir2-：在当前目录下创建dir1目录，并在dir1目录下创建dir2目录，-也就是连续创建两个目录（dir1-和dir1-dir2）"><a href="#mkdir-p-dir1-dir2-：在当前目录下创建dir1目录，并在dir1目录下创建dir2目录，-也就是连续创建两个目录（dir1-和dir1-dir2）" class="headerlink" title="mkdir -p dir1/dir2 ：在当前目录下创建dir1目录，并在dir1目录下创建dir2目录， 也就是连续创建两个目录（dir1/和dir1/dir2）"></a>mkdir -p dir1/dir2 ：在当前目录下创建dir1目录，并在dir1目录下创建dir2目录， 也就是连续创建两个目录（dir1/和dir1/dir2）</h3><h3 id="rmdir-p-dir1-dir2：删除dir1下的dir2目录，若dir1目录为空也删除它"><a href="#rmdir-p-dir1-dir2：删除dir1下的dir2目录，若dir1目录为空也删除它" class="headerlink" title="rmdir -p dir1/dir2：删除dir1下的dir2目录，若dir1目录为空也删除它"></a>rmdir -p dir1/dir2：删除dir1下的dir2目录，若dir1目录为空也删除它</h3><h3 id="rm-：删除当前目录下的所有文件"><a href="#rm-：删除当前目录下的所有文件" class="headerlink" title="rm * ：删除当前目录下的所有文件"></a>rm * ：删除当前目录下的所有文件</h3><h3 id="f参数：强迫删除文件-rm-f-txt：强迫删除所有以后缀名为txt文件"><a href="#f参数：强迫删除文件-rm-f-txt：强迫删除所有以后缀名为txt文件" class="headerlink" title="-f参数：强迫删除文件 rm -f *.txt：强迫删除所有以后缀名为txt文件"></a>-f参数：强迫删除文件 rm -f *.txt：强迫删除所有以后缀名为txt文件</h3><p>1### -i参数：删除文件时询问</p>
<p>rm　-i * ：删除当前目录下的所有文件会有如下提示：</p>
<p>rm:backup:is a directory　　　 遇到目录会略过</p>
<p>rm: remove ‘myfiles.txt’ ? Y</p>
<p>删除文件时会询问,可按Y或N键表示允许或拒绝删除文件　</p>
<p>1### -r参数：递归删除（连子目录一同删除，这是一个相当常用的参数）</p>
<p>rm -rtest ：删除test目录（含test目录下所有文件和子目录）</p>
<p>rm -r *：删除所有文件（含当前目录所有文件、所有子目录和子目录下的文件） 一般在删除目录时r和f一起用，避免麻烦</p>
<p>rm -rftest ：强行删除、不加询问</p>
<p>1### grep：功能：在文件中搜索匹配的字符并进行输出</p>
<p>格式：grep[参数] &lt;要找的字串&gt; &lt;要寻找字 串的源文件&gt;</p>
<p>greplinux test.txt：搜索test.txt文件中字符串<a href="http://lib.csdn.net/base/linux" title="Linux知识库" target="_blank" rel="external">linux</a>并输出</p>
<p>1### ln命令</p>
<p>功能：在文件和目录之间建立链接</p>
<p>格式：ln [参数] &lt;源文件或目录&gt; &lt;目标文件或目录&gt;</p>
<p>链接分“软链接”和“硬链接”</p>
<h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接:"></a>软链接:</h4><p>ln-s /usr/share/do doc ：创建一个链接文件doc,并指向目录/usr/share/do</p>
<h4 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接:"></a>硬链接:</h4><p>ln /usr/share/test hard：创建一个硬链接文件hard，这时对于test文件对应 的存储区域来说，又多了一个文件指向它</p>
<h2 id="系统常用命令"><a href="#系统常用命令" class="headerlink" title="系统常用命令"></a><strong>系统常用命令</strong></h2><h3 id="显示命令"><a href="#显示命令" class="headerlink" title="显示命令"></a>显示命令</h3><p>date:查看或设置当前系统的时间：格式化显示时间：+%Y–%m–%d；</p>
<p>date -s:设置当前系统的时间</p>
<p>hwclock(clock)：显示硬件时钟时间(需要管理员权限)；</p>
<p>cal：查看日历</p>
<p>格式cal [参数] 月年</p>
<p>cal：显示当月的日历 cal4 2004 ：显示2004年4月的日历</p>
<p>cal- y 2003： 显示2003年的日历</p>
<p>uptime：查看系统运行时间</p>
<h3 id="输出查看命令"><a href="#输出查看命令" class="headerlink" title="输出查看命令"></a>输出查看命令</h3><p>echo：显示输入的内容 追加文件echo “liuyazhuang” &gt;&gt; liuyazhuang.txt</p>
<p>cat：显示文件内容,也可以将数个文件合并成一个文件。</p>
<p>格式：格式：cat[参数]&lt;文件名&gt;</p>
<p>cat test.txt：显示test.txt文件内容</p>
<p>cat test.txt| more ：逐页显示test.txt文件中的内容</p>
<p>cat test.txt&gt;&gt; test####  txt ：将test.txt的内容附加到test####  txt文件之后</p>
<p>cat test.txttest####  txt &gt;readme.txt　: 将test.txt和test####  txt文件合并成readme.txt 文件</p>
<p>head:显示文件的头几行（默认10行） -n:指定显示的行数格式：head -n 文件名</p>
<p>tail：显示文件的末尾几行（默认10行）-n：指定显示的行数 -f：追踪显示文件更新 （一般用于查看日志，命令不会退出，而是持续显示新加入的内容）</p>
<p>格式：格式：tail[参数]&lt;文件名&gt;</p>
<p>tail-10 /etc/passwd ：显示/etc/passwd/文件的倒数10行内容</p>
<p>tail+10 /etc/passwd ：显示/etc/passwd/文件从第10行开始到末尾的内容</p>
<p>more：用于翻页显示文件内容（只能向下翻页）</p>
<p>more命令是一般用于要显示的内容会超过一个画面长度的情况。为了避免画 面显示时瞬间就闪过去，用户可以使用more命令，让画面在显示满一页时暂停，此时可按空格健继续显示下一个画面，或按Q键停止显示。</p>
<p>ls -al |more：以长格形式显示etc目录下的文件列表，显示满一个画面便暂停，可 按空格键继续显示下一画面，或按Q键跳离</p>
<p>less：翻页显示文件内容（带上下翻页）按下上键分页，按q退出、‘</p>
<p>less命令的用法与more命令类似，也可以用来浏览超过一页的文件。所不同 的是less 命令除了可以按空格键向下显示文件外，还可以利用上下键来卷动文件。 当要结束浏览时，只要在less命令的提示符“：”下按Q键即可。</p>
<p>ls -al | less：以长格形式列出/etc目录中所有的内容。用户可按上下键浏览或按Q键跳离</p>
<h3 id="查看硬件信息"><a href="#查看硬件信息" class="headerlink" title="查看硬件信息"></a>查看硬件信息</h3><p>Ispci：查看PCI设备 -v：查看详细信息</p>
<p>Isusb：查看USB设备 -v：查看详细信息</p>
<p>Ismod：查看加载的模块(驱动)</p>
<h3 id="关机、重启"><a href="#关机、重启" class="headerlink" title="关机、重启"></a>关机、重启</h3><p>shutdown关闭、重启计算机</p>
<p>shutdown[关机、重启]时间 -h关闭计算机 -r：重启计算机</p>
<p>如：立即关机： shutdown -h now</p>
<p>10分钟后关机：shutdown -h +10</p>
<p>23:30分关机：shutdown -h 23:30</p>
<p>立即重启： shutdown -r now</p>
<p>poweroff：立即关闭计算机</p>
<p>reboot：立即重启计算机</p>
<h3 id="归档、压缩"><a href="#归档、压缩" class="headerlink" title="归档、压缩"></a>归档、压缩</h3><p>zip:压缩文件 zip liuyazhuang.zip myfile 格式为：“zip 压缩后的zip文件文件名”</p>
<p>unzip：解压文件 unzip liuyazhuang.zip</p>
<p>gzip：压缩文件 gzip 文件名</p>
<p>tar：归档文件</p>
<p>tar -cvf out.tar liuyazhuang 打包一个归档（将文件”liuyazhuang”打包成一个归档）</p>
<p>tar -xvf liuyazhuang.tar 释放一个归档（释放liuyazhuang.tar归档）</p>
<p>tar -cvzf backup.tar.gz/etc</p>
<p>-z参数将归档后的归档文件进行gzip压缩以减少大小。</p>
<p>-c：创建一个新tar文件</p>
<p>-v：显示运行过程的信息</p>
<p>-f：指定文件名</p>
<p>-z：调用gzip压缩命令进行压缩</p>
<p>-t：查看压缩文件的内容</p>
<p>-x：解开tar文件</p>
<p>tar -cvftest.tar *：将所有文件打包成test.tar,扩展名.tar需自行加上</p>
<p>tar -zcvftest.tar.gz *：将所有文件打包成test.tar,再用gzip命令压缩</p>
<p>tar-tf test.tar ：查看test.tar文件中包括了哪些文件</p>
<p>tar-xvf test.tar 将test.tar解开</p>
<p>tar-zxvf foo.tar.gz 解压缩</p>
<p>gzip各gunzip命令</p>
<p>gziptest.txt ：压缩文件时，不需要任何参数</p>
<p>gizp-l test.txt.gz：显示压缩率</p>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>locate：快速查找文件、文件夹： locate keyword</p>
<p>此命令需要预先建立<a href="http://lib.csdn.net/base/mysql" title="MySQL知识库" target="_blank" rel="external">数据库</a>，数据库默认每天更新一次，可用updatedb命令手工建立、更新数据库。</p>
<p>find查找位置查找参数</p>
<p>如：</p>
<p>find . -name <em>liuyazhuang</em> 查找当前目录下名称中含有”liuyazhuang”的文件</p>
<p>find / -name *.conf 查找根目录下（整个硬盘）下后缀为.conf的文件</p>
<p>find / -perm 777 查找所有权限是777的文件</p>
<p>find / -type d 返回根目录下所有的目录</p>
<p>find . -name “a*”-exec ls -l {} \;</p>
<p>find功能：用来寻找文件或目录。</p>
<p>格式：find [&lt;路径&gt;] [匹配条件]</p>
<p>find / -name httpd.conf 搜索系统根目录下名为httpd.conf的文件</p>
<h3 id="ctrl-c-终止当前的命令"><a href="#ctrl-c-终止当前的命令" class="headerlink" title="ctrl+c :终止当前的命令"></a>ctrl+c :终止当前的命令</h3><h3 id="who或w命令"><a href="#who或w命令" class="headerlink" title="who或w命令"></a>who或w命令</h3><p>功能：查看当前系统中有哪些用户登录</p>
<p>格式：who/w[参数]</p>
<h3 id="dmesg命令-功能：显示系统诊断信息、操作系统版本号、物理内存的大小以及其它信息"><a href="#dmesg命令-功能：显示系统诊断信息、操作系统版本号、物理内存的大小以及其它信息" class="headerlink" title="dmesg命令 功能：显示系统诊断信息、操作系统版本号、物理内存的大小以及其它信息"></a>dmesg命令 功能：显示系统诊断信息、<a href="http://lib.csdn.net/base/operatingsystem" title="操作系统知识库" target="_blank" rel="external">操作系统</a>版本号、物理内存的大小以及其它信息</h3><h3 id="df命令-功能：用于查看文件系统的各个分区的占用情况"><a href="#df命令-功能：用于查看文件系统的各个分区的占用情况" class="headerlink" title="df命令 功能：用于查看文件系统的各个分区的占用情况"></a>df命令 功能：用于查看文件系统的各个分区的占用情况</h3><p>1### du命令</p>
<p>功能：查看某个目录中各级子目录所使用的硬盘空间数</p>
<p>格式：du [参数] &lt;目录名&gt;</p>
<p>1### free命令</p>
<p>功能：用于查看系统内存，虚拟内存（交换空间）的大小占用情况</p>
<h2 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a><strong>VIM</strong></h2><p>VIM是一款功能强大的命令行文本编辑器，在Linux中通过vim命令可以启动vim编辑器。</p>
<p>一般使用vim + 目标文件路径 的形式使用vim</p>
<p>如果目标文件存在，则vim打开目标文件，如果目标文件不存在，则vim新建并打开该文件</p>
<p>:q：退出vim编辑器</p>
<p>VIM模式</p>
<p>vim拥有三种模式</p>
<p>（1）命令模式（常规模式）</p>
<p>vim启动后，默认进入命令模式，任何模式都可以通过esc键回到命令模式（可以多按几次），命令模式下可以键入不同的命令完成选择、复制、粘贴、撤销等操作。</p>
<p>命名模式常用命令如下：</p>
<p>i : 在光标前插入文本；</p>
<p>o:在当前行的下面插入新行；</p>
<p>dd:删除整行；</p>
<p>yy：将当前行的内容放入缓冲区（复制当前行）</p>
<p>n+yy :将n行的内容放入缓冲区（复制n行）</p>
<p>p:将缓冲区中的文本放入光标后（粘贴）</p>
<p>u：撤销上一个操作</p>
<p>r:替换当前字符</p>
<p>/ 查找关键字</p>
<p>（2）插入模式</p>
<p>在命令模式下按 “ i “键，即可进入插入模式，在插入模式可以输入编辑文本内容，使用esc键可以返回命令模式。</p>
<p>（3）ex模式</p>
<p>在命令模式中按” : “键可以进入ex模式，光标会移动到底部，在这里可以保存修改或退出vim.</p>
<p>ext模式常用命令如下：</p>
<p>:w ：保存当前的修改</p>
<p>:q ：退出</p>
<p>:q! ：强制退出，保存修改</p>
<p>:x :保存并退出，相当于:wq</p>
<p>:set number 显示行号</p>
<p>:! 系统命令 执行一个系统命令并显示结果</p>
<p>:sh ：切换到命令行，使用ctrl+d切换回vim</p>
<h2 id="软件包管理命令-RPM"><a href="#软件包管理命令-RPM" class="headerlink" title="软件包管理命令(RPM)"></a><strong>软件包管理命令(RPM)</strong></h2><h3 id="软件包的安装"><a href="#软件包的安装" class="headerlink" title="软件包的安装"></a>软件包的安装</h3><p>使用RPM命令的安装模式可以将软件包内所有的组件放到系统中的正确路径，安装软件包的命令是:rpm-ivhwu-ftpd-####  6.2-8.i386.rpm</p>
<p>i：作用rpm的安装模式 v: 校验文件信息h: 以＃号显示安装进度</p>
<h3 id="软件包的删除"><a href="#软件包的删除" class="headerlink" title="软件包的删除"></a>软件包的删除</h3><p>删除模式会将指定软件包的内容全部删除，但并不包括已更改过的配置文件，删除RPM软件包的命令如下：rpm -e wu-ftpd</p>
<p>注意：这里必须使用软件名“wu-ftpd”或”wu-ftpd-####  6.2-8而不是使用当初安装时的软件包名.wu-ftpd-####  6.2-8.i386.rpm</p>
<h3 id="软件包升级"><a href="#软件包升级" class="headerlink" title="软件包升级"></a>软件包升级</h3><p>升级模式会安装用户所指定的更新版本，并删除已安装在系统中的相同软件包，升级软件包命令如下：rpm-Uvhwu-ftpd-####  6.2-8.i386.rpm -Uvh：升级参数</p>
<h3 id="软件包更新"><a href="#软件包更新" class="headerlink" title="软件包更新"></a>软件包更新</h3><p>更新模式下，rpm命令会检查在命令行中所指定的软件包是否比系统中原有的软件 包更新。如果情况属实，rpm命令会自动更新指定的软件包；反之，若系统中并没有指定软件包的较旧版本，rpm命令并不会安装此软件包。而在升级模式下，不管系统中是否有较旧的版本，rpm命令都会安装指定的软件包。</p>
<p>rpm-Fvhwu-ftpd-####  6.2-8.i386.rpm -Fvh：更新参数</p>
<h3 id="软件包查询"><a href="#软件包查询" class="headerlink" title="软件包查询"></a>软件包查询</h3><p>若要获取RPM软件包的相关信息，可以使用查询模式。使用-q参数可查询一个已 安装的软件包的内容</p>
<p>rpm -qwu-ftpd</p>
<p>查询软件包所安装的位置：rpm -ql package-name</p>
<p>rpm -ql xv (l参数：显示文件列表)</p>
]]></content>
      
        <categories>
            
            <category> 学习积累 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo之NexT主题配置]]></title>
      <url>/2017/06/28/hexo-nexT%E9%85%8D%E7%BD%AE%E8%AF%A6%E6%83%85/</url>
      <content type="html"><![CDATA[<h1 id="hexo之next主题个性化配置详细教程"><a href="#hexo之next主题个性化配置详细教程" class="headerlink" title="hexo之next主题个性化配置详细教程"></a><strong><center>hexo之next主题个性化配置详细教程</center></strong></h1><h2 id="1-在右上角或者左上角实现fork-me-on-github"><a href="#1-在右上角或者左上角实现fork-me-on-github" class="headerlink" title="1.在右上角或者左上角实现fork me on github"></a><strong>1.在右上角或者左上角实现fork me on github</strong></h2><p><strong>实现的效果图</strong></p>
<blockquote>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhifork-me-on-github.png" alt=""></p>
</blockquote>
<p><strong>具体实现方法</strong><br><a id="more"></a></p>
<blockquote>
<p>点击<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="external">传送门&gt;&gt;</a><br>挑选自己喜欢的样式，并复制代码。 例如，我是复制如下代码：<img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhifork-me-on-github-demo.png" alt=""></p>
<p>然后粘贴刚才复制的代码到<br>themes/next/layout/_layout.swig<br>文件中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"headband"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>的下面，并把href改为你的github地址!<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/wongzeqi"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhifork-me-on-github-code.png" alt=""></p>
<h2 id="2-添加RSS"><a href="#2-添加RSS" class="headerlink" title="2.添加RSS"></a><strong>2.添加RSS</strong></h2><p><strong>实现效果图</strong></p>
<blockquote>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhiRSS.png" alt=""></p>
</blockquote>
<p><strong>具体实现方法</strong></p>
<blockquote>
<p>切换到hexo初始化的目录上然后安装 Hexo 插件：(这个插件会放在node_modules这个文件夹里)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save hexo-generator-feedalert(s);</div></pre></td></tr></table></figure>
<blockquote>
<p>接下来打开站点配置文件 _config.yml 在里面的末尾添加(请注意在冒号后面要加一个空格，不然会发生错误！)</p>
</blockquote>
<pre><code># Extensions 
## Plugins: http://hexo.io/plugins/
plugins: hexo-generate-feed
</code></pre><blockquote>
<p>然后打开next主题文件夹里面的_config.yml,在里面配置为如下样子：(就是在rss:的后面加上/atom.xml,注意在冒号后面要加一个空格)</p>
</blockquote>
<pre><code># Set rss to false to disable feed link.
# Leave rss as empty to use site&apos;s feed link.
# Set rss to specific value if you have burned your feed already.
rss: /atom.xml
</code></pre><blockquote>
<p>配置完之后运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure></p>
<p>重新生成一次，你会在 ./public 文件夹中看到 atom.xml 文件。然后启动服务器查看是否有效，之后再部署到 Github 中。</p>
<h2 id="3-添加动态粒子背景"><a href="#3-添加动态粒子背景" class="headerlink" title="3. 添加动态粒子背景"></a><strong>3. 添加动态粒子背景</strong></h2><p> <strong>实现效果图</strong></p>
</blockquote>
<p> <img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhibg.png" alt="背景图片效果"></p>
<p> <strong>具体实现方法</strong></p>
<blockquote>
<p>修改_layout.swig<br> 打开 next/layout/_layout.swig<br> 在 &lt; /body&gt;之前添加代码(注意不要放在&lt; /head&gt;的后面)</p>
</blockquote>
<pre><code>{% if theme.canvas_nest %}
	<script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js">
	</script>
	{% endif %}
</code></pre><blockquote>
<p>修改配置文件<br>打开 /next/_config.yml在里面添加如下代码：(可以放在最后面)</p>
</blockquote>
<pre><code># --------------------------------------------------------------
# background settings
# --------------------------------------------------------------
# add canvas-nest effect
# see detail from https://github.com/hustcc/canvas-nest.js
canvas_nest: true
</code></pre><blockquote>
<p>到此就结束了，运行 hexo clean，然后运行 hexo g,然后运行 hexo s，最后打开浏览器在浏览器的地址栏输入 localhost:4000 就能看到效果了\（￣︶￣）/</p>
<p><strong>如果你感觉默认的线条太多的话</strong><br>可以这么设置====&gt;<br>在上一步修改 _layout.swig中，把刚才的这些代码：</p>
</blockquote>
<pre><code>{% if theme.canvas_nest %}
	<script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>
	{% endif %}
</code></pre><blockquote>
<p><strong>说明</strong><br>配置项说明</p>
</blockquote>
<pre><code>color ：线条颜色, 默认: &apos;0,0,0&apos;；三个数字分别为(R,G,B)
opacity: 线条透明度（0~1）, 默认: 0.5
count: 线条的总数量, 默认: 150
zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1
</code></pre><blockquote>
<p>实现点击出现桃心效果</p>
</blockquote>
<p>在网址输入如下<br>     <a href="http://7u2ss1.com1.z0.glb.clouddn.com/love.js" target="_blank" rel="external">http://7u2ss1.com1.z0.glb.clouddn.com/love.js</a><br>    然后将里面的代码copy一下，新建love.js文件并且将代码复制进去，然后保存。<br>    将love.js文件放到路径/themes/next/source/js/src里面，<br>    然后打开\themes\next\layout_layout.swig文件,在末尾（在前面引用会出现找不到的bug）<br>    添加以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 页面点击小红心 --&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/love.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h2 id="4-修改文章内链接文本样式"><a href="#4-修改文章内链接文本样式" class="headerlink" title="4. 修改文章内链接文本样式"></a><strong>4. 修改文章内链接文本样式</strong></h2><blockquote>
<p><strong>实现效果图</strong></p>
</blockquote>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhilink.gif" alt="效果图"></p>
<blockquote>
<p><strong>具体实现方法</strong></p>
</blockquote>
<p>修改文件 themes\next\source\css_common\components\post\post.styl ，在末尾添加如下css样式，：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 文章内链接文本样式</div><div class="line">.post-body p a&#123;</div><div class="line">  color: #0593d3;</div><div class="line">  border-bottom: none;</div><div class="line">  border-bottom: 1px solid #0593d3;</div><div class="line">  &amp;:hover &#123;</div><div class="line">    color: #fc6423;</div><div class="line">    border-bottom: none;</div><div class="line">    border-bottom: 1px solid #fc6423;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中选择 .post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p>
<h2 id="5-修改文章底部的那个带-号的标签"><a href="#5-修改文章底部的那个带-号的标签" class="headerlink" title="5. 修改文章底部的那个带#号的标签"></a><strong>5. 修改文章底部的那个带#号的标签</strong></h2><blockquote>
<p><strong>实现效果图</strong></p>
</blockquote>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhitargs.png" alt="tags"></p>
<blockquote>
<p><strong>具体实现方法</strong></p>
</blockquote>
<p>修改模板<br>/themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#，将 # 换成<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-tag"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="6-在每篇文章末尾统一添加“本文结束”标记"><a href="#6-在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="6. 在每篇文章末尾统一添加“本文结束”标记"></a><strong>6. 在每篇文章末尾统一添加“本文结束”标记</strong></h2><blockquote>
<p><strong>实现效果图</strong></p>
</blockquote>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/peizhiend.png" alt="end"></p>
<p>具体实现方法</p>
<p>在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">	&#123;% if not is_index %&#125;</div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span></div><div class="line">			-------------本文结束</div><div class="line">			<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">			感谢您的阅读-------------</div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	&#123;% endif %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接着打开\themes\next\layout_macro\post.swig文件，在post-body 之后， post-footer之前添加如下画红色部分代码（post-footer之前两个DIV）：如下大概在360行左右的位置：</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/end-code.png" alt="code"></p>
<p>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  &#123;% if not is_index %&#125;</div><div class="line">    &#123;% include 'passage-end-tag.swig' %&#125;</div><div class="line">  &#123;% endif %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后打开主题配置文件_config.yml,在末尾添加：</p>
<pre><code># 文章末尾添加“本文结束”标记
passage_end_tag:
  enabled: true
</code></pre><h2 id="7-修改作者头像并旋转"><a href="#7-修改作者头像并旋转" class="headerlink" title="7. 修改作者头像并旋转"></a><strong>7. 修改作者头像并旋转</strong></h2><blockquote>
<p><strong>实现效果图</strong>————————————————–无~0.0~</p>
<p><strong>具体实现方法</strong></p>
</blockquote>
<p>打开\themes\next\source\css_common\components\sidebar\sidebar-author.styl，在里面添加如下代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.site-author-image</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</div><div class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</div><div class="line">  <span class="attribute">height</span>: $site-author-image-height;</div><div class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</div><div class="line"></div><div class="line">  <span class="comment">/* 头像圆形 */</span></div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</div><div class="line"></div><div class="line">  <span class="comment">/* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span></div><div class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</div><div class="line"> </div><div class="line"></div><div class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></div><div class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1.0s</span> ease-out;</div><div class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1.0s</span> ease-out;</div><div class="line">  <span class="attribute">transition</span>: transform <span class="number">1.0s</span> ease-out;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="comment">/* 鼠标经过停止头像旋转 </span></div><div class="line">  -webkit-animation-play-state:paused;</div><div class="line">  animation-play-state:paused;*/</div><div class="line"></div><div class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</div><div class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Z 轴旋转动画 */</span></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> play &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(0deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> play &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(0deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> play &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(0deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-360deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="8-主页文章添加阴影效果"><a href="#8-主页文章添加阴影效果" class="headerlink" title="8. 主页文章添加阴影效果"></a><strong>8. 主页文章添加阴影效果</strong></h2><blockquote>
<p><strong>实现效果图</strong></p>
</blockquote>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/as.png" alt="效果图"></p>
<blockquote>
<p><strong>具体实现方法</strong></p>
</blockquote>
<p>打开\themes\next\source\css_custom\custom.styl,向里面加入：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*主页文章添加阴影效果*/</span></div><div class="line"> <span class="selector-class">.post</span> &#123;</div><div class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</div><div class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</div><div class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</div><div class="line">   <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 203, .5);</div><div class="line">   <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 204, .5);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="9-在网站底部加上访问量"><a href="#9-在网站底部加上访问量" class="headerlink" title="9. 在网站底部加上访问量"></a><strong>9. 在网站底部加上访问量</strong></h2><blockquote>
<p><strong>实现效果图</strong></p>
</blockquote>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/number.png" alt="效果图"></p>
<blockquote>
<p><strong>具体实现方法</strong></p>
</blockquote>
<p>打开\themes\next\layout_partials\footer.swig文件,在copyright前加上画红线这话：</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/number-code.png" alt="code"></p>
<p>代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>然后再合适的位置添加显示统计的代码(位置还是上述这个文件)，如图：</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/number-code-2.png" alt="code"></p>
<p>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user-md"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></div><div class="line">  本站访客数:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="10-网站底部字数统计和时间统计"><a href="#10-网站底部字数统计和时间统计" class="headerlink" title="10. 网站底部字数统计和时间统计"></a><strong>10. 网站底部字数统计和时间统计</strong></h2><blockquote>
<p><strong>实现效果图</strong></p>
</blockquote>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/hanzi.png" alt="效果图"></p>
<blockquote>
<p><strong>具体实现方法</strong></p>
</blockquote>
<p>文字统计切换到根目录下，然后运行如下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-wordcount --save</div></pre></td></tr></table></figure></p>
<p>然后在/themes/next/layout/_partials/footer.swig文件尾部加上：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"theme-info"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>博客全站共&#123;&#123; totalcount(site) &#125;&#125;字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>时间统计在根目录下安装 hexo-wordcount,运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-wordcount --save</div></pre></td></tr></table></figure></p>
<p>然后在主题的配置文件中，配置如下：</p>
<pre><code># Post wordcount display settings
# Dependencies: https://github.com/willin/hexo-wordcount
post_wordcount:
item_text: true
wordcount: true
min2read: true
</code></pre><h2 id="11-在文章底部增加版权信息"><a href="#11-在文章底部增加版权信息" class="headerlink" title="11. 在文章底部增加版权信息"></a><strong>11. 在文章底部增加版权信息</strong></h2><blockquote>
<p><strong>实现效果图</strong></p>
</blockquote>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/power.png" alt="这里写图片描述"></p>
<blockquote>
<p><strong>请看具体实现步骤</strong>————————-<strong>哈哈哈哈哈</strong></p>
</blockquote>
<p>在目录next/layout/_macro/下添加my-copyright.swig：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&#123;% if page.copyright %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my_post_copyright"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- JS库 sweetalert 可修改路径 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>  <span class="attr">src</span>=<span class="string">"http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>本文标题:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(page.path) &#125;&#125;"</span>&gt;</span>&#123;&#123; page.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章作者:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span> <span class="attr">title</span>=<span class="string">"访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"</span>&gt;</span>&#123;&#123; theme.author &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>发布时间:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>最后更新:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>原始链接:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(page.path) &#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; page.title &#125;&#125;"</span>&gt;</span>&#123;&#123; page.permalink &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"copy-path"</span>  <span class="attr">title</span>=<span class="string">"点击复制文章链接"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-clipboard"</span> <span class="attr">data-clipboard-text</span>=<span class="string">"&#123;&#123; page.permalink &#125;&#125;"</span>  <span class="attr">aria-label</span>=<span class="string">"复制成功！"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>许可协议:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-creative-commons"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">href</span>=<span class="string">"https://creativecommons.org/licenses/by-nc-nd/4.0/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"</span>&gt;</span>署名-非商业性使用-禁止演绎 4.0 国际<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 转载请保留原文链接及作者。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> </span></div><div class="line">    <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">'.fa-clipboard'</span>);</div><div class="line">    clipboard.on(<span class="string">'success'</span>, $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      $(<span class="string">".fa-clipboard"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        swal(&#123;   </div><div class="line">          <span class="attr">title</span>: <span class="string">""</span>,   </div><div class="line">          <span class="attr">text</span>: <span class="string">'复制成功'</span>,   </div><div class="line">          <span class="attr">html</span>: <span class="literal">false</span>,</div><div class="line">          <span class="attr">timer</span>: <span class="number">500</span>,   </div><div class="line">          <span class="attr">showConfirmButton</span>: <span class="literal">false</span></div><div class="line">        &#125;);</div><div class="line">      &#125;);</div><div class="line">    &#125;));  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>
<p>在目录next/source/css/_common/components/post/下添加my-post-copyright.styl：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">.my_post_copyright &#123;</div><div class="line">  width: 85%;</div><div class="line">  max-width: 45em;</div><div class="line">  margin: 2.8em auto 0;</div><div class="line">  padding: 0.5em 1.0em;</div><div class="line">  border: 1px solid #d3d3d3;</div><div class="line">  font-size: 0.93rem;</div><div class="line">  line-height: 1.6em;</div><div class="line">  word-break: break-all;</div><div class="line">  background: rgba(255,255,255,0.4);</div><div class="line">&#125;</div><div class="line">.my_post_copyright p&#123;margin:0;&#125;</div><div class="line">.my_post_copyright span &#123;</div><div class="line">  display: inline-block;</div><div class="line">  width: 5.2em;</div><div class="line">  color: #b5b5b5;</div><div class="line">  font-weight: bold;</div><div class="line">&#125;</div><div class="line">.my_post_copyright .raw &#123;</div><div class="line">  margin-left: 1em;</div><div class="line">  width: 5em;</div><div class="line">&#125;</div><div class="line">.my_post_copyright a &#123;</div><div class="line">  color: #808080;</div><div class="line">  border-bottom:0;</div><div class="line">&#125;</div><div class="line">.my_post_copyright a:hover &#123;</div><div class="line">  color: #a3d2a3;</div><div class="line">  text-decoration: underline;</div><div class="line">&#125;</div><div class="line">.my_post_copyright:hover .fa-clipboard &#123;</div><div class="line">  color: #000;</div><div class="line">&#125;</div><div class="line">.my_post_copyright .post-url:hover &#123;</div><div class="line">  font-weight: normal;</div><div class="line">&#125;</div><div class="line">.my_post_copyright .copy-path &#123;</div><div class="line">  margin-left: 1em;</div><div class="line">  width: 1em;</div><div class="line">  +mobile()&#123;display:none;&#125;</div><div class="line">&#125;</div><div class="line">.my_post_copyright .copy-path:hover &#123;</div><div class="line">  color: #808080;</div><div class="line">  cursor: pointer;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>修改next/layout/_macro/post.swig，在代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      &#123;% if not is_index %&#125;</div><div class="line">        &#123;% include 'wechat-subscriber.swig' %&#125;</div><div class="line">      &#123;% endif %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>之前添加增加如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      &#123;% if not is_index %&#125;</div><div class="line">        &#123;% include 'my-copyright.swig' %&#125;</div><div class="line">      &#123;% endif %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如图：<br><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/copyright.png" alt="这里写图片描述"></p>
<p>修改next/source/css/_common/components/post/post.styl文件，在最后一行增加代码：</p>
<p>@import “my-post-copyright”<br>保存重新生成即可。如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置，类似：</p>
<pre><code>---
title: 前端小项目：使用canvas绘画哆啦A梦
date: 2017-05-22 22:53:53
tags: canvas
categories: 前端
copyright: true
---
</code></pre><h2 id="12-文章加密访问"><a href="#12-文章加密访问" class="headerlink" title="12. 文章加密访问"></a><strong>12. 文章加密访问</strong></h2><blockquote>
<p><strong>直接看步骤</strong></p>
</blockquote>
<p>打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码：</p>
<p><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/password.png" alt="code"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</div><div class="line">                alert(<span class="string">'密码错误！'</span>);</div><div class="line">                history.back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>最后在你的文章中添加password标记如图：<br><img src="http://os94ofsac.bkt.clouddn.com/hexo-next-blog/password-xiaoguo.png" alt="效果图"></p>
<h2 id="今天就写到这里-未完待续……"><a href="#今天就写到这里-未完待续……" class="headerlink" title="今天就写到这里          未完待续……"></a><strong><center>今天就写到这里          未完待续……</center></strong></h2>]]></content>
      
        <categories>
            
            <category> HEXO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hext </tag>
            
            <tag> next </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
